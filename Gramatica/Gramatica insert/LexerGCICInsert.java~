// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex_gcic_insert.jflex

/*Primera seccion, librerias */
package gramatica_gcic_insert;
import java_cup.runtime.*;
import static gramatica_gcic_insert.sym.*;
import clasesDAO.Token;
import clasesDAO.TokenError;
import java.util.ArrayList;

/*Segunda seccion, config*/

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerGCICInsert implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\336\u0200\1\u0400\u1000\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\3\1\1\0\2\1\22\0\1\2\1\3\1\4"+
    "\1\5\1\6\1\7\2\10\1\11\1\12\2\10\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\10\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\41\1\50\1\51\1\52"+
    "\1\53\1\54\1\41\1\55\1\56\1\41\1\57\1\27"+
    "\1\60\1\27\1\61\1\27\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\10"+
    "\1\115\1\27\143\116\1\117\160\116\1\120\u0258\116\1\121"+
    "\u0150\116\1\120\2\116";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\14\17\1\22\1\23\1\1\2\0"+
    "\1\24\35\0\1\3\2\0\1\25\1\0\1\26\1\0"+
    "\1\27\10\17\1\30\7\17\1\0\1\31\1\32\3\0"+
    "\1\33\2\0\1\34\40\0\1\35\1\0\7\17\1\36"+
    "\2\17\1\37\11\17\1\40\3\17\3\0\1\41\2\0"+
    "\1\42\41\0\1\35\1\0\1\17\1\43\3\17\2\44"+
    "\14\17\1\45\2\17\1\46\1\47\1\17\1\50\1\17"+
    "\1\51\1\17\2\0\1\52\24\0\1\53\2\0\1\54"+
    "\4\0\1\35\1\0\2\17\1\55\2\17\1\56\10\17"+
    "\1\57\1\60\1\0\2\17\1\0\1\61\15\0\1\62"+
    "\7\0\1\63\2\0\1\35\1\0\1\64\1\17\1\65"+
    "\1\66\1\17\1\67\2\17\1\70\3\17\2\0\1\71"+
    "\1\17\2\0\1\72\12\0\1\73\3\0\1\17\1\74"+
    "\3\17\1\75\1\17\2\0\1\76\6\0\1\77\2\0"+
    "\1\100\2\0\1\101\1\102\1\103\1\104\2\17\10\0"+
    "\2\17\1\0\1\105\4\0\1\106\1\0\1\107\1\110"+
    "\1\0\1\111\3\0\1\112\1\0\1\113\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\122\0\244\0\366\0\u0148\0\122\0\122"+
    "\0\122\0\122\0\122\0\u019a\0\u01ec\0\122\0\122\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\122\0\122\0\u03d8\0\u042a"+
    "\0\u047c\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba"+
    "\0\u070c\0\u075e\0\122\0\122\0\u07b0\0\u0802\0\u0854\0\122"+
    "\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4"+
    "\0\u0b36\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74"+
    "\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\u1004"+
    "\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242\0\u1294"+
    "\0\122\0\u0290\0\122\0\u02e2\0\122\0\u12e6\0\u1338\0\u138a"+
    "\0\u13dc\0\u142e\0\u1480\0\u14d2\0\u1524\0\u0334\0\u1576\0\u15c8"+
    "\0\u161a\0\u166c\0\u16be\0\u1710\0\u1762\0\u17b4\0\u0854\0\122"+
    "\0\u1806\0\u1858\0\u18aa\0\122\0\u18fc\0\u194e\0\122\0\u19a0"+
    "\0\u19f2\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30"+
    "\0\u1c82\0\u1cd4\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0"+
    "\0\u1f12\0\u1f64\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150"+
    "\0\u21a2\0\u21f4\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0"+
    "\0\u2432\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670"+
    "\0\u0334\0\u26c2\0\u2714\0\u0334\0\u2766\0\u27b8\0\u280a\0\u285c"+
    "\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u0334\0\u2a48\0\u2a9a"+
    "\0\u2aec\0\366\0\u2b3e\0\u2b90\0\122\0\u2be2\0\u2c34\0\122"+
    "\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72\0\u2ec4"+
    "\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102\0\u3154"+
    "\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392\0\u33e4"+
    "\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674"+
    "\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u0334\0\u380e\0\u3860\0\u38b2"+
    "\0\122\0\u0334\0\u3904\0\u3956\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e"+
    "\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38\0\u3c8a\0\u0334\0\u3cdc"+
    "\0\u3d2e\0\u0334\0\u0334\0\u3d80\0\u0334\0\u3dd2\0\u0334\0\u3e24"+
    "\0\u3e76\0\u3ec8\0\122\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062"+
    "\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc\0\u424e\0\u42a0\0\u42f2"+
    "\0\u4344\0\u4396\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530\0\122"+
    "\0\u4582\0\u45d4\0\122\0\u4626\0\u4678\0\u46ca\0\u471c\0\u476e"+
    "\0\u47c0\0\u4812\0\u4864\0\u0334\0\u48b6\0\u4908\0\u0334\0\u495a"+
    "\0\u49ac\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u0334"+
    "\0\u0334\0\u4bea\0\u4c3c\0\u4c8e\0\u4ce0\0\u0334\0\u4d32\0\u4d84"+
    "\0\u4dd6\0\u4e28\0\u4e7a\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2\0\u5014"+
    "\0\u5066\0\u50b8\0\u510a\0\122\0\u515c\0\u51ae\0\u5200\0\u5252"+
    "\0\u52a4\0\u52f6\0\u5348\0\122\0\u539a\0\u53ec\0\u0148\0\u543e"+
    "\0\u0334\0\u5490\0\u0334\0\u0334\0\u54e2\0\u0334\0\u5534\0\u5586"+
    "\0\u0334\0\u55d8\0\u562a\0\u567c\0\u56ce\0\u5720\0\u0334\0\u5772"+
    "\0\u57c4\0\u5816\0\122\0\u5868\0\u58ba\0\u590c\0\u595e\0\u59b0"+
    "\0\u5a02\0\u5a54\0\u5aa6\0\u5af8\0\u5b4a\0\122\0\u5b9c\0\u5bee"+
    "\0\u5c40\0\u5c92\0\u0334\0\u5ce4\0\u5d36\0\u5d88\0\u0334\0\u5dda"+
    "\0\u5e2c\0\u5e7e\0\u0334\0\u5ed0\0\u5f22\0\u5f74\0\u5fc6\0\u6018"+
    "\0\u606a\0\122\0\u60bc\0\u610e\0\122\0\u6160\0\u61b2\0\u47c0"+
    "\0\u0334\0\u0334\0\u0334\0\u6204\0\u6256\0\u62a8\0\u62fa\0\u634c"+
    "\0\u639e\0\u63f0\0\u6442\0\u6494\0\u64e6\0\u6538\0\u658a\0\u65dc"+
    "\0\122\0\u662e\0\u6680\0\u66d2\0\u6724\0\122\0\u6776\0\u0334"+
    "\0\u0334\0\u67c8\0\122\0\u681a\0\u686c\0\u68be\0\122\0\u6910"+
    "\0\122\0\u6962\0\u69b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\2\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\2\1\6\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\6\2\23\1\24\24\23"+
    "\1\25\1\26\1\23\1\27\1\30\1\31\2\23\1\32"+
    "\1\23\1\33\1\34\4\23\1\35\1\36\2\23\1\37"+
    "\1\40\1\41\2\23\1\42\3\23\1\43\1\44\1\2"+
    "\1\45\2\2\122\0\3\46\1\47\21\0\1\50\74\0"+
    "\3\51\1\52\1\0\1\53\1\54\5\52\1\54\2\52"+
    "\1\55\2\56\6\52\1\57\1\54\1\60\3\54\1\61"+
    "\10\54\1\62\1\54\1\63\2\54\1\64\2\54\1\52"+
    "\1\65\1\54\1\66\1\67\1\70\2\54\1\71\1\72"+
    "\2\54\1\73\1\54\1\74\1\75\1\76\1\77\1\100"+
    "\1\54\1\101\1\102\1\103\1\54\1\64\1\104\1\54"+
    "\1\105\1\54\2\52\11\0\2\6\6\0\1\6\1\0"+
    "\3\6\5\0\30\6\2\0\33\6\13\0\2\6\6\0"+
    "\1\106\1\0\3\6\5\0\30\6\2\0\33\6\13\0"+
    "\2\6\6\0\1\106\1\0\3\15\5\0\30\6\2\0"+
    "\33\6\6\0\3\107\1\110\21\0\1\111\74\0\3\112"+
    "\22\0\1\113\74\0\3\114\22\0\1\115\101\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\27\23\2\0"+
    "\33\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\27\23\2\0\1\116\32\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\27\23\2\0\14\23"+
    "\1\117\16\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\27\23\2\0\1\23\1\120\31\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\27\23"+
    "\2\0\1\116\13\23\1\121\2\23\1\122\13\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\27\23"+
    "\2\0\17\23\1\123\13\23\13\0\2\6\6\0\1\6"+
    "\1\0\3\23\5\0\1\6\27\23\2\0\5\23\1\124"+
    "\14\23\1\125\10\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\27\23\2\0\4\23\1\126\26\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\27\23\2\0\1\23\1\127\31\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\27\23\2\0\16\23"+
    "\1\130\14\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\27\23\2\0\17\23\1\131\13\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\27\23"+
    "\2\0\22\23\1\132\10\23\13\0\2\6\6\0\1\6"+
    "\1\0\3\23\5\0\1\6\27\23\2\0\5\23\1\133"+
    "\23\23\1\134\1\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\27\23\2\0\11\23\1\135\21\23"+
    "\127\0\1\136\3\46\22\0\1\50\76\0\114\137\4\0"+
    "\3\51\1\52\1\140\1\53\1\54\5\52\1\54\2\52"+
    "\1\55\2\56\6\52\1\57\1\54\1\60\3\54\1\61"+
    "\10\54\1\62\1\54\1\63\2\54\1\64\2\54\1\52"+
    "\1\65\1\54\1\66\1\67\1\70\2\54\1\71\1\72"+
    "\2\54\1\73\1\54\1\74\1\75\1\76\1\77\1\100"+
    "\1\54\1\101\1\102\1\103\1\54\1\64\1\104\1\54"+
    "\1\105\1\54\2\52\1\0\1\141\2\0\4\52\1\140"+
    "\53\52\1\65\35\52\1\0\1\141\2\0\4\52\1\140"+
    "\12\52\3\142\6\52\27\142\1\52\1\65\1\52\32\142"+
    "\2\52\1\0\1\141\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\33\54\2\52\1\0\1\145\2\0\3\146\1\52"+
    "\1\147\2\52\1\150\7\52\3\56\36\52\1\65\20\52"+
    "\1\151\7\52\1\53\4\52\1\0\1\152\2\0\3\146"+
    "\1\52\1\147\2\52\1\150\7\52\3\56\36\52\1\65"+
    "\20\52\1\151\14\52\1\0\1\152\2\0\3\143\1\52"+
    "\1\144\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\20\54\1\153\6\54\1\52\1\65\22\54\1\153\10\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\16\54\1\154"+
    "\10\54\1\52\1\65\17\54\1\154\13\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\4\54\1\155\22\54\1\52"+
    "\1\65\5\54\1\155\25\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\20\54\1\156\6\54\1\52\1\65\33\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\1\157\26\54"+
    "\1\52\1\65\1\54\1\157\31\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\4\54\1\160\22\54\1\52\1\65"+
    "\5\54\1\160\25\54\2\52\1\0\1\145\2\0\3\65"+
    "\25\0\27\52\3\0\32\52\6\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\20\54"+
    "\1\153\6\54\1\52\1\65\21\54\1\161\1\153\10\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\14\54\1\162\16\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\16\54\1\154\10\54\1\52\1\65\5\54"+
    "\1\163\2\54\1\164\6\54\1\165\13\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\27\54\1\52\1\65\25\54"+
    "\1\166\5\54\2\52\1\0\1\145\2\0\3\143\1\52"+
    "\1\144\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\4\54\1\155\22\54\1\52\1\65\5\54\1\155\14\54"+
    "\1\167\10\54\2\52\1\0\1\145\2\0\3\143\1\52"+
    "\1\144\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\27\54\1\52\1\65\25\54\1\170\5\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\27\54\1\52\1\65\5\54"+
    "\1\171\3\54\1\172\21\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\1\54\1\173\31\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\1\54\1\174\23\54\1\175\5\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\27\54\1\52\1\65\14\54"+
    "\1\176\16\54\2\52\1\0\1\145\2\0\3\143\1\52"+
    "\1\144\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\27\54\1\52\1\65\25\54\1\177\5\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\27\54\1\52\1\65\1\54"+
    "\1\200\3\54\1\201\3\54\1\202\5\54\1\203\13\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\1\157\26\54"+
    "\1\52\1\65\1\54\1\157\7\54\1\204\21\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\5\54\1\205\25\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\10\54\1\206\22\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\5\54\1\207\25\54\2\52\1\0\1\145\7\0\2\6"+
    "\6\0\1\6\1\0\3\210\5\0\30\6\2\0\33\6"+
    "\6\0\3\107\22\0\1\111\110\0\1\211\112\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\1\23\1\212"+
    "\1\23\1\213\2\23\1\214\1\215\1\216\2\23\1\217"+
    "\2\23\1\220\1\221\1\23\1\222\1\223\4\23\2\0"+
    "\2\23\1\212\1\23\1\213\2\23\1\214\1\215\1\216"+
    "\2\23\1\217\2\23\1\220\1\221\2\23\1\222\1\223"+
    "\6\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\27\23\2\0\24\23\1\224\6\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\27\23\2\0"+
    "\3\23\1\225\27\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\27\23\2\0\1\23\1\226\31\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\27\23\2\0\14\23\1\227\16\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\27\23\2\0\16\23"+
    "\1\230\14\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\27\23\2\0\11\23\1\231\21\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\27\23"+
    "\2\0\5\23\1\232\25\23\13\0\2\6\6\0\1\6"+
    "\1\0\3\23\5\0\1\6\27\23\2\0\15\23\1\233"+
    "\15\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\27\23\2\0\3\23\1\234\27\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\27\23\2\0"+
    "\27\23\1\235\3\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\27\23\2\0\3\23\1\236\27\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\27\23\2\0\30\23\1\237\2\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\27\23\2\0\20\23"+
    "\1\240\12\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\27\23\2\0\4\23\1\241\26\23\126\0"+
    "\1\242\122\0\1\243\3\244\1\52\1\245\12\52\3\142"+
    "\6\52\27\142\1\52\1\65\1\52\32\142\2\52\1\0"+
    "\1\246\2\0\3\143\1\52\1\144\53\52\1\65\35\52"+
    "\1\0\1\145\123\0\1\247\3\146\1\52\1\147\2\52"+
    "\1\150\50\52\1\65\20\52\1\151\14\52\1\0\1\152"+
    "\2\0\3\150\1\52\1\250\53\52\1\65\35\52\1\0"+
    "\1\251\2\0\4\52\1\140\53\52\1\65\30\52\1\252"+
    "\4\52\1\0\1\141\123\0\1\253\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\10\54"+
    "\1\254\16\54\1\52\1\65\11\54\1\254\21\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\23\54\1\255\3\54"+
    "\1\52\1\65\25\54\1\255\5\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\15\54\1\256\11\54\1\52\1\65"+
    "\16\54\1\256\14\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\16\54\1\257\10\54\1\52\1\65\33\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\15\54\1\260\11\54"+
    "\1\52\1\65\16\54\1\260\14\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\20\54\1\261\6\54\1\52\1\65"+
    "\22\54\1\261\10\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\25\54\1\262\5\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\1\54\1\263\23\54\1\264\5\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\16\54\1\265"+
    "\14\54\2\52\1\0\1\145\2\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\27\54"+
    "\1\52\1\65\5\54\1\266\25\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\23\54\1\255\3\54\1\52\1\65"+
    "\14\54\1\267\10\54\1\255\5\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\3\54\1\270"+
    "\27\54\2\52\1\0\1\145\2\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\27\54"+
    "\1\52\1\65\1\54\1\271\3\54\1\272\25\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\23\54\1\273\7\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\6\54\1\274\24\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\15\54\1\264\15\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\22\54\1\275\10\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\26\54\1\271\4\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\15\54\1\276\15\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\11\54\1\277\21\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\22\54\1\300\10\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\4\54\1\301\26\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\4\54\1\302\26\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\7\54\1\303\23\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\27\54\1\304\3\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\14\54\1\305\16\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\1\54\1\306\26\54\1\307"+
    "\2\54\2\52\1\0\1\145\2\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\27\54"+
    "\1\52\1\65\11\54\1\310\21\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\14\54\1\311"+
    "\16\54\2\52\1\0\1\145\7\0\2\6\6\0\1\6"+
    "\1\0\3\312\5\0\30\6\2\0\33\6\22\0\1\313"+
    "\112\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\16\23\1\314\1\23\1\315\2\23\1\316\3\23\2\0"+
    "\17\23\1\314\2\23\1\315\2\23\1\316\5\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\10\23"+
    "\1\317\16\23\2\0\11\23\1\317\21\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\2\23\1\320"+
    "\24\23\2\0\3\23\1\320\27\23\10\0\1\321\2\0"+
    "\2\6\6\0\1\6\1\0\1\23\1\322\1\23\5\0"+
    "\1\6\4\23\1\323\22\23\2\0\5\23\1\323\25\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\14\23\1\324\1\325\11\23\2\0\15\23\1\324\1\325"+
    "\14\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\10\23\1\326\16\23\2\0\11\23\1\326\21\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\17\23\1\327\7\23\2\0\20\23\1\327\12\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\4\23"+
    "\1\330\12\23\1\331\7\23\2\0\5\23\1\330\12\23"+
    "\1\331\12\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\4\23\1\332\3\23\1\333\16\23\2\0"+
    "\5\23\1\332\3\23\1\333\21\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\27\23\2\0\13\23"+
    "\1\334\17\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\27\23\2\0\23\23\1\335\7\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\27\23"+
    "\2\0\17\23\1\336\3\23\1\337\7\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\27\23\2\0"+
    "\24\23\1\340\6\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\27\23\2\0\7\23\1\341\23\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\27\23\2\0\6\23\1\342\24\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\27\23\2\0\5\23"+
    "\1\343\25\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\27\23\2\0\14\23\1\344\16\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\27\23"+
    "\2\0\23\23\1\345\7\23\13\0\2\6\6\0\1\6"+
    "\1\0\3\23\5\0\1\6\27\23\2\0\24\23\1\346"+
    "\6\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\27\23\2\0\5\23\1\347\25\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\27\23\2\0"+
    "\24\23\1\350\6\23\126\0\1\140\1\0\3\244\1\52"+
    "\1\245\53\52\1\65\35\52\1\0\1\246\123\0\1\351"+
    "\120\0\1\144\122\0\1\352\3\252\1\52\1\353\53\52"+
    "\1\65\35\52\1\0\1\354\122\0\1\147\1\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\1\355\26\54\1\52\1\65\1\54\1\355\31\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\20\54\1\356"+
    "\6\54\1\52\1\65\22\54\1\356\10\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\4\54\1\357\22\54\1\52"+
    "\1\65\5\54\1\357\25\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\2\54\1\360\24\54\1\52\1\65\33\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\21\54\1\361"+
    "\5\54\1\52\1\65\23\54\1\361\7\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\3\54\1\362\23\54\1\52"+
    "\1\65\4\54\1\362\26\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\1\54\1\302\31\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\3\54\1\363\27\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\5\54\1\302\25\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\24\54\1\364\6\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\3\54\1\365\27\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\25\54\1\366\5\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\10\54\1\367\22\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\31\54\1\302\1\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\5\54\1\370\25\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\24\54\1\371\6\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\24\54\1\372\6\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\17\54\1\373\13\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\2\54\1\374\30\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\26\54\1\264\4\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\20\54\1\375\12\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\11\54\1\376\21\54\2\52\1\0\1\145\2\0"+
    "\3\377\1\52\1\u0100\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\33\54\2\52\1\0"+
    "\1\u0101\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\27\54\1\52\1\65\10\54"+
    "\1\274\22\54\2\52\1\0\1\145\2\0\3\u0102\1\52"+
    "\1\u0103\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\27\54\1\52\1\65\33\54\2\52\1\0\1\u0104\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\26\54\1\u0105\4\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\14\54\1\302\16\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\24\54\1\u0106\6\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\24\54\1\264\6\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\14\54\1\u0107\16\54"+
    "\2\52\1\0\1\145\7\0\2\6\6\0\1\6\1\0"+
    "\3\u0108\5\0\30\6\2\0\33\6\6\0\116\u0109\11\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\3\23"+
    "\1\u010a\23\23\2\0\4\23\1\u010a\26\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\22\23\1\u010b"+
    "\4\23\2\0\24\23\1\u010b\6\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\24\23\1\u010c\2\23"+
    "\2\0\26\23\1\u010c\4\23\13\0\2\6\6\0\1\6"+
    "\1\0\3\23\5\0\1\6\10\23\1\u010d\16\23\2\0"+
    "\11\23\1\u010d\21\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\1\u010e\26\23\2\0\1\23\1\u010e"+
    "\31\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\6\23\1\u010f\20\23\2\0\7\23\1\u010f\23\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\17\23\1\u0110\7\23\2\0\20\23\1\u0110\12\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\15\23"+
    "\1\u0111\11\23\2\0\16\23\1\u0111\14\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\22\23\1\u0112"+
    "\4\23\2\0\24\23\1\u0112\6\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\13\23\1\u0113\13\23"+
    "\2\0\14\23\1\u0113\16\23\13\0\2\6\6\0\1\6"+
    "\1\0\3\23\5\0\1\6\1\u0114\26\23\2\0\1\23"+
    "\1\u0114\31\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\25\23\1\u0115\1\23\2\0\30\23\1\u0115"+
    "\2\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\22\23\1\u0116\4\23\2\0\24\23\1\u0116\6\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\27\23\2\0\7\23\1\u0117\23\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\27\23\2\0\23\23"+
    "\1\u0118\7\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\27\23\2\0\22\23\1\u0119\10\23\13\0"+
    "\2\6\5\0\1\u011a\1\6\1\0\3\23\5\0\1\6"+
    "\27\23\2\0\33\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\27\23\2\0\10\23\1\u011b\22\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\27\23\2\0\11\23\1\u011c\21\23\13\0\2\6\5\0"+
    "\1\u011d\1\6\1\0\3\23\5\0\1\6\27\23\2\0"+
    "\33\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\27\23\2\0\10\23\1\u011e\22\23\126\0\1\245"+
    "\121\0\1\250\122\0\1\u011f\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\13\54\1\u0120"+
    "\13\54\1\52\1\65\14\54\1\u0120\16\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\10\54\1\u0121\16\54\1\52"+
    "\1\65\11\54\1\u0121\21\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\24\54\1\u0122\2\54\1\52\1\65\26\54"+
    "\1\u0122\4\54\2\52\1\0\1\145\2\0\3\143\1\52"+
    "\1\144\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\4\54\1\u0123\22\54\1\52\1\65\33\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\u0124\2\52\3\54\6\52\27\54\1\52\1\65\33\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\1\u0125\26\54"+
    "\1\52\1\65\1\54\1\u0125\31\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\13\54\1\302"+
    "\17\54\2\52\1\0\1\145\2\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\27\54"+
    "\1\52\1\65\5\54\1\u0126\25\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\13\54\1\u0127"+
    "\17\54\2\52\1\0\1\145\2\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\27\54"+
    "\1\52\1\65\15\54\1\u0128\15\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\23\54\1\u0129"+
    "\7\54\2\52\1\0\1\145\2\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\27\54"+
    "\1\52\1\65\16\54\1\302\14\54\2\52\1\0\1\145"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\11\54\1\u012a"+
    "\21\54\2\52\1\0\1\145\2\0\3\u012b\1\52\1\u012c"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\27\54"+
    "\1\52\1\65\33\54\2\52\1\0\1\u012d\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\17\54\1\370\13\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\5\54\1\u012e\25\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\14\54\1\264\16\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\17\54\1\u012f\13\54\2\52\1\0\1\145\2\0\3\377"+
    "\1\52\1\u0100\53\52\1\65\35\52\1\0\1\u0101\123\0"+
    "\1\u0130\3\u0102\1\52\1\u0103\53\52\1\65\35\52\1\0"+
    "\1\u0104\123\0\1\u0131\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\5\54\1\u0132\25\54\2\52\1\0\1\145\2\0\3\u0133"+
    "\1\52\1\u0134\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\33\54\2\52\1\0\1\u0135"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\17\54\1\u0136"+
    "\13\54\2\52\1\0\1\145\7\0\2\6\6\0\1\6"+
    "\1\0\1\6\2\u0137\5\0\30\6\2\0\33\6\6\0"+
    "\14\u0109\1\u0138\101\u0109\11\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\26\23\1\u0139\2\0\31\23\1\u0139"+
    "\1\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\22\23\1\u013a\4\23\2\0\24\23\1\u013a\6\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\2\23\1\u013b\24\23\2\0\3\23\1\u013b\27\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\3\23"+
    "\1\u013c\23\23\2\0\4\23\1\u013c\26\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\23\23\1\u013d"+
    "\3\23\2\0\25\23\1\u013d\5\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\12\23\1\u013e\14\23"+
    "\2\0\13\23\1\u013e\17\23\13\0\2\6\6\0\1\6"+
    "\1\0\3\23\5\0\1\6\10\23\1\u013f\16\23\2\0"+
    "\11\23\1\u013f\21\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\4\23\1\u0140\22\23\2\0\5\23"+
    "\1\u0140\25\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\14\23\1\u0141\12\23\2\0\15\23\1\u0141"+
    "\15\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\22\23\1\u0142\4\23\2\0\24\23\1\u0142\6\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\13\23\1\u0143\13\23\2\0\14\23\1\u0143\16\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\27\23"+
    "\2\0\22\23\1\u0144\10\23\75\0\1\u0145\14\0\1\u0146"+
    "\22\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\27\23\2\0\24\23\1\u0147\6\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\27\23\2\0\3\23"+
    "\1\u0148\27\23\70\0\1\u0149\157\0\1\353\1\0\3\u014a"+
    "\1\52\1\u014b\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\33\54\2\52\1\0\1\u014c"+
    "\2\0\3\143\1\52\1\144\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\4\54\1\u014d\22\54\1\52\1\65"+
    "\5\54\1\u014d\25\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\1\u0120\26\54\1\52\1\65\1\54\1\u0120\31\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\21\54\1\u014e"+
    "\5\54\1\52\1\65\33\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\21\54\1\u014f\5\54\1\52\1\65\23\54"+
    "\1\u014f\7\54\2\52\1\0\1\145\2\0\3\143\1\52"+
    "\1\144\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\15\54\1\u0122\11\54\1\52\1\65\16\54\1\u0122\14\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\22\54\1\372\10\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\2\54\1\u0150\30\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\16\54\1\u0151\14\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\11\54\1\262\21\54"+
    "\2\52\1\0\1\145\2\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\6\54\1\u0152\24\54\2\52\1\0\1\145\2\0"+
    "\3\u012b\1\52\1\u012c\53\52\1\65\35\52\1\0\1\u012d"+
    "\123\0\1\u0153\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\27\54\1\52\1\65\22\54"+
    "\1\u0154\10\54\2\52\1\0\1\145\2\0\3\u0155\1\52"+
    "\1\u0156\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\27\54\1\52\1\65\33\54\2\52\1\0\1\u0157\122\0"+
    "\1\u0100\121\0\1\u0103\1\0\3\143\1\52\1\144\1\52"+
    "\1\54\5\52\1\54\2\52\3\54\6\52\27\54\1\52"+
    "\1\65\22\54\1\302\10\54\2\52\1\0\1\145\2\0"+
    "\3\u0133\1\52\1\u0134\53\52\1\65\35\52\1\0\1\u0135"+
    "\123\0\1\u0158\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\27\54\1\52\1\65\27\54"+
    "\1\302\3\54\2\52\1\0\1\145\2\0\14\u0109\1\u0159"+
    "\101\u0109\11\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\16\23\1\u015a\10\23\2\0\17\23\1\u015a\13\23"+
    "\13\0\2\6\6\0\1\6\1\0\3\23\5\0\1\6"+
    "\22\23\1\u015b\4\23\2\0\24\23\1\u015b\6\23\13\0"+
    "\2\6\6\0\1\6\1\0\3\23\5\0\1\6\16\23"+
    "\1\u015c\10\23\2\0\17\23\1\u015c\13\23\13\0\2\6"+
    "\6\0\1\6\1\0\3\23\5\0\1\6\2\23\1\u015d"+
    "\24\23\2\0\3\23\1\u015d\27\23\13\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\1\u015e\26\23\2\0"+
    "\1\23\1\u015e\31\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\4\23\1\u015f\22\23\2\0\5\23"+
    "\1\u015f\25\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\27\23\2\0\17\23\1\u0160\13\23\70\0"+
    "\1\u0161\131\0\1\u0162\34\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\27\23\2\0\13\23\1\u0163\17\23"+
    "\103\0\1\u0164\24\0\3\u014a\1\52\1\u014b\53\52\1\65"+
    "\35\52\1\0\1\u014c\123\0\1\u0165\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\20\54"+
    "\1\u0120\6\54\1\52\1\65\22\54\1\u0120\10\54\2\52"+
    "\1\0\1\145\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\21\54\1\u0166\5\54"+
    "\1\52\1\65\33\54\2\52\1\0\1\145\2\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\4\54\1\u0167\22\54\1\52\1\65\5\54\1\u0167"+
    "\25\54\2\52\1\0\1\145\2\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\54\6\52\27\54"+
    "\1\52\1\65\17\54\1\u0168\13\54\2\52\1\0\1\145"+
    "\2\0\3\u0169\1\52\1\u016a\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\33\54\2\52"+
    "\1\0\1\u016b\2\0\3\143\1\52\1\144\1\52\1\54"+
    "\5\52\1\54\2\52\3\54\6\52\27\54\1\52\1\65"+
    "\31\54\1\372\1\54\2\52\1\0\1\145\122\0\1\u012c"+
    "\1\0\3\u016c\1\52\1\u016d\1\52\1\54\5\52\1\54"+
    "\2\52\3\54\6\52\27\54\1\52\1\65\33\54\2\52"+
    "\1\0\1\u016e\2\0\3\u0155\1\52\1\u0156\53\52\1\65"+
    "\35\52\1\0\1\u0157\123\0\1\u016f\120\0\1\u0134\1\0"+
    "\14\u0109\1\u0159\11\u0109\1\u0170\67\u0109\11\0\2\6\6\0"+
    "\1\6\1\0\3\23\5\0\1\6\15\23\1\u0171\11\23"+
    "\2\0\16\23\1\u0171\14\23\13\0\2\6\6\0\1\6"+
    "\1\0\3\23\5\0\1\6\15\23\1\u0172\11\23\2\0"+
    "\16\23\1\u0172\14\23\13\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\22\23\1\u0173\4\23\2\0\24\23"+
    "\1\u0173\6\23\13\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\20\23\1\u0174\6\23\2\0\22\23\1\u0174"+
    "\10\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\27\23\2\0\25\23\1\u0175\5\23\104\0\1\u0176"+
    "\136\0\1\u0177\100\0\1\u0178\147\0\1\u014b\1\0\3\143"+
    "\1\52\1\144\1\52\1\54\5\52\1\54\2\52\3\54"+
    "\6\52\27\54\1\52\1\65\1\u0179\32\54\2\52\1\0"+
    "\1\145\2\0\3\143\1\52\1\144\1\52\1\54\5\52"+
    "\1\54\2\52\3\54\6\52\20\54\1\u017a\6\54\1\52"+
    "\1\65\22\54\1\u017a\10\54\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\27\54\1\52\1\65\30\54\1\u017b\2\54"+
    "\2\52\1\0\1\145\2\0\3\u0169\1\52\1\u016a\53\52"+
    "\1\65\35\52\1\0\1\u016b\123\0\1\u017c\3\u016c\1\52"+
    "\1\u016d\53\52\1\65\35\52\1\0\1\u016e\123\0\1\u017d"+
    "\120\0\1\u0156\6\0\2\6\6\0\1\6\1\0\3\23"+
    "\5\0\1\6\4\23\1\u017e\22\23\2\0\5\23\1\u017e"+
    "\25\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\27\23\2\0\16\23\1\u017f\14\23\100\0\1\u0180"+
    "\115\0\1\u0181\123\0\1\u0182\31\0\3\143\1\52\1\144"+
    "\1\52\1\54\5\52\1\54\2\52\3\u0183\6\52\27\u0183"+
    "\1\52\1\65\1\54\32\u0183\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\10\54\1\u0184\16\54\1\52\1\65\11\54"+
    "\1\u0184\21\54\2\52\1\0\1\145\2\0\3\u0185\1\52"+
    "\1\u0186\1\52\1\54\5\52\1\54\2\52\3\54\6\52"+
    "\27\54\1\52\1\65\33\54\2\52\1\0\1\u0187\122\0"+
    "\1\u016a\121\0\1\u016d\6\0\2\6\6\0\1\6\1\0"+
    "\3\23\5\0\1\6\1\u0188\26\23\2\0\1\23\1\u0188"+
    "\31\23\13\0\2\6\6\0\1\6\1\0\3\23\5\0"+
    "\1\6\27\23\2\0\4\23\1\u0189\26\23\103\0\1\u018a"+
    "\123\0\1\u018b\22\0\3\u018c\1\52\1\144\1\52\1\54"+
    "\2\52\1\u018d\2\52\1\54\2\52\3\u0183\6\52\27\u0183"+
    "\1\52\1\65\1\54\32\u0183\2\52\1\0\1\145\2\0"+
    "\3\143\1\52\1\144\1\52\1\54\5\52\1\54\2\52"+
    "\3\54\6\52\5\54\1\u0120\21\54\1\52\1\65\6\54"+
    "\1\u0120\24\54\2\52\1\0\1\145\2\0\3\u0185\1\52"+
    "\1\u0186\53\52\1\65\35\52\1\0\1\u0187\123\0\1\u018e"+
    "\112\0\1\u018f\7\0\3\u018c\1\52\1\144\4\52\1\u018d"+
    "\46\52\1\65\35\52\1\0\1\145\2\0\3\u018d\1\52"+
    "\1\140\5\52\1\u0190\45\52\1\65\35\52\1\0\1\141"+
    "\122\0\1\u0186\1\0\3\u0190\1\52\1\u0191\53\52\1\65"+
    "\35\52\1\0\1\u0192\123\0\1\u0193\120\0\1\u0191\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27142];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\5\11\2\1\2\11\5\1\2\11"+
    "\14\1\2\11\1\1\2\0\1\11\35\0\1\1\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\20\1\1\0\1\1"+
    "\1\11\3\0\1\11\2\0\1\11\40\0\1\1\1\0"+
    "\30\1\3\0\1\11\2\0\1\11\41\0\1\1\1\0"+
    "\5\1\1\11\27\1\2\0\1\11\24\0\1\11\2\0"+
    "\1\11\4\0\1\1\1\0\20\1\1\0\2\1\1\0"+
    "\1\1\15\0\1\11\7\0\1\11\2\0\1\1\1\0"+
    "\14\1\2\0\2\1\2\0\1\11\12\0\1\11\3\0"+
    "\7\1\2\0\1\1\6\0\1\11\2\0\1\11\2\0"+
    "\6\1\10\0\2\1\1\0\1\11\4\0\1\11\1\0"+
    "\2\1\1\0\1\11\3\0\1\11\1\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //Creamos un listado de llos errores lexicos
    ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

    //Funciones
    //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
    private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
        //creamos un  token auxiliar
        Token tokenAux = new Token(tipoToken, lexema, fila, columna);
        System.out.println("Fila: "+fila+" Columa: "+columna+" Token: "+tipoToken+ " Lexema: "+lexema);
        //retornamos el token aux como simbolo
        return new Symbol(tipo, tokenAux);
    }
    
    //Agregamos un token al array list de errores lexicos
    private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
        //creamos un  token auxiliar
        TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
        //Agregamos al listado
        listadoErroresLexicos.add(tokenErrorAux);
    }

    //Obtenemos el arrLust de los errores lexicos
    public ArrayList<TokenError> obtenerListadoErroresLexicos(){
        return listadoErroresLexicos;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGCICInsert(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addErrorLexico ("LEXICO", yytext(), "Token no valido",yyline + 1, yycolumn + 1);
            }
            // fall through
          case 76: break;
          case 2:
            { /*                                                                                     */
            }
            // fall through
          case 77: break;
          case 3:
            { return retornarSimbolo(ALL_CHARACTERS  , "ALL_CHARACTERS", yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 78: break;
          case 4:
            { return retornarSimbolo(PERCENT     , "PERCENT"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 79: break;
          case 5:
            { return retornarSimbolo(PAREN_INI   , "PAREN_INI"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 80: break;
          case 6:
            { return retornarSimbolo(PAREN_FIN   , "PAREN_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 81: break;
          case 7:
            { return retornarSimbolo(COMA        , "COMA"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 82: break;
          case 8:
            { return retornarSimbolo(SIGNO_DIV   , "SIGNO_DIV"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 83: break;
          case 9:
            { return retornarSimbolo(INTEGER_VALUE   , "INTEGER_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 84: break;
          case 10:
            { return retornarSimbolo(DOS_PUNTOS  , "DOS_PUNTOS"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 85: break;
          case 11:
            { return retornarSimbolo(PUNTO_COMA  , "PUNTO_COMA"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 86: break;
          case 12:
            { return retornarSimbolo(MENOR       , "MENOR"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 87: break;
          case 13:
            { return retornarSimbolo(IGUAL       , "IGUAL"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 88: break;
          case 14:
            { return retornarSimbolo(MAYOR       , "MAYOR"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 89: break;
          case 15:
            { return retornarSimbolo(ID_VALUE        , "ID_VALUE"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 90: break;
          case 16:
            { return retornarSimbolo(CORCH_INI   , "CORCH_INI"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 91: break;
          case 17:
            { return retornarSimbolo(CORCH_FIN   , "CORCH_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 92: break;
          case 18:
            { return retornarSimbolo(LLAVE_INI   , "LLAVE_INI"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 93: break;
          case 19:
            { return retornarSimbolo(LLAVE_FIN   , "LLAVE_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 94: break;
          case 20:
            { return retornarSimbolo(NO_IGUAL    , "NO_IGUAL"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 95: break;
          case 21:
            { return retornarSimbolo(MENOR_IGUAL , "MENOR_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 96: break;
          case 22:
            { return retornarSimbolo(IGUAL_IGUAL , "IGUAL_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 97: break;
          case 23:
            { return retornarSimbolo(MAYOR_IGUAL , "MAYOR_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 98: break;
          case 24:
            { return retornarSimbolo(ID          , "ID"          , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 99: break;
          case 25:
            { System.out.println("Fila: "+ (yyline + 1) +" Columa: "+ (yycolumn + 1) +" Token: "+"COMENTARIO DE LINEA"+ " Lexema: "+yytext());
            }
            // fall through
          case 100: break;
          case 26:
            { return retornarSimbolo(TEXT_VALUE          , "TEXT_VALUE"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 101: break;
          case 27:
            { return retornarSimbolo(ID_VALUE_STR  , "ID_VALUE_STR"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 102: break;
          case 28:
            { return retornarSimbolo(DIGIT_VALUE , "DIGIT_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 103: break;
          case 29:
            { return retornarSimbolo(DECIMAL_VALUE   , "DECIMAL_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 104: break;
          case 30:
            { return retornarSimbolo(C_P         , "C_P"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 105: break;
          case 31:
            { return retornarSimbolo(ALT         , "ALT"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 106: break;
          case 32:
            { return retornarSimbolo(SRC         , "SRC"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 107: break;
          case 33:
            { return retornarSimbolo(COLOR_HEX   , "COLOR_HEX"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 108: break;
          case 34:
            { return retornarSimbolo(PERCE_VALUE , "PERCE_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 109: break;
          case 35:
            { return retornarSimbolo(C_BR        , "C_BR"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 110: break;
          case 36:
            { return retornarSimbolo(C_H1        , "C_H1"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 111: break;
          case 37:
            { return retornarSimbolo(COLS        , "COLS"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 112: break;
          case 38:
            { return retornarSimbolo(HREF        , "HREF"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 113: break;
          case 39:
            { return retornarSimbolo(NAME        , "NAME"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 114: break;
          case 40:
            { return retornarSimbolo(ROWS        , "ROWS"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 115: break;
          case 41:
            { return retornarSimbolo(TYPE        , "TYPE"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 116: break;
          case 42:
            { return retornarSimbolo(PIXEL_VALUE , "PIXEL_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 117: break;
          case 43:
            { return retornarSimbolo(COLOR_VALUE , "COLOR_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 118: break;
          case 44:
            { return retornarSimbolo(ROW         , "ROW"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 119: break;
          case 45:
            { return retornarSimbolo(C_DIV       , "C_DIV"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 120: break;
          case 46:
            { return retornarSimbolo(C_IMG       , "C_IMG"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 121: break;
          case 47:
            { return retornarSimbolo(CLASS       , "CLASS"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 122: break;
          case 48:
            { return retornarSimbolo(COLOR       , "COLOR"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 123: break;
          case 49:
            { return retornarSimbolo(WIDTH       , "WIDTH"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 124: break;
          case 50:
            { return retornarSimbolo(ALIGN_VALUE , "ALIGN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 125: break;
          case 51:
            { return retornarSimbolo(TEXT        , "TEXT"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 126: break;
          case 52:
            { return retornarSimbolo(C_BODY      , "C_BODY"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 127: break;
          case 53:
            { return retornarSimbolo(C_GCIC      , "C_GCIC"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 128: break;
          case 54:
            { return retornarSimbolo(C_HEAD      , "C_HEAD"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 129: break;
          case 55:
            { return retornarSimbolo(C_LINK      , "C_LINK"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 130: break;
          case 56:
            { return retornarSimbolo(C_SPAM      , "C_SPAM"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 131: break;
          case 57:
            { return retornarSimbolo(HEIGHT      , "HEIGHT"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 132: break;
          case 58:
            { return retornarSimbolo(FONT_VALUE  , "FONT_VALUE"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 133: break;
          case 59:
            { return retornarSimbolo(RADIO       , "RADIO"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 134: break;
          case 60:
            { return retornarSimbolo(C_INPUT     , "C_INPUT"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 135: break;
          case 61:
            { return retornarSimbolo(C_TITLE     , "C_TITLE"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 136: break;
          case 62:
            { return retornarSimbolo(ONCLICK     , "ONCLICK"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 137: break;
          case 63:
            { return retornarSimbolo(COLUMN      , "COLUMN"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 138: break;
          case 64:
            { return retornarSimbolo(NUMBER      , "NUMBER"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 139: break;
          case 65:
            { System.out.println("Fila: "+ (yyline + 1) +" Columa: "+ (yycolumn + 1) +" Token: "+"COMENTARIO DE BLOQUE"+ " Lexema: "+yytext());
            }
            // fall through
          case 140: break;
          case 66:
            { return retornarSimbolo(C_BUTTON    , "C_BUTTON"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 141: break;
          case 67:
            { return retornarSimbolo(C_OPTION    , "C_OPTION"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 142: break;
          case 68:
            { return retornarSimbolo(C_SELECT    , "C_SELECT"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 143: break;
          case 69:
            { return retornarSimbolo(FONT_SIZE   , "FONT_SIZE"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 144: break;
          case 70:
            { return retornarSimbolo(CHECKBOX    , "CHECKBOX"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 145: break;
          case 71:
            { return retornarSimbolo(C_TEXTAREA  , "C_TEXTAREA"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 146: break;
          case 72:
            { return retornarSimbolo(BACKGROUND  , "BACKGROUND"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 147: break;
          case 73:
            { return retornarSimbolo(TEXT_ALIGN  , "TEXT_ALIGN"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 148: break;
          case 74:
            { return retornarSimbolo(FONT_FAMILY , "FONT_FAMILY" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 149: break;
          case 75:
            { return retornarSimbolo(PROCESS_VAL , "PROCESS_VAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerGCICInsert [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerGCICInsert scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerGCICInsert(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
