// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex_gcic.jflex

/*Primera seccion, librerias */
package gramatica_gcic;
import java_cup.runtime.*;
import static gramatica_gcic.sym.*;
import clasesDAO.Token;
import clasesDAO.TokenError;
import java.util.ArrayList;

/*Segunda seccion, config*/

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerGCIC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\1\u0500\335\u0300\1\u0600"+
    "\u1000\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\3\1\1\0\2\1\22\0\1\2\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\10\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\45"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\45\1\64\1\32\1\65\1\32\1\66\1\32\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\32\143\124\1\125\160\124"+
    "\1\126\u0188\124\1\127\u01cf\124\1\130\165\124\1\127\u01da\124"+
    "\1\126\2\124";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\4\16\23\1\24"+
    "\1\25\16\23\1\26\1\1\1\27\1\1\2\0\1\30"+
    "\36\0\1\31\6\0\1\4\2\0\1\32\1\0\1\33"+
    "\1\0\1\34\1\4\11\23\1\35\24\23\1\36\12\23"+
    "\1\0\1\37\1\0\1\40\1\41\3\0\1\42\2\0"+
    "\1\43\40\0\1\44\1\0\1\45\2\0\1\46\1\0"+
    "\1\47\1\0\1\4\1\23\1\50\10\23\1\51\4\23"+
    "\1\52\14\23\1\53\17\23\1\54\5\23\4\0\1\55"+
    "\2\0\1\56\44\0\1\47\1\0\1\4\3\23\1\57"+
    "\3\23\2\60\12\23\1\61\1\62\1\63\1\23\1\64"+
    "\10\23\1\65\3\23\1\66\2\23\1\67\4\23\1\70"+
    "\1\23\1\71\1\23\1\72\2\23\1\73\1\74\1\23"+
    "\2\0\1\75\24\0\1\76\2\0\1\77\4\0\1\47"+
    "\1\0\1\4\4\23\1\100\2\23\1\101\10\23\1\0"+
    "\13\23\1\102\2\23\1\103\1\104\1\23\1\0\5\23"+
    "\1\0\1\105\15\0\1\106\7\0\1\107\2\0\1\47"+
    "\1\0\1\4\2\23\1\110\1\23\1\111\1\112\1\23"+
    "\1\113\3\23\1\114\2\23\1\0\1\115\1\116\1\117"+
    "\5\23\1\120\5\23\2\0\1\23\1\121\2\23\1\122"+
    "\2\0\1\123\12\0\1\124\3\0\1\125\3\23\1\126"+
    "\4\23\1\127\1\115\3\23\1\130\1\23\1\131\2\23"+
    "\1\132\1\133\2\0\1\23\1\134\1\135\6\0\1\136"+
    "\2\0\1\137\2\0\1\140\2\23\1\141\1\142\1\23"+
    "\1\143\7\23\2\0\1\23\6\0\7\23\1\144\1\145"+
    "\1\23\1\0\1\146\1\23\4\0\1\147\1\0\1\150"+
    "\2\23\1\151\1\23\1\152\1\23\1\153\1\0\1\23"+
    "\1\154\3\0\1\23\1\155\2\23\1\156\1\23\1\0"+
    "\1\23\1\157\2\23\1\160\1\0\1\23\1\161\1\162"+
    "\1\0\4\23\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\131\0\131\0\262\0\u010b\0\u0164\0\131\0\u01bd"+
    "\0\u0216\0\131\0\131\0\131\0\131\0\131\0\131\0\131"+
    "\0\u026f\0\u02c8\0\131\0\131\0\u0321\0\u037a\0\u03d3\0\u042c"+
    "\0\u0485\0\u04de\0\u0537\0\u0590\0\u05e9\0\u0642\0\u069b\0\u06f4"+
    "\0\u074d\0\u07a6\0\u07ff\0\u0858\0\u08b1\0\u090a\0\131\0\131"+
    "\0\u0963\0\u09bc\0\u0a15\0\u0a6e\0\u0ac7\0\u0b20\0\u0b79\0\u0bd2"+
    "\0\u0c2b\0\u0c84\0\u0cdd\0\u0d36\0\u0d8f\0\u0de8\0\131\0\u0e41"+
    "\0\131\0\u0e9a\0\u0ef3\0\u0f4c\0\131\0\u0fa5\0\u0ffe\0\u1057"+
    "\0\u10b0\0\u1109\0\u1162\0\u11bb\0\u1214\0\u126d\0\u12c6\0\u131f"+
    "\0\u1378\0\u13d1\0\u142a\0\u1483\0\u14dc\0\u1535\0\u158e\0\u15e7"+
    "\0\u1640\0\u1699\0\u16f2\0\u174b\0\u17a4\0\u17fd\0\u1856\0\u18af"+
    "\0\u1908\0\u1961\0\u01bd\0\131\0\u19ba\0\u1a13\0\u1a6c\0\u1ac5"+
    "\0\u1b1e\0\u1b77\0\u1bd0\0\u1c29\0\u1c82\0\131\0\u037a\0\131"+
    "\0\u03d3\0\131\0\u1cdb\0\u1d34\0\u1d8d\0\u1de6\0\u1e3f\0\u1e98"+
    "\0\u1ef1\0\u1f4a\0\u1fa3\0\u1ffc\0\u04de\0\u2055\0\u20ae\0\u2107"+
    "\0\u2160\0\u21b9\0\u2212\0\u226b\0\u22c4\0\u231d\0\u2376\0\u23cf"+
    "\0\u2428\0\u2481\0\u24da\0\u2533\0\u258c\0\u25e5\0\u263e\0\u2697"+
    "\0\u26f0\0\u04de\0\u2749\0\u27a2\0\u27fb\0\u2854\0\u28ad\0\u2906"+
    "\0\u295f\0\u29b8\0\u2a11\0\u2a6a\0\u0e41\0\131\0\u2ac3\0\u0f4c"+
    "\0\131\0\u2b1c\0\u2b75\0\u2bce\0\131\0\u2c27\0\u2c80\0\131"+
    "\0\u2cd9\0\u2d32\0\u2d8b\0\u2de4\0\u2e3d\0\u2e96\0\u2eef\0\u2f48"+
    "\0\u2fa1\0\u2ffa\0\u3053\0\u30ac\0\u3105\0\u315e\0\u31b7\0\u3210"+
    "\0\u3269\0\u32c2\0\u331b\0\u3374\0\u33cd\0\u3426\0\u347f\0\u34d8"+
    "\0\u3531\0\u358a\0\u35e3\0\u363c\0\u3695\0\u36ee\0\u3747\0\u37a0"+
    "\0\131\0\u37f9\0\131\0\u3852\0\u38ab\0\131\0\u3904\0\u395d"+
    "\0\u39b6\0\u3a0f\0\u3a68\0\u04de\0\u3ac1\0\u3b1a\0\u3b73\0\u3bcc"+
    "\0\u3c25\0\u3c7e\0\u3cd7\0\u3d30\0\u04de\0\u3d89\0\u3de2\0\u3e3b"+
    "\0\u3e94\0\u04de\0\u3eed\0\u3f46\0\u3f9f\0\u3ff8\0\u4051\0\u40aa"+
    "\0\u4103\0\u415c\0\u41b5\0\u420e\0\u4267\0\u42c0\0\u04de\0\u4319"+
    "\0\u4372\0\u43cb\0\u4424\0\u447d\0\u44d6\0\u452f\0\u4588\0\u45e1"+
    "\0\u463a\0\u4693\0\u46ec\0\u4745\0\u479e\0\u47f7\0\u04de\0\u4850"+
    "\0\u48a9\0\u4902\0\u495b\0\u49b4\0\u010b\0\u0216\0\u4a0d\0\u4a66"+
    "\0\131\0\u4abf\0\u4b18\0\131\0\u4b71\0\u4bca\0\u4c23\0\u4c7c"+
    "\0\u4cd5\0\u4d2e\0\u4d87\0\u4de0\0\u4e39\0\u4e92\0\u4eeb\0\u4f44"+
    "\0\u4f9d\0\u4ff6\0\u504f\0\u50a8\0\u5101\0\u515a\0\u51b3\0\u520c"+
    "\0\u5265\0\u52be\0\u5317\0\u5370\0\u53c9\0\u5422\0\u547b\0\u54d4"+
    "\0\u552d\0\u5586\0\u55df\0\u5638\0\u5691\0\u56ea\0\u5743\0\u579c"+
    "\0\u57f5\0\u584e\0\u58a7\0\u5900\0\u5959\0\u59b2\0\u04de\0\u5a0b"+
    "\0\u5a64\0\u5abd\0\131\0\u04de\0\u5b16\0\u5b6f\0\u5bc8\0\u5c21"+
    "\0\u5c7a\0\u5cd3\0\u5d2c\0\u5d85\0\u5dde\0\u5e37\0\u04de\0\u5e90"+
    "\0\u04de\0\u5ee9\0\u04de\0\u5f42\0\u5f9b\0\u5ff4\0\u604d\0\u60a6"+
    "\0\u60ff\0\u6158\0\u61b1\0\u620a\0\u6263\0\u62bc\0\u6315\0\u04de"+
    "\0\u636e\0\u63c7\0\u04de\0\u6420\0\u6479\0\u64d2\0\u652b\0\u04de"+
    "\0\u6584\0\u04de\0\u65dd\0\u04de\0\u6636\0\u668f\0\u04de\0\u04de"+
    "\0\u66e8\0\u6741\0\u679a\0\131\0\u67f3\0\u684c\0\u68a5\0\u68fe"+
    "\0\u6957\0\u69b0\0\u6a09\0\u6a62\0\u6abb\0\u6b14\0\u6b6d\0\u6bc6"+
    "\0\u6c1f\0\u6c78\0\u6cd1\0\u6d2a\0\u6d83\0\u6ddc\0\u6e35\0\u6e8e"+
    "\0\131\0\u6ee7\0\u6f40\0\131\0\u6f99\0\u6ff2\0\u704b\0\u70a4"+
    "\0\u70fd\0\u7156\0\u71af\0\u7208\0\u7261\0\u72ba\0\u7313\0\u04de"+
    "\0\u736c\0\u73c5\0\u04de\0\u741e\0\u7477\0\u74d0\0\u7529\0\u7582"+
    "\0\u75db\0\u7634\0\u768d\0\u76e6\0\u773f\0\u7798\0\u77f1\0\u784a"+
    "\0\u78a3\0\u78fc\0\u7955\0\u79ae\0\u7a07\0\u7a60\0\u7ab9\0\u04de"+
    "\0\u7b12\0\u7b6b\0\u04de\0\u04de\0\u7bc4\0\u7c1d\0\u7c76\0\u7ccf"+
    "\0\u7d28\0\u7d81\0\u7dda\0\u7e33\0\u04de\0\u7e8c\0\u7ee5\0\u7f3e"+
    "\0\u7f97\0\u7ff0\0\u8049\0\u80a2\0\u80fb\0\u8154\0\u81ad\0\u8206"+
    "\0\u825f\0\u82b8\0\131\0\u8311\0\u836a\0\u83c3\0\u841c\0\u8475"+
    "\0\u84ce\0\u8527\0\131\0\u8580\0\u85d9\0\u0164\0\u8632\0\u868b"+
    "\0\u86e4\0\u873d\0\u04de\0\u8796\0\u04de\0\u04de\0\u87ef\0\u04de"+
    "\0\u8848\0\u88a1\0\u88fa\0\u04de\0\u8953\0\u89ac\0\u8a05\0\u04de"+
    "\0\u04de\0\u04de\0\u8a5e\0\u8ab7\0\u8b10\0\u8b69\0\u8bc2\0\u04de"+
    "\0\u8c1b\0\u8c74\0\u8ccd\0\u8d26\0\u8d7f\0\u8dd8\0\u8e31\0\u8e8a"+
    "\0\u04de\0\u8ee3\0\u8f3c\0\u04de\0\u8f95\0\u8fee\0\131\0\u9047"+
    "\0\u90a0\0\u90f9\0\u9152\0\u91ab\0\u9204\0\u925d\0\u92b6\0\u930f"+
    "\0\u9368\0\131\0\u93c1\0\u941a\0\u9473\0\u0164\0\u94cc\0\u9525"+
    "\0\u957e\0\u04de\0\u95d7\0\u9630\0\u9689\0\u96e2\0\u04de\0\131"+
    "\0\u973b\0\u9794\0\u97ed\0\u04de\0\u9846\0\u04de\0\u989f\0\u98f8"+
    "\0\u04de\0\u04de\0\u9951\0\u99aa\0\u9a03\0\u04de\0\u04de\0\u9a5c"+
    "\0\u9ab5\0\u9b0e\0\u9b67\0\u9bc0\0\u9c19\0\131\0\u9c72\0\u9ccb"+
    "\0\131\0\u9d24\0\u9d7d\0\u7156\0\u9dd6\0\u9e2f\0\u04de\0\u04de"+
    "\0\u9e88\0\u04de\0\u9ee1\0\u9f3a\0\u9f93\0\u9fec\0\ua045\0\ua09e"+
    "\0\ua0f7\0\ua150\0\ua1a9\0\ua202\0\ua25b\0\ua2b4\0\ua30d\0\ua366"+
    "\0\ua3bf\0\ua418\0\ua471\0\ua4ca\0\ua523\0\ua57c\0\ua5d5\0\ua62e"+
    "\0\ua687\0\ua045\0\u04de\0\ua6e0\0\ua739\0\131\0\ua792\0\ua7eb"+
    "\0\ua844\0\ua89d\0\ua8f6\0\131\0\ua94f\0\u04de\0\ua9a8\0\uaa01"+
    "\0\u04de\0\uaa5a\0\u04de\0\uaab3\0\u04de\0\uab0c\0\uab65\0\131"+
    "\0\uabbe\0\uac17\0\uac70\0\uacc9\0\u04de\0\uad22\0\uad7b\0\131"+
    "\0\uadd4\0\uae2d\0\uae86\0\u04de\0\uaedf\0\uaf38\0\131\0\uaf91"+
    "\0\uafea\0\u04de\0\u04de\0\ub043\0\ub09c\0\ub0f5\0\ub14e\0\ub1a7"+
    "\0\u04de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\6\1\20"+
    "\1\21\2\22\1\23\1\24\1\25\1\26\1\27\1\6"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\32\1\36"+
    "\1\37\2\32\1\40\1\32\1\41\1\42\1\43\1\44"+
    "\1\32\1\45\2\32\1\46\2\32\1\47\1\50\1\32"+
    "\1\51\1\52\1\53\1\54\1\32\1\55\1\56\1\57"+
    "\1\60\4\32\1\61\1\62\2\32\1\63\1\64\1\65"+
    "\2\32\1\66\3\32\1\67\1\70\1\71\1\2\1\72"+
    "\3\2\131\0\3\73\1\74\24\0\1\75\100\0\3\76"+
    "\1\77\1\0\1\100\1\101\10\77\1\101\2\77\1\102"+
    "\2\103\7\77\1\104\1\101\1\105\3\101\1\106\10\101"+
    "\1\107\1\101\1\110\2\101\1\111\3\101\1\77\1\112"+
    "\1\101\1\113\1\114\1\115\2\101\1\116\1\117\2\101"+
    "\1\120\1\101\1\121\1\122\1\123\1\124\1\125\1\101"+
    "\1\126\1\127\1\130\1\101\1\111\1\131\1\101\1\132"+
    "\1\101\3\77\12\0\2\6\11\0\1\6\1\0\3\6"+
    "\5\0\32\6\2\0\33\6\10\0\3\133\5\0\1\134"+
    "\120\0\2\135\1\136\3\137\1\140\2\137\1\141\4\137"+
    "\1\142\1\140\14\137\30\140\2\137\33\140\3\137\12\0"+
    "\2\6\11\0\1\143\1\0\3\6\5\0\32\6\2\0"+
    "\33\6\15\0\2\6\11\0\1\143\1\0\3\22\5\0"+
    "\32\6\2\0\33\6\10\0\3\144\1\145\24\0\1\146"+
    "\100\0\3\147\25\0\1\150\100\0\3\151\25\0\1\152"+
    "\105\0\2\6\11\0\1\6\1\0\3\6\5\0\32\6"+
    "\2\0\7\6\1\153\23\6\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\13\32\1\154\5\32\1\155"+
    "\6\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\1\156\27\32"+
    "\2\0\1\157\32\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\4\32\1\160\23\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\13\32\1\161\1\32\1\162\10\32\1\163\1\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\23\32\1\164\4\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\5\32\1\165"+
    "\7\32\1\166\12\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\4\32\1\167\23\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\23\32\1\170\4\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\15\32"+
    "\1\171\12\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\20\32\1\172\7\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\4\32\1\173\23\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\7\32\1\174"+
    "\20\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\7\32\1\175\20\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\14\32\1\176\16\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\1\32"+
    "\1\177\15\32\1\200\13\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\1\157\7\32"+
    "\1\201\3\32\1\202\2\32\1\203\13\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\5\32\1\204\25\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\1\32\1\205\15\32"+
    "\1\206\13\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\5\32\1\207\25\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\5\32\1\210\14\32\1\211\10\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\4\32\1\212\11\32\1\213\14\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\1\32"+
    "\1\214\31\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\16\32\1\215\14\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\17\32\1\216\13\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\22\32\1\217"+
    "\1\32\1\220\6\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\5\32\1\221\14\32"+
    "\1\222\6\32\1\223\1\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\11\32\1\224"+
    "\21\32\10\0\3\225\117\0\1\226\136\0\1\227\3\73"+
    "\25\0\1\75\102\0\122\230\5\0\3\76\1\77\1\231"+
    "\1\100\1\101\10\77\1\101\2\77\1\102\2\103\7\77"+
    "\1\104\1\101\1\105\3\101\1\106\10\101\1\107\1\101"+
    "\1\110\2\101\1\111\3\101\1\77\1\112\1\101\1\113"+
    "\1\114\1\115\2\101\1\116\1\117\2\101\1\120\1\101"+
    "\1\121\1\122\1\123\1\124\1\125\1\101\1\126\1\127"+
    "\1\130\1\101\1\111\1\131\1\101\1\132\1\101\3\77"+
    "\1\0\1\232\3\0\4\77\1\231\60\77\1\112\36\77"+
    "\1\0\1\232\3\0\4\77\1\231\15\77\3\233\7\77"+
    "\30\233\1\77\1\112\1\77\32\233\3\77\1\0\1\232"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\30\101\1\77\1\112\33\101\3\77"+
    "\1\0\1\236\3\0\3\237\1\77\1\240\2\77\1\241"+
    "\12\77\3\103\40\77\1\112\20\77\1\242\7\77\1\100"+
    "\5\77\1\0\1\243\3\0\3\237\1\77\1\240\2\77"+
    "\1\241\12\77\3\103\40\77\1\112\20\77\1\242\15\77"+
    "\1\0\1\243\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\20\101\1\244\7\101"+
    "\1\77\1\112\22\101\1\244\10\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\16\101\1\245\11\101\1\77\1\112"+
    "\17\101\1\245\13\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\4\101\1\246\23\101\1\77\1\112\5\101\1\246"+
    "\25\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\20\101"+
    "\1\247\7\101\1\77\1\112\33\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\1\250\27\101\1\77\1\112\1\101"+
    "\1\250\31\101\3\77\1\0\1\236\3\0\3\234\1\77"+
    "\1\235\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\4\101\1\251\23\101\1\77\1\112\5\101\1\251\25\101"+
    "\3\77\1\0\1\236\3\0\3\112\31\0\30\77\3\0"+
    "\32\77\10\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\20\101\1\244\7\101\1\77"+
    "\1\112\21\101\1\252\1\244\10\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\30\101\1\77\1\112\14\101\1\253"+
    "\16\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\16\101"+
    "\1\245\11\101\1\77\1\112\5\101\1\254\2\101\1\255"+
    "\6\101\1\256\13\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\25\101\1\257\5\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\4\101\1\246\23\101"+
    "\1\77\1\112\5\101\1\246\14\101\1\260\10\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\25\101\1\261\5\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\5\101\1\262\3\101\1\263"+
    "\21\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\30\101"+
    "\1\77\1\112\1\101\1\264\31\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\30\101\1\77\1\112\1\101\1\265"+
    "\23\101\1\266\5\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\14\101\1\267\16\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\25\101\1\270\5\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\1\101\1\271\3\101\1\272"+
    "\3\101\1\273\5\101\1\274\13\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\1\250\27\101\1\77\1\112\1\101"+
    "\1\250\7\101\1\275\21\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\5\101\1\276\25\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\10\101\1\277\22\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\5\101\1\300\25\101"+
    "\3\77\1\0\1\236\3\0\3\135\3\142\1\140\2\142"+
    "\1\301\5\142\1\140\14\142\30\140\2\142\33\140\3\142"+
    "\1\0\1\302\3\0\3\135\3\142\1\140\2\142\1\303"+
    "\5\142\1\140\14\142\30\140\2\142\33\140\3\142\1\0"+
    "\1\304\3\0\11\142\1\303\112\142\1\0\1\304\3\0"+
    "\3\305\3\142\1\140\2\142\1\306\5\142\1\140\2\142"+
    "\3\140\7\142\30\140\2\142\33\140\3\142\1\0\1\307"+
    "\14\0\1\303\113\0\1\304\3\0\11\142\1\301\112\142"+
    "\1\0\1\302\10\0\2\6\11\0\1\6\1\0\3\310"+
    "\5\0\32\6\2\0\33\6\10\0\3\144\25\0\1\146"+
    "\117\0\1\311\116\0\2\6\11\0\1\6\1\0\3\6"+
    "\5\0\32\6\2\0\14\6\1\312\16\6\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\4\32\1\313"+
    "\23\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\2\32\1\314\25\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\20\32\1\315\7\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\1\32\1\316\1\32"+
    "\1\317\2\32\1\320\1\321\1\322\2\32\1\323\2\32"+
    "\1\324\1\325\1\32\1\326\1\327\5\32\2\0\2\32"+
    "\1\316\1\32\1\317\2\32\1\320\1\321\1\322\2\32"+
    "\1\323\2\32\1\324\1\325\2\32\1\326\1\327\6\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\21\32\1\330\6\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\21\32\1\331\6\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\3\32\1\332\24\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\10\32"+
    "\1\333\17\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\15\32\1\334\12\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\10\32\1\335\10\32\1\336\6\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\22\32\1\337\5\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\14\32\1\340\13\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\1\341\32\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\16\32\1\342"+
    "\11\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\17\32\1\343\4\32\1\344\3\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\4\32\1\345\23\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\10\32"+
    "\1\346\17\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\24\32\1\347"+
    "\6\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\30\32\2\0\3\32\1\350\27\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\17\32\1\351\13\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\1\32\1\352\31\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\1\32\1\353\31\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\14\32"+
    "\1\354\16\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\3\32\1\355\27\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\14\32\1\356\16\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\16\32\1\357"+
    "\14\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\30\32\2\0\24\32\1\360\6\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\11\32\1\361\21\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\5\32\1\362\25\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\24\32\1\363\6\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\15\32"+
    "\1\364\15\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\3\32\1\365\27\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\27\32\1\366\3\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\3\32\1\367"+
    "\27\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\30\32\2\0\22\32\1\370\10\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\30\32\1\371\2\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\25\32\1\372\5\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\20\32\1\373\12\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\4\32"+
    "\1\374\26\32\136\0\1\375\1\376\131\0\1\377\3\u0100"+
    "\1\77\1\u0101\15\77\3\233\7\77\30\233\1\77\1\112"+
    "\1\77\32\233\3\77\1\0\1\u0102\3\0\3\234\1\77"+
    "\1\235\60\77\1\112\36\77\1\0\1\236\133\0\1\u0103"+
    "\3\237\1\77\1\240\2\77\1\241\55\77\1\112\20\77"+
    "\1\242\15\77\1\0\1\243\3\0\3\241\1\77\1\u0104"+
    "\60\77\1\112\36\77\1\0\1\u0105\3\0\4\77\1\231"+
    "\60\77\1\112\30\77\1\u0106\5\77\1\0\1\232\133\0"+
    "\1\u0107\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\10\101\1\u0108\17\101\1\77\1\112"+
    "\11\101\1\u0108\21\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\23\101\1\u0109\4\101\1\77\1\112\25\101\1\u0109"+
    "\5\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\15\101"+
    "\1\u010a\12\101\1\77\1\112\16\101\1\u010a\14\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\16\101\1\u010b\11\101"+
    "\1\77\1\112\33\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\15\101\1\u010c\12\101\1\77\1\112\16\101\1\u010c"+
    "\14\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\20\101"+
    "\1\u010d\7\101\1\77\1\112\22\101\1\u010d\10\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\25\101\1\u010e\5\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\1\101\1\u010f\23\101\1\u0110"+
    "\5\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\30\101"+
    "\1\77\1\112\16\101\1\u0111\14\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\30\101\1\77\1\112\5\101\1\u0112"+
    "\25\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\23\101"+
    "\1\u0109\4\101\1\77\1\112\14\101\1\u0113\10\101\1\u0109"+
    "\5\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\30\101"+
    "\1\77\1\112\3\101\1\u0114\27\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\30\101\1\77\1\112\1\101\1\u0115"+
    "\3\101\1\u0116\25\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\23\101\1\u0117\7\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\6\101\1\u0118\24\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\15\101\1\u0110\15\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\22\101\1\u0119\10\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\26\101\1\u0115\4\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\15\101\1\u011a\15\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\11\101\1\u011b\21\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\22\101\1\u011c\10\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\4\101\1\u011d\26\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\4\101\1\u011e\26\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\7\101\1\u011f\23\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\27\101\1\u0120\3\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\14\101\1\u0121\16\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\1\101\1\u0122\26\101\1\u0123\2\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\30\101\1\77\1\112\11\101\1\u0124"+
    "\21\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\30\101"+
    "\1\77\1\112\14\101\1\u0125\16\101\3\77\1\0\1\236"+
    "\133\0\1\u0126\130\0\1\u0127\3\305\6\142\1\306\112\142"+
    "\1\0\1\307\133\0\1\u0128\5\0\2\6\11\0\1\6"+
    "\1\0\3\u0129\5\0\32\6\2\0\33\6\27\0\1\u012a"+
    "\116\0\2\6\11\0\1\6\1\0\3\6\5\0\32\6"+
    "\2\0\17\6\1\u012b\13\6\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\20\32\1\u012c\7\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\1\u012d\27\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\16\32\1\u012e\1\32"+
    "\1\u012f\2\32\1\u0130\4\32\2\0\17\32\1\u012e\2\32"+
    "\1\u012f\2\32\1\u0130\5\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\10\32\1\u0131\17\32\2\0"+
    "\11\32\1\u0131\21\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\2\32\1\u0132\25\32\2\0\3\32"+
    "\1\u0132\27\32\12\0\1\u0133\2\0\2\6\11\0\1\6"+
    "\1\0\1\32\1\u0134\1\32\5\0\2\6\4\32\1\u0135"+
    "\23\32\2\0\5\32\1\u0135\25\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\14\32\1\u0136\1\u0137"+
    "\12\32\2\0\15\32\1\u0136\1\u0137\14\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\10\32\1\u0138"+
    "\17\32\2\0\11\32\1\u0138\21\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\17\32\1\u0139\10\32"+
    "\2\0\20\32\1\u0139\12\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\2\32\1\u013a\1\32\1\u013b"+
    "\12\32\1\u013c\10\32\2\0\3\32\1\u013a\1\32\1\u013b"+
    "\12\32\1\u013c\12\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\4\32\1\u013d\3\32\1\u013e\17\32"+
    "\2\0\5\32\1\u013d\3\32\1\u013e\21\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\2\32\1\u013f"+
    "\25\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\4\32\1\u0140\23\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\22\32\1\u0141\5\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\22\32\1\u0142\5\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\22\32\1\u0143\5\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\4\32"+
    "\1\u0144\23\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\10\32\1\u0145\6\32\1\u0146"+
    "\10\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\1\u0147\32\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\13\32"+
    "\1\u0148\14\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\2\32\1\u0149\25\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\4\32\1\u014a\23\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\4\32\1\u014b"+
    "\23\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\15\32\1\u014c\12\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\13\32\1\u014d\14\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\13\32"+
    "\1\u014e\17\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\14\32\1\u014f\16\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\22\32\1\u0150\10\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\23\32\1\u0151"+
    "\7\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\30\32\2\0\17\32\1\u0152\3\32\1\u0153\7\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\11\32\1\u0154\21\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\23\32"+
    "\1\372\7\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\24\32\1\u0155\6\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\4\32"+
    "\1\u0156\23\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\7\32\1\u0157"+
    "\23\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\30\32\2\0\6\32\1\u0158\24\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\5\32\1\u0159\25\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\5\32\1\u015a\25\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\14\32\1\u015b\16\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\23\32"+
    "\1\u015c\7\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\11\32\1\u015d\21\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\24\32\1\u015e\6\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\5\32\1\u015f"+
    "\25\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\30\32\2\0\5\32\1\u0160\25\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\24\32\1\u0161\6\32\136\0\1\231\2\0\3\u0100\1\77"+
    "\1\u0101\60\77\1\112\36\77\1\0\1\u0102\133\0\1\u0162"+
    "\126\0\1\235\132\0\1\u0163\3\u0106\1\77\1\u0164\60\77"+
    "\1\112\36\77\1\0\1\u0165\131\0\1\240\2\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\1\u0166\27\101\1\77\1\112\1\101\1\u0166\31\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\20\101\1\u0167"+
    "\7\101\1\77\1\112\22\101\1\u0167\10\101\3\77\1\0"+
    "\1\236\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\4\101\1\u0168\23\101\1\77"+
    "\1\112\5\101\1\u0168\25\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\2\101\1\u0169\25\101\1\77\1\112\33\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\21\101\1\u016a"+
    "\6\101\1\77\1\112\23\101\1\u016a\7\101\3\77\1\0"+
    "\1\236\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\3\101\1\u016b\24\101\1\77"+
    "\1\112\4\101\1\u016b\26\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\1\101\1\u011e\31\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\3\101\1\u016c\27\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\5\101\1\u011e\25\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\24\101\1\u016d\6\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\3\101\1\u016e\27\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\25\101\1\u016f\5\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\10\101\1\u0170\22\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\31\101\1\u011e\1\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\5\101\1\u0171\25\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\24\101\1\u0172\6\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\24\101\1\u0173\6\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\17\101\1\u0174\13\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\2\101\1\u0175\30\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\26\101\1\u0110\4\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\20\101\1\u0176\12\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\11\101\1\u0177\21\101\3\77\1\0\1\236\3\0"+
    "\3\u0178\1\77\1\u0179\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\33\101\3\77\1\0"+
    "\1\u017a\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\30\101\1\77\1\112\10\101"+
    "\1\u0118\22\101\3\77\1\0\1\236\3\0\3\u017b\1\77"+
    "\1\u017c\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\30\101\1\77\1\112\33\101\3\77\1\0\1\u017d\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\26\101\1\u017e\4\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\14\101\1\u011e\16\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\24\101\1\u017f\6\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\24\101\1\u0110\6\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\14\101\1\u0180\16\101"+
    "\3\77\1\0\1\236\132\0\1\301\130\0\1\303\130\0"+
    "\1\306\6\0\2\6\11\0\1\6\1\0\3\u0181\5\0"+
    "\32\6\2\0\33\6\10\0\124\u0182\12\0\2\6\11\0"+
    "\1\6\1\0\3\6\5\0\32\6\2\0\2\6\1\u0183"+
    "\30\6\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\22\32\1\u0184\5\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\2\32\1\u0185"+
    "\25\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\3\32\1\u0186\24\32\2\0\4\32"+
    "\1\u0186\26\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\22\32\1\u0187\5\32\2\0\24\32\1\u0187"+
    "\6\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\24\32\1\u0188\3\32\2\0\26\32\1\u0188\4\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\10\32\1\u0189\17\32\2\0\11\32\1\u0189\21\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\1\u018a"+
    "\27\32\2\0\1\32\1\u018a\31\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\6\32\1\u018b\21\32"+
    "\2\0\7\32\1\u018b\23\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\17\32\1\u018c\10\32\2\0"+
    "\20\32\1\u018c\12\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\15\32\1\u018d\12\32\2\0\16\32"+
    "\1\u018d\14\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\22\32\1\u018e\5\32\2\0\24\32\1\u018e"+
    "\6\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\20\32\1\u018f\7\32\2\0\22\32\1\u018f\10\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\13\32\1\u0190\14\32\2\0\14\32\1\u0190\16\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\1\u0191"+
    "\27\32\2\0\1\32\1\u0191\31\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\26\32\1\u0192\1\32"+
    "\2\0\30\32\1\u0192\2\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\22\32\1\u0193\5\32\2\0"+
    "\24\32\1\u0193\6\32\10\0\3\u0194\2\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\10\32\1\u0195\17\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\10\32\1\u0196\17\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\20\32"+
    "\1\u0197\7\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\14\32\1\u0198\13\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\1\u0199\27\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\1\u019a\27\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\16\32\1\u019b\11\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\4\32\1\u019c"+
    "\23\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\1\u019d\27\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\20\32"+
    "\1\u019e\7\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\25\32\1\u019f\2\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\4\32\1\u01a0\23\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\7\32\1\u01a1\23\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\5\32\1\u01a2\25\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\23\32\1\u01a3\7\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\22\32"+
    "\1\u01a4\10\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\15\32\1\u01a5\15\32\15\0"+
    "\2\6\10\0\1\u01a6\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\14\32\1\u01a7\16\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\10\32\1\u01a8\22\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\7\32"+
    "\1\u01a9\23\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\11\32\1\u01aa\21\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\16\32\1\u01ab\14\32\15\0\2\6\10\0\1\u01ac"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\10\32\1\u01ad\22\32\136\0\1\u0101\130\0"+
    "\1\u0104\132\0\1\u01ae\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\13\101\1\u01af\14\101"+
    "\1\77\1\112\14\101\1\u01af\16\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\10\101\1\u01b0\17\101\1\77\1\112"+
    "\11\101\1\u01b0\21\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\24\101\1\u01b1\3\101\1\77\1\112\26\101\1\u01b1"+
    "\4\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\4\101"+
    "\1\u01b2\23\101\1\77\1\112\33\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\u01b3"+
    "\2\77\3\101\7\77\30\101\1\77\1\112\33\101\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\1\u01b4\27\101\1\77"+
    "\1\112\1\101\1\u01b4\31\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\13\101\1\u011e\17\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\5\101\1\u01b5\25\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\13\101\1\u01b6\17\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\15\101\1\u01b7\15\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\23\101\1\u01b8\7\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\16\101\1\u011e\14\101\3\77\1\0\1\236\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\11\101\1\u01b9\21\101"+
    "\3\77\1\0\1\236\3\0\3\u01ba\1\77\1\u01bb\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\33\101\3\77\1\0\1\u01bc\3\0\3\234\1\77"+
    "\1\235\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\30\101\1\77\1\112\17\101\1\u0171\13\101\3\77\1\0"+
    "\1\236\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\30\101\1\77\1\112\5\101"+
    "\1\u01bd\25\101\3\77\1\0\1\236\3\0\3\234\1\77"+
    "\1\235\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\30\101\1\77\1\112\14\101\1\u0110\16\101\3\77\1\0"+
    "\1\236\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\30\101\1\77\1\112\17\101"+
    "\1\u01be\13\101\3\77\1\0\1\236\3\0\3\u0178\1\77"+
    "\1\u0179\60\77\1\112\36\77\1\0\1\u017a\133\0\1\u01bf"+
    "\3\u017b\1\77\1\u017c\60\77\1\112\36\77\1\0\1\u017d"+
    "\133\0\1\u01c0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\30\101\1\77\1\112\5\101"+
    "\1\u01c1\25\101\3\77\1\0\1\236\3\0\3\u01c2\1\77"+
    "\1\u01c3\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\30\101\1\77\1\112\33\101\3\77\1\0\1\u01c4\3\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\17\101\1\u01c5\13\101"+
    "\3\77\1\0\1\236\10\0\2\6\11\0\1\6\1\0"+
    "\1\6\2\u01c6\5\0\32\6\2\0\33\6\10\0\17\u0182"+
    "\1\u01c7\104\u0182\12\0\2\6\11\0\1\6\1\0\3\6"+
    "\5\0\32\6\2\0\1\6\1\u01c8\31\6\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\1\u01c9\32\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\22\32\1\u01ca\5\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\27\32"+
    "\1\u01cb\2\0\31\32\1\u01cb\1\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\22\32\1\u01cc\5\32"+
    "\2\0\24\32\1\u01cc\6\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\2\32\1\u01cd\25\32\2\0"+
    "\3\32\1\u01cd\27\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\3\32\1\u01ce\24\32\2\0\4\32"+
    "\1\u01ce\26\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\23\32\1\u01cf\4\32\2\0\25\32\1\u01cf"+
    "\5\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\12\32\1\u01d0\15\32\2\0\13\32\1\u01d0\17\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\10\32\1\u01d1\17\32\2\0\11\32\1\u01d1\21\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\10\32"+
    "\1\u01d2\17\32\2\0\11\32\1\u01d2\21\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\4\32\1\u01d3"+
    "\23\32\2\0\5\32\1\u01d3\25\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\14\32\1\u01d4\13\32"+
    "\2\0\15\32\1\u01d4\15\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\22\32\1\u01d5\5\32\2\0"+
    "\24\32\1\u01d5\6\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\13\32\1\u01d6\14\32\2\0\14\32"+
    "\1\u01d6\16\32\10\0\3\u0194\41\0\1\u01d7\71\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\5\32\1\u01d8"+
    "\22\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\13\32\1\u01d9\14\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\22\32\1\u01da\5\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\17\32\1\u01db\10\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\20\32\1\u01dc\7\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\13\32"+
    "\1\u01dd\14\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\1\u01de\27\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\21\32\1\u01df\6\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\22\32\1\u01e0\5\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\21\32\1\u01e1\6\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\7\32"+
    "\1\u01e2\20\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\22\32\1\u01e3"+
    "\10\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\30\32\2\0\1\32\1\u01e4\31\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\1\32\1\u01e5\31\32\104\0\1\u01e6\14\0\1\u01e7\24\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\5\32\1\u01e8\25\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\24\32\1\u01e9"+
    "\6\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\30\32\2\0\5\32\1\u01ea\25\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\3\32\1\u01eb\27\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\7\32\1\u01ec\23\32"+
    "\77\0\1\u01ed\167\0\1\u0164\2\0\3\u01ee\1\77\1\u01ef"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\30\101"+
    "\1\77\1\112\33\101\3\77\1\0\1\u01f0\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\4\101\1\u01f1\23\101\1\77\1\112\5\101\1\u01f1"+
    "\25\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\1\u01af"+
    "\27\101\1\77\1\112\1\101\1\u01af\31\101\3\77\1\0"+
    "\1\236\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\21\101\1\u01f2\6\101\1\77"+
    "\1\112\33\101\3\77\1\0\1\236\3\0\3\234\1\77"+
    "\1\235\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\21\101\1\u01f3\6\101\1\77\1\112\23\101\1\u01f3\7\101"+
    "\3\77\1\0\1\236\3\0\3\234\1\77\1\235\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\15\101\1\u01b1"+
    "\12\101\1\77\1\112\16\101\1\u01b1\14\101\3\77\1\0"+
    "\1\236\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\30\101\1\77\1\112\22\101"+
    "\1\u0173\10\101\3\77\1\0\1\236\3\0\3\234\1\77"+
    "\1\235\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\30\101\1\77\1\112\2\101\1\u01f4\30\101\3\77\1\0"+
    "\1\236\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\30\101\1\77\1\112\16\101"+
    "\1\u01f5\14\101\3\77\1\0\1\236\3\0\3\234\1\77"+
    "\1\235\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\30\101\1\77\1\112\11\101\1\u010e\21\101\3\77\1\0"+
    "\1\236\3\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\30\101\1\77\1\112\6\101"+
    "\1\u01f6\24\101\3\77\1\0\1\236\3\0\3\u01ba\1\77"+
    "\1\u01bb\60\77\1\112\36\77\1\0\1\u01bc\133\0\1\u01f7"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\22\101\1\u01f8\10\101"+
    "\3\77\1\0\1\236\3\0\3\u01f9\1\77\1\u01fa\1\77"+
    "\1\101\10\77\1\101\2\77\3\101\7\77\30\101\1\77"+
    "\1\112\33\101\3\77\1\0\1\u01fb\131\0\1\u0179\130\0"+
    "\1\u017c\2\0\3\234\1\77\1\235\1\77\1\101\10\77"+
    "\1\101\2\77\3\101\7\77\30\101\1\77\1\112\22\101"+
    "\1\u011e\10\101\3\77\1\0\1\236\3\0\3\u01c2\1\77"+
    "\1\u01c3\60\77\1\112\36\77\1\0\1\u01c4\133\0\1\u01fc"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\101\7\77\30\101\1\77\1\112\27\101\1\u011e\3\101"+
    "\3\77\1\0\1\236\3\0\17\u0182\1\u01fd\104\u0182\12\0"+
    "\2\6\11\0\1\6\1\0\3\6\5\0\32\6\2\0"+
    "\14\6\1\u01fe\16\6\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\10\32\1\u01ff\17\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\4\32\1\u0200\23\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\16\32\1\u0201\11\32"+
    "\2\0\17\32\1\u0201\13\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\22\32\1\u0202\5\32\2\0"+
    "\24\32\1\u0202\6\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\16\32\1\u0203\11\32\2\0\17\32"+
    "\1\u0203\13\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\17\32\1\u0204\10\32\2\0\20\32\1\u0204"+
    "\12\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\2\32\1\u0205\25\32\2\0\3\32\1\u0205\27\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\1\u0206\27\32\2\0\1\32\1\u0206\31\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\4\32\1\u0207"+
    "\23\32\2\0\5\32\1\u0207\25\32\51\0\1\u0208\74\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\1\u0209"+
    "\27\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\1\u020a\32\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\4\32"+
    "\1\u020b\23\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\3\32\1\u020c\24\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\21\32\1\u020d\6\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\4\32\1\u020e"+
    "\23\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\10\32\1\u020f\17\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\17\32\1\u0210\13\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\16\32"+
    "\1\u0211\14\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\14\32\1\u0212\16\32\77\0"+
    "\1\u0213\140\0\1\u0214\36\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\15\32\1\u0215\15\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\22\32\1\u0216\10\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\30\32\2\0\13\32"+
    "\1\u0217\17\32\112\0\1\u0218\26\0\3\u01ee\1\77\1\u01ef"+
    "\60\77\1\112\36\77\1\0\1\u01f0\133\0\1\u0219\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\20\101\1\u01af\7\101\1\77\1\112\22\101\1\u01af"+
    "\10\101\3\77\1\0\1\236\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\21\101"+
    "\1\u021a\6\101\1\77\1\112\33\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\4\101\1\u021b\23\101\1\77\1\112"+
    "\5\101\1\u021b\25\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\17\101\1\u021c\13\101\3\77"+
    "\1\0\1\236\3\0\3\u021d\1\77\1\u021e\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\33\101\3\77\1\0\1\u021f\3\0\3\234\1\77\1\235"+
    "\1\77\1\101\10\77\1\101\2\77\3\101\7\77\30\101"+
    "\1\77\1\112\31\101\1\u0173\1\101\3\77\1\0\1\236"+
    "\131\0\1\u01bb\2\0\3\u0220\1\77\1\u0221\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\30\101\1\77\1\112"+
    "\33\101\3\77\1\0\1\u0222\3\0\3\u01f9\1\77\1\u01fa"+
    "\60\77\1\112\36\77\1\0\1\u01fb\133\0\1\u0223\126\0"+
    "\1\u01c3\2\0\17\u0182\1\u01fd\11\u0182\1\u0224\72\u0182\12\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\15\32"+
    "\1\u0225\12\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\20\32\1\u0226\7\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\15\32\1\u0227\12\32\2\0\16\32\1\u0227\14\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\15\32\1\u0228\12\32\2\0\16\32\1\u0228\14\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\22\32"+
    "\1\u0229\5\32\2\0\24\32\1\u0229\6\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\22\32\1\u022a"+
    "\5\32\2\0\24\32\1\u022a\6\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\20\32\1\u022b\7\32"+
    "\2\0\22\32\1\u022b\10\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\20\32\1\u022c\7\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\15\32\1\u022d\12\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\1\u022e\27\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\1\u022f\32\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\13\32\1\u0230"+
    "\14\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\25\32\1\u0231\5\32"+
    "\113\0\1\u0232\145\0\1\u0233\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\30\32\2\0\5\32\1\u0234"+
    "\25\32\107\0\1\u0235\157\0\1\u01ef\2\0\3\234\1\77"+
    "\1\235\1\77\1\101\10\77\1\101\2\77\3\101\7\77"+
    "\30\101\1\77\1\112\1\u0236\32\101\3\77\1\0\1\236"+
    "\3\0\3\234\1\77\1\235\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\20\101\1\u0237\7\101\1\77\1\112"+
    "\22\101\1\u0237\10\101\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\30\101\1\77\1\112\30\101\1\u0238\2\101\3\77"+
    "\1\0\1\236\3\0\3\u021d\1\77\1\u021e\60\77\1\112"+
    "\36\77\1\0\1\u021f\133\0\1\u0239\3\u0220\1\77\1\u0221"+
    "\60\77\1\112\36\77\1\0\1\u0222\133\0\1\u023a\126\0"+
    "\1\u01fa\7\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\5\32\1\u023b\22\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\30\32\2\0"+
    "\1\u023c\32\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\10\32\1\u023d\17\32\2\0\11\32\1\u023d"+
    "\21\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\4\32\1\u023e\23\32\2\0\5\32\1\u023e\25\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\1\u023f\32\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\23\32\1\u0240\4\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\22\32\1\u0241\5\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\u0242\5\0\2\6\30\u0242\2\0"+
    "\1\32\32\u0242\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\4\32\1\u0243\23\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\16\32\1\u0244\14\32\107\0\1\u0245\124\0\1\u0246"+
    "\42\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\30\32\2\0\16\32\1\u0247\14\32\105\0\1\u0248\33\0"+
    "\3\234\1\77\1\235\1\77\1\101\10\77\1\101\2\77"+
    "\3\u0249\7\77\30\u0249\1\77\1\112\1\101\32\u0249\3\77"+
    "\1\0\1\236\3\0\3\234\1\77\1\235\1\77\1\101"+
    "\10\77\1\101\2\77\3\101\7\77\10\101\1\u024a\17\101"+
    "\1\77\1\112\11\101\1\u024a\21\101\3\77\1\0\1\236"+
    "\3\0\3\u024b\1\77\1\u024c\1\77\1\101\10\77\1\101"+
    "\2\77\3\101\7\77\30\101\1\77\1\112\33\101\3\77"+
    "\1\0\1\u024d\131\0\1\u021e\130\0\1\u0221\7\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\16\32\1\u024e"+
    "\11\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\1\u024f\27\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\15\32"+
    "\1\u0250\12\32\2\0\16\32\1\u0250\14\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\1\u0251\27\32"+
    "\2\0\1\32\1\u0251\31\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\15\32\1\u0252\12\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\14\32\1\u0253\13\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\16\32\1\u0254"+
    "\11\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\30\32\2\0\4\32\1\u0255\26\32"+
    "\112\0\1\u0256\33\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\1\32\1\u0257\26\32\2\0\33\32\114\0"+
    "\1\u0258\24\0\3\u0259\1\77\1\235\1\77\1\101\3\77"+
    "\1\u025a\4\77\1\101\2\77\3\u0249\7\77\30\u0249\1\77"+
    "\1\112\1\101\32\u0249\3\77\1\0\1\236\3\0\3\234"+
    "\1\77\1\235\1\77\1\101\10\77\1\101\2\77\3\101"+
    "\7\77\5\101\1\u01af\22\101\1\77\1\112\6\101\1\u01af"+
    "\24\101\3\77\1\0\1\236\3\0\3\u024b\1\77\1\u024c"+
    "\60\77\1\112\36\77\1\0\1\u024d\133\0\1\u025b\5\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\13\32"+
    "\1\u025c\14\32\2\0\33\32\15\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\6\32\1\u025d\21\32\2\0"+
    "\7\32\1\u025d\23\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\23\32\1\u025e\4\32\2\0\33\32"+
    "\15\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\20\32\1\u025f\7\32\2\0\33\32\127\0\1\u0260\16\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\30\32"+
    "\2\0\31\32\1\u0261\1\32\10\0\3\u0259\1\77\1\235"+
    "\5\77\1\u025a\52\77\1\112\36\77\1\0\1\236\3\0"+
    "\3\u025a\1\77\1\231\6\77\1\u0262\51\77\1\112\36\77"+
    "\1\0\1\232\131\0\1\u024c\7\0\2\6\11\0\1\6"+
    "\1\0\3\32\5\0\2\6\4\32\1\u0263\23\32\2\0"+
    "\33\32\15\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\14\32\1\u0264\13\32\2\0\33\32\15\0\2\6"+
    "\11\0\1\6\1\0\3\32\5\0\2\6\10\32\1\u0265"+
    "\17\32\2\0\33\32\15\0\2\6\11\0\1\6\1\0"+
    "\3\32\5\0\2\6\10\32\1\u0266\17\32\2\0\33\32"+
    "\10\0\3\u0262\1\77\1\u0267\60\77\1\112\36\77\1\0"+
    "\1\u0268\10\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\1\u0269\27\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\16\32\1\u026a\11\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\30\32\2\0\4\32\1\u026b\26\32\140\0"+
    "\1\u026c\5\0\2\6\11\0\1\6\1\0\3\32\5\0"+
    "\2\6\22\32\1\u026d\5\32\2\0\33\32\136\0\1\u0267"+
    "\7\0\2\6\11\0\1\6\1\0\3\32\5\0\2\6"+
    "\16\32\1\u026e\11\32\2\0\33\32\15\0\2\6\11\0"+
    "\1\6\1\0\3\32\5\0\2\6\20\32\1\u026f\7\32"+
    "\2\0\33\32\15\0\2\6\11\0\1\6\1\0\3\32"+
    "\5\0\2\6\10\32\1\u0270\17\32\2\0\33\32\15\0"+
    "\2\6\11\0\1\6\1\0\3\32\5\0\2\6\16\32"+
    "\1\u0271\11\32\2\0\33\32\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\2\1\7\11\2\1\2\11"+
    "\22\1\2\11\16\1\1\11\1\1\1\11\1\1\2\0"+
    "\1\11\36\0\1\11\6\0\1\1\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\52\1\1\0\1\11\1\0\1\1"+
    "\1\11\3\0\1\11\2\0\1\11\40\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\1\1\0\63\1\4\0"+
    "\1\11\2\0\1\11\44\0\1\1\1\0\10\1\1\11"+
    "\56\1\2\0\1\11\24\0\1\11\2\0\1\11\4\0"+
    "\1\1\1\0\21\1\1\0\21\1\1\0\5\1\1\0"+
    "\1\1\15\0\1\11\7\0\1\11\2\0\1\1\1\0"+
    "\17\1\1\0\16\1\2\0\5\1\2\0\1\11\12\0"+
    "\1\11\3\0\12\1\1\11\12\1\2\0\3\1\6\0"+
    "\1\11\2\0\1\11\2\0\16\1\2\0\1\1\6\0"+
    "\12\1\1\0\1\11\1\1\4\0\1\11\1\0\10\1"+
    "\1\0\1\1\1\11\3\0\4\1\1\11\1\1\1\0"+
    "\4\1\1\11\1\0\3\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //Creamos un listado de llos errores lexicos
    ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

    //Funciones
    //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
    private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
        //creamos un  token auxiliar
        Token tokenAux = new Token(tipoToken, lexema, fila, columna);
        System.out.println("Fila: "+fila+" Columa: "+columna+" Token: "+tipoToken+ " Lexema: "+lexema);
        //retornamos el token aux como simbolo
        return new Symbol(tipo, tokenAux);
    }
    
    //Agregamos un token al array list de errores lexicos
    private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
        //creamos un  token auxiliar
        TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
        //Agregamos al listado
        listadoErroresLexicos.add(tokenErrorAux);
    }

    //Obtenemos el arrLust de los errores lexicos
    public ArrayList<TokenError> obtenerListadoErroresLexicos(){
        return listadoErroresLexicos;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGCIC(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addErrorLexico ("LEXICO", yytext(), "Token no valido",yyline + 1, yycolumn + 1);
            }
            // fall through
          case 116: break;
          case 2:
            { /*                                                                                     */
            }
            // fall through
          case 117: break;
          case 3:
            { return retornarSimbolo(SIMBOL_NOT  , "SIMBOL_NOT"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 118: break;
          case 4:
            { return retornarSimbolo(ALL_CHARACTERS  , "ALL_CHARACTERS", yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 119: break;
          case 5:
            { return retornarSimbolo(PERCENT     , "PERCENT"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 120: break;
          case 6:
            { return retornarSimbolo(PAREN_INI   , "PAREN_INI"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 121: break;
          case 7:
            { return retornarSimbolo(PAREN_FIN   , "PAREN_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 122: break;
          case 8:
            { return retornarSimbolo(SIGNO_POR   , "SIGNO_POR"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 123: break;
          case 9:
            { return retornarSimbolo(SIGNO_MAS   , "SIGNO_MAS"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 124: break;
          case 10:
            { return retornarSimbolo(COMA        , "COMA"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 125: break;
          case 11:
            { return retornarSimbolo(SIGNO_MIN   , "SIGNO_MIN"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 126: break;
          case 12:
            { return retornarSimbolo(SIGNO_DIV   , "SIGNO_DIV"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 127: break;
          case 13:
            { return retornarSimbolo(INTEGER_VALUE   , "INTEGER_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 128: break;
          case 14:
            { return retornarSimbolo(DOS_PUNTOS  , "DOS_PUNTOS"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 129: break;
          case 15:
            { return retornarSimbolo(PUNTO_COMA  , "PUNTO_COMA"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 130: break;
          case 16:
            { return retornarSimbolo(MENOR       , "MENOR"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 131: break;
          case 17:
            { return retornarSimbolo(IGUAL       , "IGUAL"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 132: break;
          case 18:
            { return retornarSimbolo(MAYOR       , "MAYOR"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 133: break;
          case 19:
            { return retornarSimbolo(ID_VALUE        , "ID_VALUE"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 134: break;
          case 20:
            { return retornarSimbolo(CORCH_INI   , "CORCH_INI"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 135: break;
          case 21:
            { return retornarSimbolo(CORCH_FIN   , "CORCH_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 136: break;
          case 22:
            { return retornarSimbolo(LLAVE_INI   , "LLAVE_INI"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 137: break;
          case 23:
            { return retornarSimbolo(LLAVE_FIN   , "LLAVE_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 138: break;
          case 24:
            { return retornarSimbolo(NO_IGUAL    , "NO_IGUAL"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 139: break;
          case 25:
            { return retornarSimbolo(SIMBOL_AND  , "SIMBOL_AND"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 140: break;
          case 26:
            { return retornarSimbolo(MENOR_IGUAL , "MENOR_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 141: break;
          case 27:
            { return retornarSimbolo(IGUAL_IGUAL , "IGUAL_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 142: break;
          case 28:
            { return retornarSimbolo(MAYOR_IGUAL , "MAYOR_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 143: break;
          case 29:
            { return retornarSimbolo(IF          , "IF"          , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 144: break;
          case 30:
            { return retornarSimbolo(ID          , "ID"          , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 145: break;
          case 31:
            { return retornarSimbolo(SIMBOL_OR   , "SIMBOL_OR"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 146: break;
          case 32:
            { System.out.println("Fila: "+ (yyline + 1) +" Columa: "+ (yycolumn + 1) +" Token: "+"COMENTARIO DE LINEA"+ " Lexema: "+yytext());
            }
            // fall through
          case 147: break;
          case 33:
            { return retornarSimbolo(TEXT_VALUE          , "TEXT_VALUE"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 148: break;
          case 34:
            { return retornarSimbolo(ID_VALUE_STR  , "ID_VALUE_STR"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 149: break;
          case 35:
            { return retornarSimbolo(DIGIT_VALUE , "DIGIT_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 150: break;
          case 36:
            { return retornarSimbolo(INSERT_TOKEN_VALUE  , "INSERT_TOKEN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 151: break;
          case 37:
            { return retornarSimbolo(CHARACT_VALUE   , "CHARACT_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 152: break;
          case 38:
            { return retornarSimbolo(ID_VALUE_CHAR , "ID_VALUE_CHAR"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 153: break;
          case 39:
            { return retornarSimbolo(DECIMAL_VALUE   , "DECIMAL_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 154: break;
          case 40:
            { return retornarSimbolo(FUNCTION_ASC                , "FUNCTION_ASC"  		      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 155: break;
          case 41:
            { return retornarSimbolo(C_P         , "C_P"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 156: break;
          case 42:
            { return retornarSimbolo(END         , "END"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 157: break;
          case 43:
            { return retornarSimbolo(ALT         , "ALT"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 158: break;
          case 44:
            { return retornarSimbolo(SRC         , "SRC"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 159: break;
          case 45:
            { return retornarSimbolo(COLOR_HEX   , "COLOR_HEX"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 160: break;
          case 46:
            { return retornarSimbolo(PERCE_VALUE , "PERCE_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 161: break;
          case 47:
            { return retornarSimbolo(C_BR        , "C_BR"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 162: break;
          case 48:
            { return retornarSimbolo(C_H1        , "C_H1"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 163: break;
          case 49:
            { return retornarSimbolo(FUNCTION_DESC               , "FUNCTION_DESC" 		      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 164: break;
          case 50:
            { return retornarSimbolo(ELSE        , "ELSE"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 165: break;
          case 51:
            { return retornarSimbolo(FUNCTION_EXIT               , "FUNCTION_EXIT"               , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 166: break;
          case 52:
            { return retornarSimbolo(INIT        , "INIT"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 167: break;
          case 53:
            { return retornarSimbolo(THEN        , "THEN"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 168: break;
          case 54:
            { return retornarSimbolo(CHAR        , "CHAR"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 169: break;
          case 55:
            { return retornarSimbolo(COLS        , "COLS"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 170: break;
          case 56:
            { return retornarSimbolo(HREF        , "HREF"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 171: break;
          case 57:
            { return retornarSimbolo(NAME        , "NAME"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 172: break;
          case 58:
            { return retornarSimbolo(ROWS        , "ROWS"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 173: break;
          case 59:
            { return retornarSimbolo(BOOLEAN_VALUE   , "BOOLEAN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 174: break;
          case 60:
            { return retornarSimbolo(TYPE        , "TYPE"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 175: break;
          case 61:
            { return retornarSimbolo(PIXEL_VALUE , "PIXEL_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 176: break;
          case 62:
            { return retornarSimbolo(COLOR_VALUE , "COLOR_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 177: break;
          case 63:
            { return retornarSimbolo(ROW         , "ROW"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 178: break;
          case 64:
            { return retornarSimbolo(C_DIV       , "C_DIV"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 179: break;
          case 65:
            { return retornarSimbolo(C_IMG       , "C_IMG"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 180: break;
          case 66:
            { return retornarSimbolo(WHILE       , "WHILE"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 181: break;
          case 67:
            { return retornarSimbolo(CLASS       , "CLASS"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 182: break;
          case 68:
            { return retornarSimbolo(COLOR       , "COLOR"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 183: break;
          case 69:
            { return retornarSimbolo(WIDTH       , "WIDTH"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 184: break;
          case 70:
            { return retornarSimbolo(ALIGN_VALUE , "ALIGN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 185: break;
          case 71:
            { return retornarSimbolo(TEXT        , "TEXT"        , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 186: break;
          case 72:
            { return retornarSimbolo(C_BODY      , "C_BODY"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 187: break;
          case 73:
            { return retornarSimbolo(C_GCIC      , "C_GCIC"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 188: break;
          case 74:
            { return retornarSimbolo(C_HEAD      , "C_HEAD"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 189: break;
          case 75:
            { return retornarSimbolo(C_LINK      , "C_LINK"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 190: break;
          case 76:
            { return retornarSimbolo(C_SPAM      , "C_SPAM"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 191: break;
          case 77:
            { return retornarSimbolo(ELSE_IF     , "ELSE_IF"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 192: break;
          case 78:
            { return retornarSimbolo(HUNTIL      , "HUNTIL"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 193: break;
          case 79:
            { return retornarSimbolo(INSERT      , "INSERT"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 194: break;
          case 80:
            { return retornarSimbolo(REPEAT      , "REPEAT"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 195: break;
          case 81:
            { return retornarSimbolo(HEIGHT      , "HEIGHT"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 196: break;
          case 82:
            { return retornarSimbolo(STRING      , "STRING"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 197: break;
          case 83:
            { return retornarSimbolo(FONT_VALUE  , "FONT_VALUE"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 198: break;
          case 84:
            { return retornarSimbolo(RADIO       , "RADIO"       , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 199: break;
          case 85:
            { return retornarSimbolo(MODO_GLOBAL , "MODO_GLOBAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 200: break;
          case 86:
            { return retornarSimbolo(C_INPUT     , "C_INPUT"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 201: break;
          case 87:
            { return retornarSimbolo(C_TITLE     , "C_TITLE"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 202: break;
          case 88:
            { return retornarSimbolo(ON_LOAD     , "ON_LOAD"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 203: break;
          case 89:
            { return retornarSimbolo(FUNCTION_REVERSE            , "FUNCTION_REVERSE"            , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 204: break;
          case 90:
            { return retornarSimbolo(BOOLEAN     , "BOOLEAN"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 205: break;
          case 91:
            { return retornarSimbolo(DECIMAL     , "DECIMAL"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 206: break;
          case 92:
            { return retornarSimbolo(INTEGER     , "INTEGER"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 207: break;
          case 93:
            { return retornarSimbolo(ONCLICK     , "ONCLICK"     , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 208: break;
          case 94:
            { return retornarSimbolo(COLUMN      , "COLUMN"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 209: break;
          case 95:
            { return retornarSimbolo(NUMBER      , "NUMBER"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 210: break;
          case 96:
            { System.out.println("Fila: "+ (yyline + 1) +" Columa: "+ (yycolumn + 1) +" Token: "+"COMENTARIO DE BLOQUE"+ " Lexema: "+yytext());
            }
            // fall through
          case 211: break;
          case 97:
            { return retornarSimbolo(C_BUTTON    , "C_BUTTON"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 212: break;
          case 98:
            { return retornarSimbolo(C_OPTION    , "C_OPTION"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 213: break;
          case 99:
            { return retornarSimbolo(C_SELECT    , "C_SELECT"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 214: break;
          case 100:
            { return retornarSimbolo(PROCESS_ABC , "PROCESS_ABC" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 215: break;
          case 101:
            { return retornarSimbolo(THENWHILE   , "THENWHILE"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 216: break;
          case 102:
            { return retornarSimbolo(FONT_SIZE   , "FONT_SIZE"   , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 217: break;
          case 103:
            { return retornarSimbolo(CHECKBOX    , "CHECKBOX"    , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 218: break;
          case 104:
            { return retornarSimbolo(FUNCTION_ALERT_INFO         , "FUNCTION_ALERT_INFO"         , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 219: break;
          case 105:
            { return retornarSimbolo(C_TEXTAREA  , "C_TEXTAREA"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 220: break;
          case 106:
            { return retornarSimbolo(FUNCTION_LETPAR_NUM         , "FUNCTION_LETPAR_NUM" 	      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 221: break;
          case 107:
            { return retornarSimbolo(BACKGROUND  , "BACKGROUND"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 222: break;
          case 108:
            { return retornarSimbolo(TEXT_ALIGN  , "TEXT_ALIGN"  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 223: break;
          case 109:
            { return retornarSimbolo(C_SCRIPTING , "C_SCRIPTING" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 224: break;
          case 110:
            { return retornarSimbolo(FONT_FAMILY , "FONT_FAMILY" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 225: break;
          case 111:
            { return retornarSimbolo(FUNCTION_LETIMPAR_NUM       , "FUNCTION_LETIMPAR_NUM" 	  , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 226: break;
          case 112:
            { return retornarSimbolo(PROCESS_VAL , "PROCESS_VAL" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 227: break;
          case 113:
            { return retornarSimbolo(FUNCTION_NUM_ALEATORIO      , "FUNCTION_NUM_ALEATORIO"      , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 228: break;
          case 114:
            { return retornarSimbolo(GET_ELEMEN_BY_ID            , "GET_ELEMEN_BY_ID"            , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 229: break;
          case 115:
            { return retornarSimbolo(FUNCTION_CARACTER_ALEATORIO , "FUNCTION_CARACTER_ALEATORIO" , yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 230: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerGCIC [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerGCIC scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerGCIC(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
