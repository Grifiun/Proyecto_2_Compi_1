package gramatica_gcic;

import java_cup.runtime.*;
import gramatica_gcic.sym;
import gramatica_gcic.LexerGCIC;
import java_cup.runtime.XMLElement;
import clasesDAO.Token;
import clasesDAO.TokenError;
import java.util.ArrayList;
import java.util.List;
import tabla_simbolos.*;
import tabla_simbolos_etiquetas.*;
import operaciones.*;

parser code{:
    //Listado de errores	
	//Controlador de error sintactico
    ArrayList<TokenError> listadoErroresSintacticos = new ArrayList();
	TablaSimbolos tablaSimbolos = new TablaSimbolos();
	TablaSimbolosEtiquetas tablaSimbolosEtiquetas = new TablaSimbolosEtiquetas();
	OperacionAritmetica operacionAritmetica = new OperacionAritmetica();
	OperacionRelacional operacionRelacional = new OperacionRelacional();
	OperacionLogica     operacionLogica     = new OperacionLogica    ();
	String procedimiento = "";
	String etiqueta = "";
	int numeroEtiqueta = 0;
	int scripting = 0;
	
	@Override
	public void syntax_error(Symbol a){
		Token tokenError = (Token) a.value;//lo transformamos en token para obtener su lexema, fila y columna		
		String msgError = "Se esperaba: ";	
		
                
		int linea = (tokenError != null) ? tokenError.getLinea() : 0;
		int columna = (tokenError != null) ? tokenError.getColumna() : 0;

		if(a.sym == sym.EOF){
			System.out.println("END OF FILE");
			TokenError tokenErrorAux = new TokenError("ERROR SINTACTICO", "Etiqueta de cierre", "La etiqueta de cierre debe ser <C_GCIC>", -1, -1);
			listadoErroresSintacticos.add(tokenErrorAux);
		}else{
			for(int i = 0; i < expected_token_ids().size(); i++){
				//msgError = msgError + mensajes[expected_token_ids().get(i)];
				msgError = msgError + symbl_name_from_id(expected_token_ids().get(i)) + " ";

				if(i < expected_token_ids().size() - 1)
					msgError = msgError + ", ";			
			}
			//System.out.println("error de sintaxis: linea: "+tokenError.getLexema()+" "+tokenError.getLinea()+" columna: "+tokenError.getColumna()+" MENSAJE: "+msgError);
			TokenError tokenErrorAux = new TokenError("ERROR SINTACTICO", tokenError.getLexema(), msgError, linea, columna);
			listadoErroresSintacticos.add(tokenErrorAux);
		}
		
	}
	
	public void report_error(String message, Object info) {
        System.out.println("Reportar Error");
    }
    
	public void report_fatal_error(String message, Object info) {
        System.out.println("Error Fatal: " + info);
    }

    protected int error_sync_size() {
        return 1;
    }

	public TablaSimbolos getTablaSimbolos(){
		return tablaSimbolos;
	}

	public TablaSimbolosEtiquetas getTablaSimbolosEtiquetas(){
		return tablaSimbolosEtiquetas;
	}

	public ArrayList<TokenError> getListadoErroresSintacticos(){
		return listadoErroresSintacticos;
	}

	public ArrayList<TokenError> getListadoErroresSemanticos(){
		return tablaSimbolos.getListadoErroresSemanticos();
	}

	public void analizarResultadoOperacionAritmetica(Token tokenAux){
		TokenError tokenErrorAux = operacionAritmetica.getTokenError();
		if(tokenErrorAux != null){//se produjo un error

				tokenErrorAux.setLinea(tokenAux.getLinea());
				tokenErrorAux.setColumna(tokenAux.getColumna());
				tablaSimbolos.addErrorSemantico(tokenErrorAux);		
				operacionAritmetica.setTokenError(null);	//reseteamos el error
		}
	}

	public void analizarResultadoOperacionRelacional(Token tokenAux){
		TokenError tokenErrorAux = operacionRelacional.getTokenError();
		if(tokenErrorAux != null){//se produjo un error

				tokenErrorAux.setLinea(tokenAux.getLinea());
				tokenErrorAux.setColumna(tokenAux.getColumna());
				tablaSimbolos.addErrorSemantico(tokenErrorAux);		
				operacionRelacional.setTokenError(null);	//reseteamos el error
		}
	}

	public void analizarResultadoOperacionLogico(Token tokenAux){
		TokenError tokenErrorAux = operacionLogica.getTokenError();
		if(tokenErrorAux != null){//se produjo un error

				tokenErrorAux.setLinea(tokenAux.getLinea());
				tokenErrorAux.setColumna(tokenAux.getColumna());
				tablaSimbolos.addErrorSemantico(tokenErrorAux);		
				operacionLogica.setTokenError(null);	//reseteamos el error
		}
	}

	public void analizarParametroEtiqueta(Token tokenAux){
		TokenError tokenErrorAux = tablaSimbolosEtiquetas.getTokenErrorAuxiliar();
		if(tokenErrorAux != null){//se produjo un error
			tokenErrorAux.setLinea(tokenAux.getLinea());
			tokenErrorAux.setColumna(tokenAux.getColumna());
			tablaSimbolos.addErrorSemantico(tokenErrorAux);		
			tablaSimbolosEtiquetas.resetTokenErrorAuxiliar();	//reseteamos el error
		}
	}

    public parser(LexerGCIC lex){
        super(lex);
    }
:}

//SIMBOLOS
terminal Token PERCENT     ;
terminal Token IGUAL       ;
terminal Token MENOR       ;
terminal Token MAYOR       ;
terminal Token CORCH_INI   ;
terminal Token CORCH_FIN   ;
terminal Token PAREN_INI   ;
terminal Token PAREN_FIN   ;
terminal Token LLAVE_INI   ;
terminal Token LLAVE_FIN   ;
terminal Token COMA        ;
terminal Token PUNTO_COMA  ;
terminal Token DOS_PUNTOS  ;
terminal Token IGUAL_IGUAL ;
terminal Token NO_IGUAL    ;
terminal Token MENOR_IGUAL ;
terminal Token MAYOR_IGUAL ;

//OPERADORES LOGICOS
terminal Token SIMBOL_OR   ;
terminal Token SIMBOL_AND  ;
terminal Token SIMBOL_NOT  ;

//OPERADORES MATEMATICOS
terminal Token SIGNO_MAS   ;
terminal Token SIGNO_MIN   ;
terminal Token SIGNO_POR   ;
terminal Token SIGNO_DIV   ;

//ETIQUETAS HTML
terminal Token C_GCIC      ;
terminal Token C_HEAD      ;
terminal Token C_TITLE     ;
terminal Token C_LINK      ;
terminal Token C_BODY      ;
terminal Token C_SPAM      ;
terminal Token C_INPUT     ;
terminal Token C_TEXTAREA  ;
terminal Token C_SELECT    ;
terminal Token C_OPTION    ;
terminal Token C_DIV       ;
terminal Token C_IMG       ;
terminal Token C_BR        ;
terminal Token C_BUTTON    ;
terminal Token C_H1        ;
terminal Token C_P         ;
//SCRIPTING
terminal Token C_SCRIPTING ;

//PARAMETROS
terminal Token HREF        ;
terminal Token BACKGROUND  ;
terminal Token COLOR       ;
terminal Token FONT_SIZE   ;
terminal Token FONT_FAMILY ;
terminal Token TEXT_ALIGN  ;
terminal Token TYPE        ;
terminal Token ID          ;
terminal Token NAME        ;
terminal Token COLS        ;
terminal Token ROWS        ;
terminal Token CLASS       ;
terminal Token SRC         ;
terminal Token WIDTH       ;
terminal Token HEIGHT      ;
terminal Token ALT         ;
terminal Token ONCLICK     ;

//PARAMETROS SCRIPTING
terminal Token ON_LOAD     ;
terminal Token PROCESS_ABC ;

//TIPO DATOS
terminal Token INTEGER     ;
terminal Token DECIMAL     ;
terminal Token BOOLEAN     ;
terminal Token CHAR        ;
terminal Token STRING      ;

//FUNCIONES ESPECIALES LENGUAJE CLC
terminal Token FUNCTION_ASC                ;
terminal Token FUNCTION_DESC               ;
terminal Token FUNCTION_LETPAR_NUM         ;
terminal Token FUNCTION_LETIMPAR_NUM       ;
terminal Token FUNCTION_REVERSE            ;
terminal Token FUNCTION_CARACTER_ALEATORIO ;
terminal Token FUNCTION_NUM_ALEATORIO      ;
terminal Token FUNCTION_ALERT_INFO         ;
terminal Token FUNCTION_EXIT               ;

//ACCESO A IDENTIFICADORES
terminal Token GET_ELEMEN_BY_ID            ;

//BLOQUE INSTRUCCIONES
terminal Token INIT        ;
terminal Token END         ;

//SENTENCIAS
terminal Token IF          ;
terminal Token ELSE        ;
terminal Token ELSE_IF     ;
terminal Token THEN        ;

//CICLOS
terminal Token REPEAT      ;
terminal Token HUNTIL      ;
terminal Token WHILE       ;
terminal Token THENWHILE   ;

//INSERT
terminal Token INSERT      ;

//MODO DECLARACION
terminal Token MODO_GLOBAL ;

//COMENTARIOS, los ignoramos
terminal Token COMENT_BLOCK;
terminal Token COMENT_LINE ;

//LLAMADA A UN PROCESO
terminal Token PROCESS_VAL ;

////////////////////////////////////VALUES C_HTML
//COLOR VALUES
terminal Token COLOR_HEX   ;
terminal Token COLOR_VALUE ;

//PIXELS VALUE
terminal Token PIXEL_VALUE ;
terminal Token PERCE_VALUE ;

//FONT VALUE
terminal Token FONT_VALUE  ;

//TEXT ALIGN VALUE
terminal Token ALIGN_VALUE ;

//TYPE INPUT VALUE
terminal Token TEXT        ;
terminal Token NUMBER      ;
terminal Token RADIO       ;
terminal Token CHECKBOX    ;

//NUMBERS VALUE
terminal Token DIGIT_VALUE ;

//CLASS VALUE
terminal Token ROW         ;
terminal Token COLUMN      ;

//URL VALUE
//URL_VALUE   ; \" [\0-\40]* "https://www." [\41-\176]+    [\0-\40]* \" //excluimos el espacio

//ID VALUE, inicia con "_" | "-" | "$", alfabeto y sigue con alfanum o los mismos simbolos
terminal Token ID_VALUE_STR  ;
terminal Token ID_VALUE_CHAR ;

//TEXT VALUE, se excluye el codigo ascii 42, el cual representa a << " >>
terminal Token TEXT_VALUE          ;
terminal Token INSERT_TOKEN_VALUE  ;

//DATA VALUES
terminal Token INTEGER_VALUE   ;
terminal Token DECIMAL_VALUE   ;
terminal Token BOOLEAN_VALUE   ;
terminal Token CHARACT_VALUE   ;
//DECIMAL_VALUE ;

//////////////////////////////////IDS
terminal Token ID_VALUE        ;
terminal Token ALL_CHARACTERS  ;

////////////////////////////////////////////////////////////////NO TERMINALES
non terminal s;

//////////////////////////////////////////////////PRODUCCIONES ETIQUETAS
/////////////////////////CONTENIDO
non terminal etiqueta_gcic;
non terminal etiqueta_head;
non terminal etiqueta_title;
non terminal etiqueta_link;
non terminal etiqueta_body;
non terminal etiqueta_spam;
non terminal etiqueta_input;
non terminal etiqueta_textarea;
non terminal etiqueta_select;
non terminal etiqueta_option;
non terminal etiqueta_div;
non terminal etiqueta_img;
non terminal etiqueta_br;
non terminal etiqueta_button;
non terminal etiqueta_h1;
non terminal etiqueta_p;
non terminal etiqueta_scripting;

non terminal String contenido_texto;
non terminal String contenido_texto_unidad;
non terminal bloque_elements_gcic;
non terminal bloque_options;
non terminal bloque_elements_head;
non terminal elements_head;
non terminal bloque_elements_body;
non terminal elements_body;
/////////////////////////APERTURA
non terminal etiqueta_apertura_gcic;
non terminal etiqueta_apertura_head;
non terminal etiqueta_apertura_title;
non terminal etiqueta_apertura_link;
non terminal etiqueta_apertura_body;
non terminal etiqueta_apertura_spam;
non terminal etiqueta_apertura_input;
non terminal etiqueta_apertura_textarea;
non terminal etiqueta_apertura_select;
non terminal etiqueta_apertura_option;
non terminal etiqueta_apertura_div;
non terminal etiqueta_apertura_img;
non terminal etiqueta_apertura_br;
non terminal etiqueta_apertura_button;
non terminal etiqueta_apertura_h1;
non terminal etiqueta_apertura_p;
non terminal etiqueta_apertura_sripting;
/////////////////////////CIERRE
non terminal etiqueta_cierre_gcic;
non terminal etiqueta_cierre_head;
non terminal etiqueta_cierre_title;
non terminal etiqueta_cierre_link;
non terminal etiqueta_cierre_body;
non terminal etiqueta_cierre_spam;
non terminal etiqueta_cierre_input;
non terminal etiqueta_cierre_textarea;
non terminal etiqueta_cierre_select;
non terminal etiqueta_cierre_option;
non terminal etiqueta_cierre_div;
non terminal etiqueta_cierre_img;
non terminal etiqueta_cierre_button;
non terminal etiqueta_cierre_h1;
non terminal etiqueta_cierre_p;
non terminal etiqueta_cierre_sripting;

non terminal etiqueta_cierre_general;
//////////////////////////////////////////////////BLOQUE PARAMETROS
non terminal bloque_parametros_gcic;
non terminal bloque_parametros_link;
non terminal bloque_parametros_body;
non terminal bloque_parametros_input;
non terminal bloque_parametros_textarea;
non terminal bloque_parametros_div;
non terminal bloque_parametros_img;
non terminal bloque_parametros_label;
non terminal bloque_parametros_button;

non terminal bloque_parametros_contenido_gcic;
non terminal bloque_parametros_contenido_link;
non terminal bloque_parametros_contenido_body;
non terminal bloque_parametros_contenido_input;
non terminal bloque_parametros_contenido_textarea;
non terminal bloque_parametros_contenido_div;
non terminal bloque_parametros_contenido_img;
non terminal bloque_parametros_contenido_label;
non terminal bloque_parametros_contenido_button;
//////////////////////////////////////////////////PARAMETROS 
non terminal parametros_gcic;
non terminal parametros_link;
non terminal parametros_input;
non terminal parametros_textarea;
non terminal parametros_div;
non terminal parametros_background;
non terminal parametros_button;
non terminal parametros_letras; 
non terminal parametros_img;

//////////////////////////////////////////////////PARAMETRO UNIDAD
non terminal parametro_unidad_href;
non terminal parametro_unidad_background;
non terminal parametro_unidad_color;
non terminal parametro_unidad_font_size;
non terminal parametro_unidad_font_family;
non terminal parametro_unidad_text_align;
non terminal parametro_unidad_type;
non terminal parametro_unidad_id;
non terminal parametro_unidad_name;
non terminal parametro_unidad_cols;
non terminal parametro_unidad_rows;
non terminal parametro_unidad_class;
non terminal parametro_unidad_src;
non terminal parametro_unidad_width;
non terminal parametro_unidad_height;
non terminal parametro_unidad_alt;
non terminal parametro_unidad_onclick;

//non terminal parametro_unidad_option;
//////////////////////////////////////////////////VALORES
non terminal Token parametro_valor_color;
non terminal Token parametro_valor_size;
non terminal Token parametro_valor_type;
non terminal Token parametro_valor_id;
non terminal Token parametro_valor_name;
non terminal Token parametro_valor_class;
non terminal Token parametro_valor_reservado;

//////////////////////////////////////////////////SCRIPTING
//FUNCION
non terminal bloque_funciones;
non terminal funcion_unitaria;
non terminal funcion_unitaria_simbolos_inicio;
non terminal nombre_funciones;
//BLOQUE INSTRUCCIONES
non terminal bloque_instrucciones_sentencias;
non terminal bloque_instrucciones_sentencias_inicio;
non terminal bloque_instrucciones_sentencias_fin;
non terminal bloque_instrucciones;
non terminal instruccion_general;
non terminal instruccion;
//DECLARACION Y ASIGNACION
non terminal String[] intruccion_declaracion;
non terminal intruccion_asignacion;
non terminal ValorElemento asignacion;
non terminal ValorElemento valores_datos_primarios;
non terminal Token tipo_datos;
non terminal String nombres_variables;
non terminal String nombres_variables_unidad;
//MODO
non terminal String modo_variable;
//IF, ELSE IF, ELSE
non terminal bloque_sentencia_if;
non terminal bloque_if;
non terminal bloque_if_elses;
non terminal comparacion_if;
non terminal comparacion_else_if;
non terminal comparacion_else;
//REPEAT AND WHILE
non terminal instruccion_ciclos;
non terminal ciclo_repeat;
non terminal ciclo_while;
non terminal ciclo_repeat_declaracion;
non terminal condicion_repeat_inicio;
non terminal condicion_repeat_fin;
//INSERT
non terminal instruccion_insert;
non terminal valores_insert_token;
non terminal valores_insert_token_unidad;
//GET ELEMENT
non terminal String get_element_value;
non terminal String get_element_value_id;
//CONDICION Retorna true or false
non terminal condicion;
//OPERACIONES
non terminal ValorElemento operacion_logica;
non terminal ValorElemento operacion_relacional;
non terminal ValorElemento operacion_aritmetica;
non terminal ValorElemento operacion_aritmetica_con_parentesis;
//FUNCIONES ESPECIALES
non terminal ValorElemento funciones_con_valor;
non terminal funciones_con_valor_tipo;
non terminal funciones_con_valor_parametros;
non terminal funciones_instruccion;

////////////////////////////////////////////////////////////////PRECEDENCIA
precedence left ELSE;
precedence left ELSE_IF;
//precedencia aritmetica
precedence left SIGNO_MAS, SIGNO_MIN;
precedence left SIGNO_POR, SIGNO_DIV;
//precedencia relacional
precedence nonassoc MAYOR_IGUAL, MENOR_IGUAL, MENOR, MAYOR;
precedence nonassoc IGUAL_IGUAL, NO_IGUAL;
//precedencia logica
precedence right SIMBOL_NOT;
precedence left SIMBOL_AND;
precedence left SIMBOL_OR;

////////////////////////////////////////////////////////////////PRODUCCIONES
start with s;

s ::= etiqueta_gcic {: System.out.println("Se registro una etiqueta GCIC"); :}
	| /* empty */   {: System.out.println("Se registro una etiqueta vacia"); :}
	| error			{: System.out.println("Cierre bien la etiqueta C_GCIC"); :}
	//| etiqueta_scripting {: System.out.println("Se registro una etiqueta sripting"); :}
	;

//////////////////////////////////////////////////PRODUCCIONES ETIQUETAS
/////////////////////////CONTENIDO
etiqueta_gcic     ::= etiqueta_apertura_gcic bloque_elements_gcic etiqueta_cierre_gcic ;//| error;
etiqueta_head     ::= etiqueta_apertura_head bloque_elements_head etiqueta_cierre_head | error;
etiqueta_body     ::= etiqueta_apertura_body bloque_elements_body etiqueta_cierre_body | error;
etiqueta_div      ::= etiqueta_apertura_div  bloque_elements_body etiqueta_cierre_div  | error;

bloque_elements_gcic ::= etiqueta_head etiqueta_body; //Head y el Body, obligatorio la declaracion de estos 2 terminos

bloque_elements_head ::= bloque_elements_head elements_head
	| /* empty */
	;

elements_head ::= 
	  etiqueta_title
	| etiqueta_link
	| error {: System.out.println("Error etiqueta del head"); :}
	;

bloque_elements_body ::= bloque_elements_body elements_body
	| /* empty */
	;

elements_body ::= 
	  etiqueta_spam
	| etiqueta_input
	| etiqueta_textarea
	| etiqueta_select
	| etiqueta_div
	| etiqueta_img
	| etiqueta_br
	| etiqueta_button
	| etiqueta_h1
	| etiqueta_p
	| etiqueta_scripting
	//| /* empty */
	//| error {: System.out.println("Error etiqueta del body"); :}
	;

/////////////////////////SELECT
etiqueta_select   ::= etiqueta_apertura_select 
					  	bloque_options
					  etiqueta_cierre_select;

bloque_options    ::= bloque_options etiqueta_option
	| /* empty */
	;

/////////////////////////NADA
etiqueta_br       ::= etiqueta_apertura_br;
etiqueta_img      ::= etiqueta_apertura_img etiqueta_cierre_img;

/////////////////////////TEXTOS
etiqueta_title    ::= etiqueta_apertura_title    contenido_texto:a etiqueta_cierre_title    {: System.out.println(" ---> TEXTO --->: "+a); :};
etiqueta_link     ::= etiqueta_apertura_link     contenido_texto:a etiqueta_cierre_link     {: System.out.println(" ---> TEXTO --->: "+a); :};
etiqueta_spam     ::= etiqueta_apertura_spam     contenido_texto:a etiqueta_cierre_spam     {: System.out.println(" ---> TEXTO --->: "+a); :};
etiqueta_input    ::= etiqueta_apertura_input    contenido_texto:a etiqueta_cierre_input    {: System.out.println(" ---> TEXTO --->: "+a); :};
etiqueta_textarea ::= etiqueta_apertura_textarea contenido_texto:a etiqueta_cierre_textarea {: System.out.println(" ---> TEXTO --->: "+a); :};
etiqueta_option   ::= etiqueta_apertura_option   contenido_texto:a etiqueta_cierre_option   {: System.out.println(" ---> TEXTO --->: "+a); :};
etiqueta_button   ::= etiqueta_apertura_button   contenido_texto:a etiqueta_cierre_button   {: System.out.println(" ---> TEXTO --->: "+a); :};
etiqueta_h1       ::= etiqueta_apertura_h1       contenido_texto:a etiqueta_cierre_h1       {: System.out.println(" ---> TEXTO --->: "+a); :};
etiqueta_p        ::= etiqueta_apertura_p        contenido_texto:a etiqueta_cierre_p        {: System.out.println(" ---> TEXTO --->: "+a); :};


contenido_texto   ::= contenido_texto:bloqueTexto contenido_texto_unidad:textoAux
		{:
			RESULT = bloqueTexto + " " + textoAux;//agregamos texto
		:}
	| contenido_texto:bloqueTexto etiqueta_br //salto de linea
		{:
			RESULT = bloqueTexto + " " + "<br>";//agregamos salto de linea
		:}
	| /* empty */ 
		{:
			RESULT = "";
		:}
	//| error MENOR
	;

contenido_texto_unidad ::= 
	  ALL_CHARACTERS:a 		    	{: RESULT = a.getLexema(); :}
	| ID_VALUE:a                	{: RESULT = a.getLexema(); :}
	//SIMBOLOS
	| PERCENT:a                 	{: RESULT = a.getLexema(); :}
	| IGUAL:a                   	{: RESULT = a.getLexema(); :}
	| CORCH_INI:a               	{: RESULT = a.getLexema(); :}
	| CORCH_FIN:a                   {: RESULT = a.getLexema(); :}
	| PAREN_INI:a                   {: RESULT = a.getLexema(); :}
	| PAREN_FIN:a                   {: RESULT = a.getLexema(); :}
	| LLAVE_INI:a                   {: RESULT = a.getLexema(); :}
	| LLAVE_FIN:a 			        {: RESULT = a.getLexema(); :}
	| COMA:a                        {: RESULT = a.getLexema(); :}
	| PUNTO_COMA:a                  {: RESULT = a.getLexema(); :}
	| DOS_PUNTOS:a                  {: RESULT = a.getLexema(); :}
	| NO_IGUAL:a 		     	    {: RESULT = a.getLexema(); :}
	| MAYOR_IGUAL:a 	     	    {: RESULT = a.getLexema(); :}
	| MENOR_IGUAL:a 	            {: RESULT = a.getLexema(); :}
	| MAYOR:a ALL_CHARACTERS:b      {: RESULT = a.getLexema() + " " + b.getLexema(); :}
	| MENOR:a ALL_CHARACTERS:b      {: RESULT = a.getLexema() + " " + b.getLexema(); :}
	| MAYOR:a INTEGER_VALUE:b       {: RESULT = a.getLexema() + " " + b.getLexema(); :}
	| MAYOR:a DECIMAL_VALUE:b       {: RESULT = a.getLexema() + " " + b.getLexema(); :}
	| MAYOR:a BOOLEAN_VALUE:b       {: RESULT = a.getLexema() + " " + b.getLexema(); :}
	| MENOR:a INTEGER_VALUE:b       {: RESULT = a.getLexema() + " " + b.getLexema(); :}
	| MENOR:a DECIMAL_VALUE:b       {: RESULT = a.getLexema() + " " + b.getLexema(); :}
	| MENOR:a BOOLEAN_VALUE:b       {: RESULT = a.getLexema() + " " + b.getLexema(); :}
	//OPERADORES LOGICOS
	| SIMBOL_OR:a                   {: RESULT = a.getLexema(); :}
	| SIMBOL_AND:a                  {: RESULT = a.getLexema(); :}
	| SIMBOL_NOT:a                  {: RESULT = a.getLexema(); :}
	//OPERADORES MATEMATICOS
	| SIGNO_MAS:a                   {: RESULT = a.getLexema(); :}
	| SIGNO_MIN:a                   {: RESULT = a.getLexema(); :}
	| SIGNO_POR:a                   {: RESULT = a.getLexema(); :}
	| SIGNO_DIV:a                   {: RESULT = a.getLexema(); :}
	//ETIQUETAS HTML
	| C_GCIC:a                      {: RESULT = a.getLexema(); :}
	| C_HEAD:a                      {: RESULT = a.getLexema(); :}
	| C_TITLE:a                     {: RESULT = a.getLexema(); :}
	| C_LINK:a                      {: RESULT = a.getLexema(); :}
	| C_BODY:a                      {: RESULT = a.getLexema(); :}
	| C_SPAM:a                      {: RESULT = a.getLexema(); :}
	| C_INPUT:a                     {: RESULT = a.getLexema(); :}
	| C_TEXTAREA:a                  {: RESULT = a.getLexema(); :}
	| C_SELECT:a                    {: RESULT = a.getLexema(); :}
	| C_OPTION:a                    {: RESULT = a.getLexema(); :}
	| C_DIV:a                       {: RESULT = a.getLexema(); :}
	| C_IMG:a                       {: RESULT = a.getLexema(); :}
	| C_BR:a                        {: RESULT = a.getLexema(); :}
	| C_BUTTON:a                    {: RESULT = a.getLexema(); :}
	| C_H1:a                        {: RESULT = a.getLexema(); :}
	| C_P:a                         {: RESULT = a.getLexema(); :}
	//SCRIPTING
	| C_SCRIPTING:a                 {: RESULT = a.getLexema(); :}
	//PARAMETROS
	| HREF:a                        {: RESULT = a.getLexema(); :}
	| BACKGROUND:a                  {: RESULT = a.getLexema(); :}
	| COLOR:a   C_H1                    {: RESULT = a.getLexema(); :}
	| FONT_SIZE:a                   {: RESULT = a.getLexema(); :}
	| FONT_FAMILY:a                 {: RESULT = a.getLexema(); :}
	| TEXT_ALIGN:a                  {: RESULT = a.getLexema(); :}
	| TYPE:a                        {: RESULT = a.getLexema(); :}
	| ID:a                          {: RESULT = a.getLexema(); :}
	| NAME:a                        {: RESULT = a.getLexema(); :}
	| COLS:a                        {: RESULT = a.getLexema(); :}
	| ROWS:a                        {: RESULT = a.getLexema(); :}
	| CLASS:a                       {: RESULT = a.getLexema(); :}
	| SRC:a                         {: RESULT = a.getLexema(); :}
	| WIDTH:a                       {: RESULT = a.getLexema(); :}
	| HEIGHT:a                      {: RESULT = a.getLexema(); :}
	| ALT:a                         {: RESULT = a.getLexema(); :}
	| ONCLICK:a                     {: RESULT = a.getLexema(); :}
	//PARAMETROS SCRIPTING
	| ON_LOAD:a                     {: RESULT = a.getLexema(); :}
	| PROCESS_ABC:a                 {: RESULT = a.getLexema(); :}
	//TIPO DATOS
  /*| INTEGER:a                     {: RESULT = a.getLexema(); :}
	| DECIMAL:a                     {: RESULT = a.getLexema(); :}
	| BOOLEAN:a                     {: RESULT = a.getLexema(); :}
	| CHAR:a                        {: RESULT = a.getLexema(); :}
	| STRING:a                      {: RESULT = a.getLexema(); :}
	//FUNCIONES ESPECIALES LENGUAJE CLC
	| FUNCTION_ASC:a                {: RESULT = a.getLexema(); :}
	| FUNCTION_DESC:a           	{: RESULT = a.getLexema(); :}
	| FUNCTION_LETPAR_NUM:a     	{: RESULT = a.getLexema(); :}
	| FUNCTION_LETIMPAR_NUM:a   	{: RESULT = a.getLexema(); :}
	| FUNCTION_REVERSE:a        	{: RESULT = a.getLexema(); :}
	| FUNCTION_CARACTER_ALEATORIO:a {: RESULT = a.getLexema(); :}
	| FUNCTION_NUM_ALEATORIO:a      {: RESULT = a.getLexema(); :}
	| FUNCTION_ALERT_INFO:a         {: RESULT = a.getLexema(); :}
	| FUNCTION_EXIT:a               {: RESULT = a.getLexema(); :}	
	//ACCESO A IDENTIFICADORES
	| GET_ELEMEN_BY_ID:a            {: RESULT = a.getLexema(); :}*/
	//BLOQUE INSTRUCCIONES
	| INIT:a                        {: RESULT = a.getLexema(); :}
	| END:a                         {: RESULT = a.getLexema(); :}
	//SENTENCIAS
	| IF:a                          {: RESULT = a.getLexema(); :}
	| ELSE:a                        {: RESULT = a.getLexema(); :}
	| THEN:a                        {: RESULT = a.getLexema(); :}
	//CICLOS
	| REPEAT:a                      {: RESULT = a.getLexema(); :}
	| HUNTIL :a                     {: RESULT = a.getLexema(); :}
	| WHILE:a                       {: RESULT = a.getLexema(); :}
	| THENWHILE:a                   {: RESULT = a.getLexema(); :}
	//INSERT
	| INSERT:a                      {: RESULT = a.getLexema(); :}
	//MODO DECLARACION
	| MODO_GLOBAL:a                 {: RESULT = a.getLexema(); :}
	//DATA VALUES
	| INTEGER_VALUE:a               {: RESULT = a.getLexema(); :}
	| DECIMAL_VALUE:a               {: RESULT = a.getLexema(); :}
	| BOOLEAN_VALUE:a               {: RESULT = a.getLexema(); :}
	//VALORES CON COMILLAS
	| TEXT_VALUE:a                  {: RESULT = a.getLexema(); :}
	| ID_VALUE_STR:a                {: RESULT = a.getLexema(); :}
	| DIGIT_VALUE:a                 {: RESULT = a.getLexema(); :}
	;

/////////////////////////SCRIPTING
etiqueta_scripting ::= etiqueta_apertura_sripting {: scripting += 1; :} bloque_funciones etiqueta_cierre_sripting;
 /////////////////////////APERTURA, DE LA FORMA <C_NOMBRE_ETIQUETA [parametro1 = “valor”] [parametro2 = “valor”] [otro= “valor”] >
etiqueta_apertura_gcic     ::= MENOR C_GCIC     {: etiqueta = "C_GCIC"    ; numeroEtiqueta++; :} bloque_parametros_gcic                            ;// | error {: System.out.println("Error etoqueta gcic"); :}
etiqueta_apertura_head     ::= MENOR C_HEAD     {: etiqueta = "C_HEAD"    ; numeroEtiqueta++; :} /* NO PARAMETROS */        etiqueta_cierre_general; 
etiqueta_apertura_title    ::= MENOR C_TITLE    {: etiqueta = "C_TITLE"   ; numeroEtiqueta++; :} /* NO PARAMETROS */        etiqueta_cierre_general;
etiqueta_apertura_link     ::= MENOR C_LINK     {: etiqueta = "C_LINK"    ; numeroEtiqueta++; :} bloque_parametros_link                            ;
etiqueta_apertura_body     ::= MENOR C_BODY     {: etiqueta = "C_BODY"    ; numeroEtiqueta++; :} bloque_parametros_body                            ;
etiqueta_apertura_spam     ::= MENOR C_SPAM     {: etiqueta = "C_SPAM"    ; numeroEtiqueta++; :} bloque_parametros_label                           ;
etiqueta_apertura_input    ::= MENOR C_INPUT    {: etiqueta = "C_INPUT"   ; numeroEtiqueta++; :} bloque_parametros_input                           ;
etiqueta_apertura_textarea ::= MENOR C_TEXTAREA {: etiqueta = "C_TEXTAREA"; numeroEtiqueta++; :} bloque_parametros_textarea                        ;
etiqueta_apertura_select   ::= MENOR C_SELECT   {: etiqueta = "C_SELECT"  ; numeroEtiqueta++; :} bloque_parametros_label                           ;
etiqueta_apertura_option   ::= MENOR C_OPTION   {: etiqueta = "C_OPTION"  ; numeroEtiqueta++; :} /* NO PARAMETROS */        etiqueta_cierre_general;//| error;
etiqueta_apertura_div      ::= MENOR C_DIV      {: etiqueta = "C_DIV"     ; numeroEtiqueta++; :} bloque_parametros_div                             ;
etiqueta_apertura_img      ::= MENOR C_IMG      {: etiqueta = "C_IMG"     ; numeroEtiqueta++; :} bloque_parametros_img                             ;
etiqueta_apertura_br       ::= MENOR C_BR       {: etiqueta = "C_BR"      ; numeroEtiqueta++; :} /* NO PARAMETROS */        etiqueta_cierre_general;
etiqueta_apertura_button   ::= MENOR C_BUTTON   {: etiqueta = "C_BUTTON"  ; numeroEtiqueta++; :} bloque_parametros_button                          ;
etiqueta_apertura_h1       ::= MENOR C_H1       {: etiqueta = "C_H1"      ; numeroEtiqueta++; :} bloque_parametros_label                           ;
etiqueta_apertura_p        ::= MENOR C_P        {: etiqueta = "C_P"       ; numeroEtiqueta++; :} bloque_parametros_label                           ;
etiqueta_apertura_sripting ::= MENOR C_SCRIPTING /* NO PARAMETROS */       etiqueta_cierre_general;// | error;

etiqueta_cierre_general  ::= MAYOR	
	| error
	| error MAYOR
 	;
/////////////////////////CIERRE, DE LA FORMA </C_NOMBRE_ETIQUETA>
etiqueta_cierre_gcic     ::= MENOR SIGNO_DIV C_GCIC      MAYOR | error;
etiqueta_cierre_head     ::= MENOR SIGNO_DIV C_HEAD      MAYOR ;//| error;
etiqueta_cierre_title    ::= MENOR SIGNO_DIV C_TITLE     MAYOR | error;
etiqueta_cierre_link     ::= MENOR SIGNO_DIV C_LINK      MAYOR | error;
etiqueta_cierre_body     ::= MENOR SIGNO_DIV C_BODY      MAYOR ;//| error;
etiqueta_cierre_spam     ::= MENOR SIGNO_DIV C_SPAM      MAYOR | error;
etiqueta_cierre_input    ::= MENOR SIGNO_DIV C_INPUT     MAYOR | error;
etiqueta_cierre_textarea ::= MENOR SIGNO_DIV C_TEXTAREA  MAYOR | error;
etiqueta_cierre_select   ::= MENOR SIGNO_DIV C_SELECT    MAYOR | error;
etiqueta_cierre_option   ::= MENOR SIGNO_DIV C_OPTION    MAYOR | error;
etiqueta_cierre_div      ::= MENOR SIGNO_DIV C_DIV       MAYOR ;//| error;
etiqueta_cierre_img      ::= MENOR SIGNO_DIV C_IMG       MAYOR | error;
etiqueta_cierre_button   ::= MENOR SIGNO_DIV C_BUTTON    MAYOR | error;
etiqueta_cierre_h1       ::= MENOR SIGNO_DIV C_H1        MAYOR | error;
etiqueta_cierre_p        ::= MENOR SIGNO_DIV C_P         MAYOR | error;
etiqueta_cierre_sripting ::= MENOR SIGNO_DIV C_SCRIPTING MAYOR | error;

//////////////////////////////////////////////////BLOQUE PARAMETROS
bloque_parametros_gcic ::= bloque_parametros_contenido_gcic MAYOR
	| error bloque_parametros_gcic {: System.out.println("Error parametros gcic"); :}
	| error MAYOR
	;

bloque_parametros_link ::= bloque_parametros_contenido_link MAYOR
	| error bloque_parametros_link {: System.out.println("Error parametros link"); :}
	| error MAYOR
	;

bloque_parametros_body ::= bloque_parametros_contenido_body MAYOR
	| error bloque_parametros_body {: System.out.println("Error parametros body"); :}
	| error MAYOR
	;

bloque_parametros_input ::= bloque_parametros_contenido_input MAYOR
	| error bloque_parametros_input {: System.out.println("Error parametros input"); :}
	| error MAYOR
	;

bloque_parametros_textarea ::= bloque_parametros_contenido_textarea MAYOR
	| error bloque_parametros_textarea {: System.out.println("Error parametros textarea"); :}
	| error MAYOR
	;

bloque_parametros_div ::= bloque_parametros_contenido_div MAYOR
	| error bloque_parametros_div {: System.out.println("Error parametros div"); :}
	| error MAYOR
	;

bloque_parametros_img ::= bloque_parametros_contenido_img MAYOR
	| error bloque_parametros_img {: System.out.println("Error parametros img"); :}
	| error MAYOR
	;

bloque_parametros_label ::= bloque_parametros_contenido_label MAYOR
	| error bloque_parametros_label {: System.out.println("Error parametros label"); :}
	| error MAYOR
	;

bloque_parametros_button ::= bloque_parametros_contenido_button MAYOR
	| error bloque_parametros_button {: System.out.println("Error parametros button"); :}
	| error MAYOR
	;


bloque_parametros_contenido_gcic ::= bloque_parametros_contenido_gcic parametros_gcic
	| /* empty */	
	;

bloque_parametros_contenido_link ::= bloque_parametros_contenido_link parametros_link
	| /* empty */	
	;

bloque_parametros_contenido_body ::= bloque_parametros_contenido_body parametros_background
	| /* empty */	
	;

bloque_parametros_contenido_input ::= bloque_parametros_contenido_input parametros_input
	| /* empty */	
	;

bloque_parametros_contenido_textarea ::= bloque_parametros_contenido_textarea parametros_textarea
	| /* empty */	
	;	

bloque_parametros_contenido_div ::= bloque_parametros_contenido_div parametros_div
	| /* empty */	
	;

bloque_parametros_contenido_img ::= bloque_parametros_contenido_img parametros_img
	| /* empty */	
	;

bloque_parametros_contenido_label ::= bloque_parametros_contenido_label parametros_letras
	| /* empty */
	;		

bloque_parametros_contenido_button ::= bloque_parametros_contenido_button parametros_button
	| /* empty */	
	;

//////////////////////////////////////////////////PARAMETROS 	
parametros_gcic ::= parametro_unidad_id
	| parametro_unidad_name
	;
	
parametros_link ::= parametro_unidad_href
	;
	
parametros_input ::= parametro_unidad_type
	| parametros_letras
	;
	
parametros_textarea ::= parametro_unidad_cols
	| parametro_unidad_rows
	| parametros_letras
	;
	
parametros_div ::= parametro_unidad_class
	| parametros_letras
	| parametros_background
	;
		
parametros_img ::= parametro_unidad_src
	| parametro_unidad_width
	| parametro_unidad_height
	| parametro_unidad_alt
	| parametro_unidad_id
	;
	
parametros_letras ::= parametro_unidad_font_size
	| parametro_unidad_font_family
	| parametro_unidad_text_align
	| parametro_unidad_id
	| parametro_unidad_color
	;
	
parametros_button ::= parametro_unidad_onclick
	| parametros_letras
	| parametros_background
	;

parametros_background ::= parametro_unidad_background
	;
	
//////////////////////////////////////////////////PARAMETRO UNIDAD
parametro_unidad_href ::= CORCH_INI 
                            HREF:posicion IGUAL TEXT_VALUE:valor
                          CORCH_FIN
						  	{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "href", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						  		analizarParametroEtiqueta(posicion);
						 	:}
						  	;

parametro_unidad_background ::= CORCH_INI
                                    BACKGROUND:posicion IGUAL parametro_valor_color:valor
                                CORCH_FIN
							{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "background", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						   		analizarParametroEtiqueta(posicion);
						    :}
	;

parametro_unidad_color ::=  CORCH_INI
                                COLOR:posicion IGUAL parametro_valor_color:valor
                            CORCH_FIN           
							{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "color", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						   		analizarParametroEtiqueta(posicion);
						    :}           
	;
    
parametro_unidad_font_size ::=  CORCH_INI
                                    FONT_SIZE:posicion IGUAL parametro_valor_size:valor
                                CORCH_FIN
							{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "font-size", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						    	analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_font_family ::= CORCH_INI
                                    FONT_FAMILY:posicion IGUAL FONT_VALUE:valor
                                CORCH_FIN
							{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "font-family", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						    	analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_text_align ::= CORCH_INI
                                    TEXT_ALIGN:posicion IGUAL ALIGN_VALUE:valor
                                CORCH_FIN
							{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "text-align", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						    	analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_type ::= CORCH_INI
                            TYPE:posicion IGUAL parametro_valor_type:valor
                          CORCH_FIN
						    {:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "type", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_id ::= CORCH_INI
                            ID:posicion IGUAL parametro_valor_id:valor
                        CORCH_FIN
							{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "id", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_name ::= CORCH_INI
                            NAME:posicion IGUAL parametro_valor_name:valor
                          CORCH_FIN
						    {:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "name", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_cols ::= CORCH_INI
                            COLS:posicion IGUAL DIGIT_VALUE:valor
                          CORCH_FIN
						  	{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "cols", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_rows ::= CORCH_INI
                            ROWS:posicion IGUAL DIGIT_VALUE:valor
                          CORCH_FIN
						    {:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "rows", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_class ::= CORCH_INI
                            CLASS:posicion IGUAL parametro_valor_class:valor
                          CORCH_FIN
						    {:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "class", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_src ::=  CORCH_INI 
                            SRC:posicion IGUAL TEXT_VALUE:valor
                          CORCH_FIN
						    {:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "src", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_width ::= CORCH_INI 
                            WIDTH:posicion IGUAL parametro_valor_size:valor
                           CORCH_FIN
						    {:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "width", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_height ::= CORCH_INI 
                                HEIGHT:posicion IGUAL parametro_valor_size:valor
                            CORCH_FIN
							{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "height", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_alt ::= CORCH_INI 
                            ALT:posicion IGUAL parametro_valor_name:valor
                         CORCH_FIN
						 	{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "alt", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

parametro_unidad_onclick ::= CORCH_INI 
                                ONCLICK:posicion IGUAL PROCESS_VAL:valor
                             CORCH_FIN
							{:
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "onclick", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
							:}
	;

//////////////////////////////////////////////////VALORES
parametro_valor_color ::= 
	  COLOR_HEX:a   {: RESULT = a; :}
    | COLOR_VALUE:a {: RESULT = a; :}
    ;

parametro_valor_size ::= 
	  PIXEL_VALUE:a  {: RESULT = a; :}
    | PERCE_VALUE:a  {: RESULT = a; :}
    ;

parametro_valor_type ::= 
      TEXT:a     {: RESULT = a; :}
    | NUMBER:a   {: RESULT = a; :}
    | RADIO:a    {: RESULT = a; :}
    | CHECKBOX:a {: RESULT = a; :}
    ;

parametro_valor_id ::= 
	  COLOR_VALUE:a  {: RESULT = a; :}
    | PIXEL_VALUE:a  {: RESULT = a; :}
    | PERCE_VALUE:a  {: RESULT = a; :}
    | FONT_VALUE:a   {: RESULT = a; :}
    | ALIGN_VALUE:a  {: RESULT = a; :}
    | TEXT:a 		 {: RESULT = a; :}
    | NUMBER:a 		 {: RESULT = a; :}
    | RADIO:a 		 {: RESULT = a; :}
    | CHECKBOX:a	 {: RESULT = a; :}
    | DIGIT_VALUE:a  {: RESULT = a; :}
    | ROW:a 		 {: RESULT = a; :}
    | COLUMN:a 		 {: RESULT = a; :}
    | ID_VALUE_STR:a {: RESULT = a; :}
    ;

parametro_valor_name ::= TEXT_VALUE:a {: RESULT = a; :}
    /* pabras reservadas */
    | parametro_valor_reservado:a {: RESULT = a; :}
    ;

parametro_valor_class ::= 
	  ROW:a     {: RESULT = a; :}
    | COLUMN:a	{: RESULT = a; :}
    ;

parametro_valor_reservado ::= 
	  COLOR_HEX:a   	   {: RESULT = a; :}
    | PROCESS_VAL:a 	   {: RESULT = a; :}
    | parametro_valor_id:a {: RESULT = a; :}
    ;

//////////////////////////////////////////////////SCRIPTING
//FUNCION
bloque_funciones ::= bloque_funciones funcion_unitaria
		{: System.out.println ("Se ejecuto BLOQUE DE FUNCIONES  "); :}
	| /* empty */
	//| bloque_funciones error
	;
funcion_unitaria ::= nombre_funciones funcion_unitaria_simbolos_inicio//PAREN_INI PAREN_FIN CORCH_INI //PROCESS_hola()[
						bloque_instrucciones
					CORCH_FIN // ]
					{: System.out.println ("Se ejecuto FUNCION  "); :}
	//| error {: System.out.println ("Se esperaba ] "); :}
	;
funcion_unitaria_simbolos_inicio ::= PAREN_INI PAREN_FIN CORCH_INI
	| error
	;
nombre_funciones ::= PROCESS_ABC:a {: procedimiento = a.getLexema(); tablaSimbolos.declararNuevoElemento(a.getLexema(), "Procedimiento/Funcion", scripting, a.getLinea(), a.getColumna()); :}
	| ON_LOAD:a					   {: procedimiento = a.getLexema(); tablaSimbolos.declararNuevoElemento(a.getLexema(), "Procedimiento/Funcion", scripting, a.getLinea(), a.getColumna()); :}
	//| error
	;

//BLOQUE INSTRUCCIONES
bloque_instrucciones_sentencias ::= bloque_instrucciones_sentencias_inicio //INIT {::
										bloque_instrucciones 					//BLOQUE DE INSTRUCCIONES
									bloque_instrucciones_sentencias_fin    //::} END
									{: System.out.println ("Se ejecuto BLOQUE DE SENTENCIAS INIT END  "); :}
	| instruccion_general //INSTRUCCION SOLITARIA
	;
bloque_instrucciones_sentencias_inicio ::= INIT LLAVE_INI DOS_PUNTOS
	| error LLAVE_INI DOS_PUNTOS
	| INIT  error DOS_PUNTOS
	| INIT LLAVE_INI error
	| error
	;
bloque_instrucciones_sentencias_fin ::= DOS_PUNTOS LLAVE_FIN END
	| error LLAVE_FIN END
	| DOS_PUNTOS error END
	| DOS_PUNTOS LLAVE_FIN error
	| error
	;
bloque_instrucciones ::= bloque_instrucciones instruccion_general
	| /* empty */ 
	;
instruccion_general ::= instruccion PUNTO_COMA //INSTRUCCION QUE TERMINA EN PUNTO Y COMA
	| bloque_sentencia_if //IF, ELSE IF, ELSE
	| instruccion_ciclos //REPEAT Y WHILE
	//| error
	//| error
	;
instruccion ::= intruccion_declaracion {: System.out.println ("Se ejecuto declaracion  "); :}
	| intruccion_asignacion {: System.out.println ("Se ejecuto asignacion  "); :}
	| instruccion_insert {: System.out.println ("Se ejecuto insert  "); :}
	| funciones_instruccion //instrucciones especiales
	| error
	;
//DECLARACION Y ASIGNACION
intruccion_declaracion ::= tipo_datos:tipo modo_variable:modo nombres_variables:nombres //declaracion del tipo << string @global a, b, c >>
		{:
			//Declaramos
			//scripting y procedimiento deben cambiar al detectar un nuevo procedimiento o bloque de scripting
			String[] nombresVariables = nombres.split(",");//separamos por comas
			//debemos hacer esto con todas las variables declaradas
			for(int i = 0; i < nombresVariables.length; i++){
				tablaSimbolos.declararNuevoElemento(nombresVariables[i], tipo.getLexema(), modo, procedimiento, scripting, tipo.getLinea(), tipo.getColumna(), null);//sin valor
			}

			RESULT = nombresVariables;
		:}
	;
intruccion_asignacion ::= nombres_variables:nombres IGUAL:a asignacion:valor //pueden asignarse    << a, b, c = "hola"; >>
		{:
			String[] nombresVariables = nombres.split(",");//separamos por comas

			for(int i = 0; i < nombresVariables.length; i++){
				tablaSimbolos.asignarValorElemento(nombresVariables[i], procedimiento, scripting, valor, a.getLinea(), a.getColumna());
			}
		:}
	| intruccion_declaracion:nombresVariables IGUAL:a asignacion:valor //pueden asignarse con declaraciones << string a, b, c = "hola"; >>
		{:
			for(int i = 0; i < nombresVariables.length; i++){
				tablaSimbolos.asignarValorElemento(nombresVariables[i], procedimiento, scripting, valor, a.getLinea(), a.getColumna());
			}
		:}
	//| error
	;
asignacion ::= 
	  //VALORES
      operacion_aritmetica_con_parentesis:valor {: RESULT = valor; :} //operacion aritmetica, entre variables, o valores primitivos
	;
	
valores_datos_primarios ::= INTEGER_VALUE:a //tipo: integer, valor: "" + a.getLexema()
		{:
			ValorElemento valorElementoAux;
			String tipo = "integer";
			String valor = "" + a.getLexema();

			valorElementoAux = new ValorElemento(valor, tipo);
			RESULT = valorElementoAux;
		:}
	| DECIMAL_VALUE:a //tipo: decimal, valor: "" + a.getLexema() ; 
		{:
			ValorElemento valorElementoAux;
			String tipo = "decimal";
			String valor = "" + a.getLexema();

			valorElementoAux = new ValorElemento(valor, tipo);
			RESULT = valorElementoAux;
		:}
	| BOOLEAN_VALUE:a //tipo: boolean, valor: "\"" + a.getLexema() +"\"" 
		{:
			ValorElemento valorElementoAux;
			String tipo = "boolean";
			String valor = "" + a.getLexema();

			valorElementoAux = new ValorElemento(valor, tipo);
			RESULT = valorElementoAux;
		:}
	| CHARACT_VALUE:a //tipo: char, valor: "" + a.getLexema()
		{:
			ValorElemento valorElementoAux;
			String tipo = "char";
			String valor = "" + a.getLexema();

			valorElementoAux = new ValorElemento(valor, tipo);
			RESULT = valorElementoAux;
		:}
	| parametro_valor_name:a //tipo, valor: a , Cualquier cadena de carateres encerradas entre << " " >>
		{:
			ValorElemento valorElementoAux;
			String tipo = "string";
			String valor = "" + a.getLexema();//este ya tendria que ser string

			valorElementoAux = new ValorElemento(valor, tipo);
			RESULT = valorElementoAux;
		:}
	| get_element_value:a //tipo: string, valor: a,  para strings solamente
		{:
			ValorElemento valorElementoAux;
			String tipo = "string";
			String valor = "" + a;//este ya tendria que ser string

			valorElementoAux = new ValorElemento(valor, tipo);
			RESULT = valorElementoAux;
		:}
	| nombres_variables_unidad:identificador //tipo, valor: tablaSimbolos.buscarValorElementoPorId(), variable << string a = b; >> donde b es un string
		{:
			ValorElemento valorElementoAux = tablaSimbolos.buscarValorElementoPorId(identificador, procedimiento, scripting);
			RESULT = valorElementoAux;
		:}	
	| funciones_con_valor:valorElementoAux //tipo, valor: a (va a ser un valor elmento) ,funciones especiales que retornan un dato
		{:
			RESULT = valorElementoAux;
		:}
	//| error
	;

tipo_datos ::= STRING:a {: RESULT = a; :}
	| INTEGER:a		    {: RESULT = a; :}
	| DECIMAL:a		    {: RESULT = a; :}
	| CHAR:a			{: RESULT = a; :}
	| BOOLEAN:a		    {: RESULT = a; :}
	//| error //sentencias inicio
	;	
nombres_variables ::= nombres_variables:nombres COMA nombres_variables_unidad:nombre
		{: 
			RESULT = nombres+","+nombre; 
		:}
	| nombres_variables_unidad:nombre 
		{: 
			RESULT = ""+nombre; 
		:}
	| nombres_variables error nombres_variables_unidad //?
	;
nombres_variables_unidad ::= 
	  ID_VALUE:a 	{: RESULT = a.getLexema(); :}
	//ETIQUETAS HTML
	| C_GCIC:a 		{: RESULT = a.getLexema(); :}
	| C_HEAD:a 		{: RESULT = a.getLexema(); :}
	| C_TITLE:a		{: RESULT = a.getLexema(); :}
	| C_LINK:a 		{: RESULT = a.getLexema(); :}
	| C_BODY:a 		{: RESULT = a.getLexema(); :}
	| C_SPAM:a 		{: RESULT = a.getLexema(); :}
	| C_INPUT:a 	{: RESULT = a.getLexema(); :}
	| C_TEXTAREA:a 	{: RESULT = a.getLexema(); :}
	| C_SELECT:a 	{: RESULT = a.getLexema(); :}
	| C_OPTION:a 	{: RESULT = a.getLexema(); :}
	| C_DIV:a 		{: RESULT = a.getLexema(); :}
	| C_IMG:a 		{: RESULT = a.getLexema(); :}
	| C_BR:a 		{: RESULT = a.getLexema(); :}
	| C_BUTTON:a 	{: RESULT = a.getLexema(); :}
	| C_H1:a 		{: RESULT = a.getLexema(); :}
	| C_P:a 		{: RESULT = a.getLexema(); :}
	//SCRIPTING
	| C_SCRIPTING:a {: RESULT = a.getLexema(); :}
	//PARAMETROS
	| HREF:a 		{: RESULT = a.getLexema(); :}
	| BACKGROUND:a  {: RESULT = a.getLexema(); :}
	| COLOR:a 		{: RESULT = a.getLexema(); :}
	| FONT_SIZE:a 	{: RESULT = a.getLexema(); :}
	| FONT_FAMILY:a {: RESULT = a.getLexema(); :}
	| TEXT_ALIGN:a 	{: RESULT = a.getLexema(); :}
	| TYPE:a 		{: RESULT = a.getLexema(); :}
	| ID:a 			{: RESULT = a.getLexema(); :}
	| NAME:a 		{: RESULT = a.getLexema(); :}
	| COLS:a 		{: RESULT = a.getLexema(); :}
	| ROWS:a 		{: RESULT = a.getLexema(); :}
	| CLASS:a 		{: RESULT = a.getLexema(); :}
	| SRC:a 		{: RESULT = a.getLexema(); :}
	| WIDTH:a 		{: RESULT = a.getLexema(); :}
	| HEIGHT:a 		{: RESULT = a.getLexema(); :}
	| ALT:a 		{: RESULT = a.getLexema(); :}
	| ONCLICK:a 	{: RESULT = a.getLexema(); :}
	//| error //datos primarios
	;

//MODO
modo_variable ::= MODO_GLOBAL {: RESULT = "@global"; :}//@global
	| error
	| /* empty */  		      {: RESULT = "-"; :}//no global
	;
//IF, ELSE IF, ELSE
bloque_sentencia_if ::= bloque_if //comparacion_else //bloque con else
		{: System.out.println ("Se ejecuto BLOQUE IF CON ELSE/sin  "); :}
		/*
			IF
				...
			ELSE IF
				...
			ELSE IF
				...
			ELSE
		*/
	/*| bloque_if  //bloque sin else
		{: System.out.println ("Se ejecuto BLOQUE IF SIN ELSE  "); :}
		/*
			IF
				...
			ELSE IF
				...
			ELSE IF
				...
		*/
	;
bloque_if ::= comparacion_if bloque_if_elses comparacion_else//bloque sin else
		{: System.out.println ("Se ejecuto BLOQUE IF ELSES  "); :}
	//| error
	;
bloque_if_elses ::= bloque_if_elses comparacion_else_if //bloques de else if
	| /* empty */
	;
comparacion_if ::= IF condicion THEN bloque_instrucciones_sentencias  //IF (condicion) .... 
		{: System.out.println ("-------------------Se ejecuto IF  "); :}
	//| error
	| IF condicion error bloque_instrucciones_sentencias
	| IF error     THEN bloque_instrucciones_sentencias
	| IF error 	bloque_instrucciones_sentencias
	;
comparacion_else_if ::= ELSE_IF condicion THEN bloque_instrucciones_sentencias //comparacion_if  //ELSE IF ......
		{: System.out.println ("-------------------Se ejecuto ELSE IF  "); :}
	//| error
	| ELSE_IF condicion error bloque_instrucciones_sentencias
	| ELSE_IF error     THEN bloque_instrucciones_sentencias
	| ELSE_IF error bloque_instrucciones_sentencias
	;
comparacion_else ::= ELSE bloque_instrucciones_sentencias // ELSE ...
		{: System.out.println ("-------------------Se ejecuto ELSE  "); :}
	| /* empty */
	;
/*
paren_ini_error ::= PAREN_INI
	| error
	;
*/
//REPEAT AND WHILE
instruccion_ciclos ::= ciclo_repeat
	| ciclo_while
	//| error
	;
ciclo_repeat ::= ciclo_repeat_declaracion bloque_instrucciones_sentencias {: System.out.println ("Se ejecuto ciclo repeat  "); :}
	| REPEAT error bloque_instrucciones_sentencias
	;
ciclo_while ::= WHILE condicion THENWHILE bloque_instrucciones_sentencias {: System.out.println ("Se ejecuto ciclo while  "); :}
	| WHILE error bloque_instrucciones_sentencias
	| WHILE condicion error bloque_instrucciones_sentencias
	;

ciclo_repeat_declaracion ::= REPEAT condicion_repeat_inicio HUNTIL PAREN_INI condicion_repeat_fin PAREN_FIN	
	| REPEAT error HUNTIL PAREN_INI condicion_repeat_fin PAREN_FIN
	| REPEAT error PAREN_INI condicion_repeat_fin PAREN_FIN
	| REPEAT condicion_repeat_inicio error PAREN_INI condicion_repeat_fin PAREN_FIN	
	| REPEAT condicion_repeat_inicio HUNTIL error PAREN_FIN
	| REPEAT condicion_repeat_inicio HUNTIL PAREN_INI condicion_repeat_fin error
	//| error
	;
condicion_repeat_inicio ::= PAREN_INI intruccion_asignacion PAREN_FIN {: System.out.println ("Se ejecuto condicion inicio repeat  "); :}
	| error intruccion_asignacion PAREN_FIN
	| PAREN_INI intruccion_asignacion error 
	;
condicion_repeat_fin ::= //INTEGER_VALUE
	//| nombres_variables_unidad
	/*|*/ operacion_aritmetica_con_parentesis
	;
//INSERT
instruccion_insert ::= INSERT PAREN_INI valores_insert_token PAREN_FIN {: System.out.println ("Se INSERT  "); :}
	//| error// intruccion_asignacion
	;

valores_insert_token ::= valores_insert_token COMA valores_insert_token_unidad
	//| /* empty, generamos un '' */
	| valores_insert_token_unidad
	| error 
	;

valores_insert_token_unidad ::= INSERT_TOKEN_VALUE //cualquier otra cadena encerrada entre ''
	| ID_VALUE_CHAR	//id encerrado entre ''
	| CHARACT_VALUE	//caracter
	| nombres_variables_unidad //variables aceptadas
	//| error // error tipo dato
	;

//GET ELEMENT
get_element_value ::= GET_ELEMEN_BY_ID PAREN_INI get_element_value_id:identificador PAREN_FIN 
		{:
			System.out.println ("Se ejecuto get element byId  "); 
			//obtenemos el valor
			RESULT = identificador;
		:}
	//| error //nombre var unidad o tipo dato
	;
get_element_value_id ::= ID_VALUE_CHAR:a {: RESULT = a.getLexema(); :}
	| CHARACT_VALUE:a {: RESULT = a.getLexema(); :}
	| error
	;

//CONDICION Retorna true or false
condicion ::=// operacion_logica
	/*|*/ PAREN_INI operacion_logica PAREN_FIN
	| error operacion_logica PAREN_FIN
	| PAREN_INI operacion_logica error
	//| error; //se verifica en nombre variable unidad
	;
//OPERACIONES
operacion_logica ::= 
	  operacion_logica:valor1 SIMBOL_AND:a operacion_logica:valor2 
	  	{: 
		  	System.out.println ("Se ejecuto AND"); 
			ValorElemento valorElementoAux = operacionLogica.realizarOperacionLogica(valor1, valor2, "AND");	
			analizarResultadoOperacionLogico(a);	
			RESULT = valorElementoAux;
		:}
    | operacion_logica:valor1 SIMBOL_OR:a  operacion_logica:valor2 
		{: 
			System.out.println ("Se ejecuto OR"); 
			ValorElemento valorElementoAux = operacionLogica.realizarOperacionLogica(valor1, valor2, "OR");	
			analizarResultadoOperacionLogico(a);	
			RESULT = valorElementoAux;
		:}
    | SIMBOL_NOT:a operacion_logica:valor1 
		{: 
			System.out.println ("Se ejecuto NOT");	
			ValorElemento valorElementoAux = operacionLogica.realizarOperacionLogica(valor1);//mandamos un solo param	
			analizarResultadoOperacionLogico(a);	
			RESULT = valorElementoAux;
		:}
	| operacion_relacional:valor1
		{: 
			System.out.println ("Valor"); 
			RESULT = valor1;
		:}
    | PAREN_INI operacion_logica:valor1
    	{: 
			System.out.println(" ( )"); 
			RESULT = valor1;
		:}	
	PAREN_FIN	
    ;
//El valor que envian las operaciones racionales deben ser verdadero/falso
operacion_relacional::= 
	  operacion_relacional:valor1 MAYOR:a       operacion_relacional:valor2 
	  	{: 
			System.out.println ("Se ejecuto >  "); 
			ValorElemento valorElementoAux = operacionRelacional.realizarOperacionRelacional(valor1, valor2, "MAYOR");	
			analizarResultadoOperacionRelacional(a);	
			RESULT = valorElementoAux;
		:}
    | operacion_relacional:valor1 MENOR:a       operacion_relacional:valor2
		{: 
			System.out.println ("Se ejecuto <  "); 
			ValorElemento valorElementoAux = operacionRelacional.realizarOperacionRelacional(valor1, valor2, "MENOR");	
			analizarResultadoOperacionRelacional(a);	
			RESULT = valorElementoAux;
		:}
    | operacion_relacional:valor1 MAYOR_IGUAL:a operacion_relacional:valor2 
		{: 
			System.out.println ("Se ejecuto >= "); 
			ValorElemento valorElementoAux = operacionRelacional.realizarOperacionRelacional(valor1, valor2, "MAYOR_IGUAL");	
			analizarResultadoOperacionRelacional(a);	
			RESULT = valorElementoAux;
		:}
    | operacion_relacional:valor1 MENOR_IGUAL:a operacion_relacional:valor2 
		{: 
			System.out.println ("Se ejecuto <= "); 
			ValorElemento valorElementoAux = operacionRelacional.realizarOperacionRelacional(valor1, valor2, "MENOR_IGUAL");	
			analizarResultadoOperacionRelacional(a);	
			RESULT = valorElementoAux;
		:}
    | operacion_relacional:valor1 NO_IGUAL:a    operacion_relacional:valor2 
		{: 
			System.out.println ("Se ejecuto != "); 
			ValorElemento valorElementoAux = operacionRelacional.realizarOperacionRelacional(valor1, valor2, "NO_IGUAL");	
			analizarResultadoOperacionRelacional(a);	
			RESULT = valorElementoAux;
		:} 
    | operacion_relacional:valor1 IGUAL_IGUAL:a operacion_relacional:valor2 
		{: 
			System.out.println ("Se ejecuto =  "); 
			ValorElemento valorElementoAux = operacionRelacional.realizarOperacionRelacional(valor1, valor2, "IGUAL_IGUAL");	
			analizarResultadoOperacionRelacional(a);	
			RESULT = valorElementoAux;
		:} 
	| operacion_aritmetica:valor1                                  
		{: 
			System.out.println ("Valor/variable"); 
			RESULT = valor1;
		:} 
  //| error                                                 {: System.out.println ("Error op. rel."); :}
    ;
operacion_aritmetica ::= operacion_aritmetica:valor1 SIGNO_MAS:a operacion_aritmetica:valor2 
	{: 
		System.out.println(" + "); 	
		ValorElemento valorElementoAux = operacionAritmetica.realizarOperacionAritmetica(valor1, valor2, "suma");	
		analizarResultadoOperacionAritmetica(a);	
		RESULT = valorElementoAux;
	:}		
    | operacion_aritmetica:valor1 SIGNO_MIN:a operacion_aritmetica:valor2
    {: 
		System.out.println(" - "); 	
		ValorElemento valorElementoAux = operacionAritmetica.realizarOperacionAritmetica(valor1, valor2, "resta");	
		analizarResultadoOperacionAritmetica(a);		
		RESULT = valorElementoAux;
	:}
    | operacion_aritmetica:valor1 SIGNO_POR:a operacion_aritmetica:valor2
    {: 
		System.out.println(" * "); 	
		ValorElemento valorElementoAux = operacionAritmetica.realizarOperacionAritmetica(valor1, valor2, "multiplicacion");	
		analizarResultadoOperacionAritmetica(a);
		RESULT = valorElementoAux;
	:}
    | operacion_aritmetica:valor1 SIGNO_DIV:a operacion_aritmetica:valor2
    {: 
		System.out.println(" / "); 	
		ValorElemento valorElementoAux = operacionAritmetica.realizarOperacionAritmetica(valor1, valor2, "division");	
		analizarResultadoOperacionAritmetica(a);
		RESULT = valorElementoAux;
	:}
    | valores_datos_primarios:valorElementoAux
    {: 
		System.out.println ("Valor/variable");
		RESULT = valorElementoAux;	
	:}
    | SIGNO_MIN operacion_aritmetica:valorElementoAux
    {: 
		System.out.println(" Entero negativo "); 
		//temporal
		RESULT = valorElementoAux;
	:}	
    ;  

operacion_aritmetica_con_parentesis ::= operacion_aritmetica_con_parentesis:valor1 SIGNO_MAS:a operacion_aritmetica_con_parentesis:valor2
	{: 
		System.out.println(" + "); 	
		ValorElemento valorElementoAux = operacionAritmetica.realizarOperacionAritmetica(valor1, valor2, "suma");	
		analizarResultadoOperacionAritmetica(a);	
		RESULT = valorElementoAux;
	:}	
    | operacion_aritmetica_con_parentesis:valor1 SIGNO_MIN:a operacion_aritmetica_con_parentesis:valor2
    {: 
		System.out.println(" - "); 	
		ValorElemento valorElementoAux = operacionAritmetica.realizarOperacionAritmetica(valor1, valor2, "resta");	
		analizarResultadoOperacionAritmetica(a);		
		RESULT = valorElementoAux;
	:}
    | operacion_aritmetica_con_parentesis:valor1 SIGNO_POR:a operacion_aritmetica_con_parentesis:valor2
    {: 
		System.out.println(" * "); 	
		ValorElemento valorElementoAux = operacionAritmetica.realizarOperacionAritmetica(valor1, valor2, "multiplicacion");	
		analizarResultadoOperacionAritmetica(a);
		RESULT = valorElementoAux;
	:}
    | operacion_aritmetica_con_parentesis:valor1 SIGNO_DIV:a operacion_aritmetica_con_parentesis:valor2
    {: 
		System.out.println(" / "); 	
		ValorElemento valorElementoAux = operacionAritmetica.realizarOperacionAritmetica(valor1, valor2, "division");	
		analizarResultadoOperacionAritmetica(a);
		RESULT = valorElementoAux;
	:}
    | valores_datos_primarios:valorElementoAux
    {: 
		System.out.println ("Valor/variable");	
		RESULT = valorElementoAux;
	:}
    | SIGNO_MIN operacion_aritmetica_con_parentesis:n1
    {: 
		System.out.println(" Entero negativo "); 
	:}	
	| PAREN_INI operacion_aritmetica_con_parentesis:valorElementoAux
    {: 
		System.out.println(" ( )"); 	
		RESULT = valorElementoAux;
	:}
	PAREN_FIN
	| error //datos primarios
    ;    

//FUNCIONES ESPECIALES
//aceptamos variables, y operaciones aritmeticas, semanticamente los resultados deben ser del tipo correcto
funciones_con_valor ::= funciones_con_valor_tipo funciones_con_valor_parametros
	| FUNCTION_CARACTER_ALEATORIO PAREN_INI PAREN_FIN {: System.out.println ("Se ejecuto CHAR ALEATORIO "); :}
	| FUNCTION_NUM_ALEATORIO PAREN_INI PAREN_FIN {: System.out.println ("Se ejecuto NUM ALEATORIO "); :}
	//| error
	;
funciones_con_valor_tipo ::= FUNCTION_ASC {: System.out.println ("Se ejecuto FUN ASC "); :}
	| FUNCTION_DESC {: System.out.println ("Se ejecuto FUN DESC "); :}
	| FUNCTION_LETPAR_NUM {: System.out.println ("Se ejecuto FUN LET NUM PAR "); :}
	| FUNCTION_LETIMPAR_NUM {: System.out.println ("Se ejecuto FUN LET NUM IMPAR "); :}
	| FUNCTION_REVERSE	 {: System.out.println ("Se ejecuto FUN REVERSE "); :}
	//| error
	;
funciones_con_valor_parametros ::= PAREN_INI operacion_aritmetica_con_parentesis PAREN_FIN
	| error
	;

funciones_instruccion ::= FUNCTION_ALERT_INFO funciones_con_valor_parametros {: System.out.println ("Se ejecuto FUN ALERT "); :}
	| FUNCTION_EXIT PAREN_INI PAREN_FIN {: System.out.println ("Se ejecuto FUN EXIT "); :} 
	;
