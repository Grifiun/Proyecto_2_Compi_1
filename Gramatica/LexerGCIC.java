/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package gramatica_gcic;
import java_cup.runtime.*;
import static gramatica_gcic.sym.*;
import clasesDAO.Token;
import clasesDAO.TokenError;
import java.util.ArrayList;

/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex_gcic.jflex</tt>
 */
public class LexerGCIC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\17\3\1\1\17\2\1\22\17\1\56\1\20\1\114\1\120\1\125"+
    "\1\2\1\22\1\126\1\10\1\11\1\25\1\23\1\14\1\24\1\130"+
    "\1\26\1\121\1\55\10\123\1\16\1\15\1\4\1\3\1\5\1\113"+
    "\1\112\1\35\1\43\1\27\1\36\1\34\1\110\1\31\1\33\1\32"+
    "\1\106\1\42\1\40\1\50\1\41\1\44\1\47\1\106\1\53\1\46"+
    "\1\37\1\51\1\107\1\111\1\52\1\45\1\106\1\6\1\113\1\7"+
    "\1\113\1\30\1\113\1\64\1\63\1\65\1\73\1\61\1\62\1\67"+
    "\1\57\1\77\1\124\1\66\1\74\1\101\1\72\1\70\1\104\1\122"+
    "\1\60\1\76\1\75\1\71\1\54\1\105\1\103\1\102\1\100\1\12"+
    "\1\21\1\13\1\113\143\0\1\115\160\0\1\117\u0188\0\1\127\u1dcf\0"+
    "\1\116\165\0\1\127\udeda\0\1\117\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\22\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\1\1\21\1\22\1\23\1\24\15\25\1\26"+
    "\17\25\2\27\2\1\1\26\1\1\1\0\1\30\1\0"+
    "\1\31\2\0\1\32\1\0\1\33\2\0\1\34\1\0"+
    "\1\35\3\25\1\36\15\25\1\27\25\25\1\37\2\25"+
    "\1\27\45\0\1\40\11\25\1\41\5\25\1\42\2\25"+
    "\1\43\10\25\1\44\7\25\1\45\12\25\1\46\4\25"+
    "\1\27\1\47\2\0\1\50\12\0\1\51\34\0\1\52"+
    "\1\0\1\53\2\0\1\54\1\0\4\25\2\55\6\25"+
    "\1\56\5\25\1\57\2\25\1\60\1\61\1\25\1\62"+
    "\1\63\7\25\1\44\1\64\1\25\1\65\3\25\1\66"+
    "\1\25\1\67\3\25\1\70\1\25\1\71\1\25\1\72"+
    "\4\25\1\27\10\0\1\73\33\0\1\74\6\0\2\25"+
    "\1\75\1\25\1\76\14\25\1\0\12\25\1\44\1\25"+
    "\1\0\2\25\1\77\1\100\3\25\1\0\2\25\1\101"+
    "\1\102\1\27\7\0\1\103\2\0\1\104\3\0\1\105"+
    "\21\0\1\106\1\25\1\107\2\25\1\110\1\111\4\25"+
    "\1\112\1\25\1\113\1\114\1\0\1\115\7\25\1\116"+
    "\1\25\1\44\1\117\2\0\5\25\1\0\1\120\1\25"+
    "\1\27\20\0\1\121\2\0\1\122\5\0\1\123\1\124"+
    "\6\25\1\115\5\25\1\125\1\25\1\126\2\0\1\25"+
    "\1\127\1\25\1\130\1\131\1\0\1\132\1\133\2\0"+
    "\1\134\4\0\1\135\7\0\1\136\1\25\1\137\1\140"+
    "\1\25\1\141\7\25\2\0\2\25\7\0\1\142\2\0"+
    "\1\143\1\0\4\25\1\144\3\25\1\145\1\0\1\146"+
    "\2\25\6\0\1\147\2\25\1\150\1\25\1\151\1\25"+
    "\1\0\1\152\1\25\1\153\3\0\1\154\1\0\1\155"+
    "\3\25\1\156\1\25\3\0\1\25\1\157\2\25\1\0"+
    "\1\25\1\160\1\161\1\162\1\0\1\25\1\0\3\25"+
    "\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\131\0\131\0\131\0\262\0\u010b\0\u0164\0\131"+
    "\0\131\0\131\0\131\0\131\0\131\0\131\0\131\0\131"+
    "\0\u01bd\0\u0216\0\u026f\0\131\0\131\0\131\0\131\0\u02c8"+
    "\0\u0321\0\u037a\0\u03d3\0\u042c\0\u0485\0\u04de\0\u0537\0\u0590"+
    "\0\u05e9\0\u0642\0\u069b\0\u06f4\0\u074d\0\u07a6\0\u07ff\0\u0858"+
    "\0\u08b1\0\u090a\0\u0963\0\u09bc\0\u0a15\0\u0a6e\0\u0ac7\0\u0b20"+
    "\0\u0b79\0\u0bd2\0\u0c2b\0\u0c84\0\u0cdd\0\u0d36\0\u0d8f\0\u0de8"+
    "\0\u0e41\0\u0e9a\0\262\0\131\0\u0ef3\0\131\0\u0f4c\0\u0164"+
    "\0\131\0\u0fa5\0\131\0\u0ffe\0\u0216\0\131\0\u026f\0\131"+
    "\0\u1057\0\u10b0\0\u1109\0\u0321\0\u1162\0\u11bb\0\u1214\0\u126d"+
    "\0\u12c6\0\u131f\0\u1378\0\u13d1\0\u142a\0\u1483\0\u14dc\0\u1535"+
    "\0\u158e\0\u15e7\0\u1640\0\u1699\0\u16f2\0\u174b\0\u17a4\0\u17fd"+
    "\0\u1856\0\u18af\0\u1908\0\u1961\0\u19ba\0\u1a13\0\u1a6c\0\u1ac5"+
    "\0\u1b1e\0\u1b77\0\u1bd0\0\u1c29\0\u1c82\0\u1cdb\0\u1d34\0\u0321"+
    "\0\u1d8d\0\u1de6\0\u1e3f\0\u1e98\0\u1ef1\0\u1f4a\0\u1fa3\0\u1ffc"+
    "\0\u2055\0\u20ae\0\u2107\0\u2160\0\u21b9\0\u2212\0\u226b\0\u22c4"+
    "\0\u231d\0\u2376\0\u23cf\0\u2428\0\u2481\0\u24da\0\u2533\0\u258c"+
    "\0\u25e5\0\u263e\0\u2697\0\u26f0\0\u2749\0\u27a2\0\u27fb\0\u2854"+
    "\0\u28ad\0\u2906\0\u295f\0\u29b8\0\u2a11\0\u2a6a\0\u2ac3\0\u2b1c"+
    "\0\u0ffe\0\u2b75\0\u2bce\0\u2c27\0\u2c80\0\u2cd9\0\u2d32\0\u2d8b"+
    "\0\u2de4\0\u2e3d\0\u0321\0\u2e96\0\u2eef\0\u2f48\0\u2fa1\0\u2ffa"+
    "\0\u0321\0\u3053\0\u30ac\0\u0321\0\u3105\0\u315e\0\u31b7\0\u3210"+
    "\0\u3269\0\u32c2\0\u331b\0\u3374\0\u33cd\0\u3426\0\u347f\0\u34d8"+
    "\0\u3531\0\u358a\0\u35e3\0\u363c\0\u0321\0\u3695\0\u36ee\0\u3747"+
    "\0\u37a0\0\u37f9\0\u3852\0\u38ab\0\u3904\0\u395d\0\u39b6\0\u0321"+
    "\0\u3a0f\0\u3a68\0\u3ac1\0\u3b1a\0\u3b73\0\131\0\u3bcc\0\u3c25"+
    "\0\131\0\u3c7e\0\u3cd7\0\u3d30\0\u3d89\0\u3de2\0\u3e3b\0\u3e94"+
    "\0\u3eed\0\u3f46\0\u3f9f\0\131\0\u3ff8\0\u4051\0\u40aa\0\u4103"+
    "\0\u415c\0\u41b5\0\u420e\0\u4267\0\u42c0\0\u4319\0\u4372\0\u43cb"+
    "\0\u4424\0\u447d\0\u44d6\0\u452f\0\u4588\0\u45e1\0\u463a\0\u4693"+
    "\0\u46ec\0\u4745\0\u479e\0\u47f7\0\u4850\0\u0d8f\0\u0e9a\0\u48a9"+
    "\0\131\0\u4902\0\131\0\u495b\0\u49b4\0\131\0\u4a0d\0\u4a66"+
    "\0\u4abf\0\u4b18\0\u4b71\0\u0321\0\131\0\u4bca\0\u4c23\0\u4c7c"+
    "\0\u4cd5\0\u4d2e\0\u4d87\0\u0321\0\u4de0\0\u4e39\0\u4e92\0\u4eeb"+
    "\0\u4f44\0\u0321\0\u4f9d\0\u4ff6\0\u504f\0\u0321\0\u50a8\0\u0321"+
    "\0\u5101\0\u515a\0\u51b3\0\u520c\0\u5265\0\u52be\0\u5317\0\u5370"+
    "\0\u53c9\0\u0321\0\u5422\0\u0321\0\u547b\0\u54d4\0\u552d\0\u0321"+
    "\0\u5586\0\u0321\0\u55df\0\u5638\0\u5691\0\u0321\0\u56ea\0\u0321"+
    "\0\u5743\0\u0321\0\u579c\0\u57f5\0\u584e\0\u58a7\0\u5900\0\u5959"+
    "\0\u59b2\0\u5a0b\0\u5a64\0\u5abd\0\u5b16\0\u5b6f\0\u5bc8\0\131"+
    "\0\u5c21\0\u5c7a\0\u5cd3\0\u5d2c\0\u5d85\0\u5dde\0\u5e37\0\u5e90"+
    "\0\u5ee9\0\u5f42\0\u5f9b\0\u5ff4\0\u604d\0\u60a6\0\u60ff\0\u6158"+
    "\0\u61b1\0\u620a\0\u6263\0\u62bc\0\u6315\0\u636e\0\u63c7\0\u6420"+
    "\0\u6479\0\u64d2\0\u652b\0\131\0\u6584\0\u65dd\0\u6636\0\u668f"+
    "\0\u66e8\0\u6741\0\u679a\0\u67f3\0\u0321\0\u684c\0\u0321\0\u68a5"+
    "\0\u68fe\0\u6957\0\u69b0\0\u6a09\0\u6a62\0\u6abb\0\u6b14\0\u6b6d"+
    "\0\u6bc6\0\u6c1f\0\u6c78\0\u6cd1\0\u6d2a\0\u6d83\0\u6ddc\0\u6e35"+
    "\0\u6e8e\0\u6ee7\0\u6f40\0\u6f99\0\u6ff2\0\u704b\0\u70a4\0\u70fd"+
    "\0\u7156\0\u71af\0\u7208\0\u0321\0\u0321\0\u7261\0\u72ba\0\u7313"+
    "\0\u736c\0\u73c5\0\u741e\0\u0321\0\u0321\0\u7477\0\u74d0\0\u7529"+
    "\0\u7582\0\u75db\0\u7634\0\u768d\0\u76e6\0\131\0\u773f\0\u7798"+
    "\0\131\0\u77f1\0\u784a\0\u78a3\0\131\0\u78fc\0\u7955\0\u79ae"+
    "\0\u7a07\0\u7a60\0\u7ab9\0\u7b12\0\u7b6b\0\u7bc4\0\u7c1d\0\u7c76"+
    "\0\u7ccf\0\u7d28\0\u7d81\0\u7dda\0\u7e33\0\u7e8c\0\u0321\0\u7ee5"+
    "\0\u0321\0\u7f3e\0\u7f97\0\u0321\0\u0321\0\u7ff0\0\u8049\0\u80a2"+
    "\0\u80fb\0\u0321\0\u8154\0\u0321\0\u0321\0\u81ad\0\u0321\0\u8206"+
    "\0\u825f\0\u82b8\0\u8311\0\u836a\0\u83c3\0\u841c\0\u0321\0\u8475"+
    "\0\u0d36\0\u0321\0\u84ce\0\u8527\0\u8580\0\u85d9\0\u8632\0\u868b"+
    "\0\u86e4\0\u873d\0\u0321\0\u8796\0\u87ef\0\u8848\0\u88a1\0\u88fa"+
    "\0\u8953\0\u89ac\0\u8a05\0\u8a5e\0\u8ab7\0\u8b10\0\u8b69\0\u8bc2"+
    "\0\u8c1b\0\u8c74\0\u8ccd\0\u8d26\0\u8d7f\0\131\0\u8dd8\0\u8e31"+
    "\0\131\0\u8e8a\0\u8ee3\0\u8f3c\0\u8f95\0\u8fee\0\u0321\0\u0321"+
    "\0\u9047\0\u90a0\0\u90f9\0\u9152\0\u91ab\0\u9204\0\131\0\u925d"+
    "\0\u92b6\0\u930f\0\u9368\0\u93c1\0\u0321\0\u941a\0\u0321\0\u9473"+
    "\0\u94cc\0\u9525\0\u0321\0\u957e\0\u0321\0\u0321\0\u95d7\0\u0321"+
    "\0\u0d36\0\u9630\0\u9689\0\131\0\u96e2\0\u973b\0\u9794\0\u97ed"+
    "\0\131\0\u9846\0\u989f\0\u98f8\0\u9951\0\u99aa\0\u9a03\0\u9a5c"+
    "\0\u6741\0\u9ab5\0\u0321\0\u0321\0\u9b0e\0\u0321\0\u9b67\0\u9bc0"+
    "\0\u9c19\0\u9c72\0\u9ccb\0\u9d24\0\u9d7d\0\u9dd6\0\u9e2f\0\u9e88"+
    "\0\u9ee1\0\u9f3a\0\u9f93\0\u9fec\0\ua045\0\ua09e\0\ua0f7\0\ua150"+
    "\0\131\0\ua1a9\0\ua202\0\131\0\ua25b\0\ua2b4\0\ua30d\0\ua366"+
    "\0\ua3bf\0\u0321\0\ua418\0\ua471\0\ua4ca\0\u9d7d\0\ua523\0\131"+
    "\0\ua57c\0\ua5d5\0\ua62e\0\ua687\0\ua6e0\0\ua739\0\ua792\0\ua7eb"+
    "\0\u0321\0\ua844\0\ua89d\0\u0321\0\ua8f6\0\u0321\0\ua94f\0\ua9a8"+
    "\0\u0321\0\uaa01\0\131\0\uaa5a\0\uaab3\0\uab0c\0\131\0\uab65"+
    "\0\u0321\0\uabbe\0\uac17\0\uac70\0\131\0\uacc9\0\uad22\0\uad7b"+
    "\0\uadd4\0\uae2d\0\u0321\0\uae86\0\uaedf\0\uaf38\0\uaf91\0\u0321"+
    "\0\u0321\0\131\0\uafea\0\ub043\0\ub09c\0\ub0f5\0\ub14e\0\ub1a7"+
    "\0\u0321";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\2"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\2\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\31\1\42\2\31\1\43\3\31\1\44\1\31"+
    "\1\45\1\3\1\46\1\47\1\31\1\50\1\51\1\52"+
    "\1\53\1\31\1\54\1\55\1\31\1\56\1\57\1\31"+
    "\1\60\1\61\1\62\5\31\1\63\3\31\1\64\1\65"+
    "\1\66\1\67\1\70\2\2\1\66\1\71\1\31\1\45"+
    "\1\31\1\66\1\72\1\2\1\66\132\0\1\73\1\0"+
    "\1\74\13\0\1\73\36\0\1\73\53\0\1\75\1\0"+
    "\1\76\13\0\1\75\1\77\35\0\1\75\53\0\1\100"+
    "\1\0\1\101\13\0\1\100\36\0\1\100\53\0\1\102"+
    "\1\0\1\103\13\0\1\102\1\104\35\0\1\102\53\0"+
    "\1\105\15\0\1\105\1\0\1\106\34\0\1\105\53\0"+
    "\1\107\15\0\1\107\2\0\1\110\33\0\1\107\101\0"+
    "\1\31\1\111\4\31\1\112\20\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\12\31\1\113\14\31\1\0\31\31\1\114"+
    "\1\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\22\31\1\115\4\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\11\31\1\116"+
    "\1\117\10\31\1\120\3\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\11\31\1\121"+
    "\5\31\1\122\7\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\5\31\1\123\21\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\4\31\1\124\22\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\5\31"+
    "\1\125\21\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\22\31\1\126\4\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\12\31\1\127\14\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\24\31\1\130"+
    "\2\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\5\31\1\131\21\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\26\66\1\45\1\0\35\66\4\0\1\66\1\45\1\66"+
    "\1\45\2\66\2\0\1\132\27\0\27\31\1\0\1\31"+
    "\1\133\1\134\30\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\27\31\1\0\11\31\1\135\21\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\5\31\1\136\3\31\1\137\21\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\5\31\1\140\3\31\1\141\21\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\15\31\1\142\15\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\1\31\1\111\25\31\1\0\1\143"+
    "\10\31\1\144\3\31\1\145\15\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\2\31"+
    "\1\146\30\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\31\1\0\13\31\1\147\17\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\5\31\1\150\25\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\2\31\1\151"+
    "\30\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\1\31\1\152\1\153\20\31\1\154"+
    "\7\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\1\31\1\155\14\31\1\156\14\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\13\31\1\157\1\160\16\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\20\31\1\161\12\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\4\31\1\162\22\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\66\1\0\10\66\1\163\24\66\4\0\6\66\2\0"+
    "\1\66\27\0\27\66\1\0\35\66\4\0\6\66\2\0"+
    "\1\66\1\0\1\164\5\165\1\166\7\165\1\164\4\165"+
    "\1\167\2\165\1\170\1\167\1\171\3\167\1\172\10\167"+
    "\1\173\1\174\4\167\1\175\1\176\1\164\1\167\1\177"+
    "\1\167\1\200\1\201\1\202\1\203\1\167\1\204\1\205"+
    "\1\167\1\206\1\167\1\207\1\210\1\211\2\167\1\212"+
    "\1\213\1\167\1\214\1\215\1\167\1\175\2\167\2\165"+
    "\4\0\1\216\1\217\1\167\1\176\1\220\1\167\1\165"+
    "\1\0\1\165\116\0\1\221\41\0\27\66\1\0\35\66"+
    "\4\0\6\66\2\0\1\132\1\0\1\222\12\223\1\224"+
    "\2\223\1\222\4\223\1\225\2\223\26\225\1\223\1\226"+
    "\33\225\3\223\3\0\2\223\1\225\1\223\2\225\1\227"+
    "\1\0\1\223\1\0\1\75\1\0\1\76\13\0\1\75"+
    "\36\0\1\75\76\0\1\230\105\0\1\102\1\0\1\103"+
    "\13\0\1\102\36\0\1\102\54\0\15\231\1\0\75\231"+
    "\3\0\7\231\1\0\1\231\27\0\2\31\1\232\1\233"+
    "\1\234\2\31\1\235\1\236\1\237\2\31\1\240\1\241"+
    "\1\31\1\242\1\243\6\31\1\0\1\234\3\31\1\240"+
    "\3\31\1\232\1\241\2\31\1\235\1\237\1\236\1\242"+
    "\1\233\4\31\1\243\5\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\24\31\1\244\2\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\3\31\1\245\13\31\1\246\7\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\12\31\1\247\14\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\17\31\1\250\7\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\7\31\1\251\17\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\3\31"+
    "\1\252\23\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\5\31\1\253\21\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\1\254\26\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\17\31\1\255\7\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\5\31\1\256\21\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\10\31"+
    "\1\257\16\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\21\31\1\260\5\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\1\31\1\261\25\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\15\31\1\262"+
    "\11\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\20\31\1\263\6\31\1\0\30\31"+
    "\1\264\2\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\26\66\1\265\1\0\35\66\4\0\1\66"+
    "\1\265\1\66\1\265\2\66\2\0\1\66\27\0\27\31"+
    "\1\0\2\31\1\266\30\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\20\31\1\267"+
    "\12\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\26\31\1\270\4\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\15\31\1\271\15\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\27\31\1\0\13\31\1\272\17\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\6\31\1\273\24\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\11\31"+
    "\1\274\21\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\31\1\0\16\31\1\275\14\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\5\31\1\276\25\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\15\31\1\277"+
    "\15\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\5\31\1\300\25\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\16\31\1\301\14\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\27\31\1\0\6\31\1\302\24\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\22\31\1\303\10\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\6\31"+
    "\1\304\24\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\31\1\0\12\31\1\305\20\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\24\31\1\306\6\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\25\31\1\307"+
    "\5\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\6\31\1\310\24\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\1\31\1\311\31\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\27\31\1\0\16\31\1\312\14\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\14\31\1\313\16\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\3\31\1\314\23\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\66\1\0\15\66\1\315\17\66\4\0"+
    "\6\66\2\0\1\66\1\0\1\164\5\165\1\166\7\165"+
    "\1\164\4\165\1\167\2\165\1\170\1\167\1\171\3\167"+
    "\1\172\10\167\1\173\1\174\4\167\1\175\1\176\1\164"+
    "\1\167\1\177\1\167\1\200\1\201\1\202\1\203\1\167"+
    "\1\204\1\205\1\167\1\206\1\167\1\207\1\210\1\211"+
    "\2\167\1\212\1\213\1\167\1\214\1\215\1\167\1\175"+
    "\2\167\2\165\1\316\1\317\2\0\1\216\1\217\1\167"+
    "\1\176\1\220\1\167\1\165\1\0\1\165\1\0\6\165"+
    "\1\166\104\165\1\316\1\317\2\0\7\165\1\0\1\165"+
    "\1\0\1\166\15\0\1\166\7\0\1\165\1\0\24\165"+
    "\1\0\1\166\33\165\10\0\1\165\1\0\1\165\5\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\33\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\15\167\1\323\11\167"+
    "\1\320\11\167\1\323\21\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\5\167\1\324"+
    "\21\167\1\320\2\167\1\324\30\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\24\167"+
    "\1\325\2\167\1\320\1\167\1\325\31\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\6\167\1\326\20\167\1\320\5\167\1\326\25\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\24\167\1\327\2\167\1\320\33\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\5\167\1\330\21\167\1\320\2\167\1\330\30\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\331\1\332\4\165\1\166\7\165\1\331\35\165"+
    "\1\176\1\331\25\165\1\333\7\165\1\334\1\335\2\0"+
    "\1\165\1\176\1\165\1\176\3\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\2\167\1\336\2\167\1\337\3\167\1\340"+
    "\6\167\1\341\12\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\12\167"+
    "\1\342\20\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\15\167\1\343"+
    "\15\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\24\167\1\325\2\167\1\320\1\167"+
    "\1\325\31\167\2\165\1\321\1\322\2\0\1\165\1\167"+
    "\1\344\3\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\15\167\1\323"+
    "\11\167\1\320\1\345\1\167\1\346\6\167\1\347\21\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\5\167\1\324\21\167\1\320\1\167\1\350"+
    "\1\324\30\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\15\167\1\351"+
    "\15\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\5\167\1\352\4\167"+
    "\1\353\20\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\2\167\1\354"+
    "\15\167\1\355\12\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\2\167"+
    "\1\356\30\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\6\167\1\326\20\167\1\320"+
    "\5\167\1\326\12\167\1\357\12\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\27\167"+
    "\1\320\5\167\1\360\25\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\2\167\1\361\30\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\12\167"+
    "\1\362\20\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\1\363\32\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\6\165\1\166\17\165\1\364\1\165\25\364"+
    "\1\165\33\364\2\165\1\316\1\317\2\0\1\165\4\364"+
    "\2\165\1\0\1\165\1\0\1\331\1\332\4\165\1\166"+
    "\7\165\1\331\35\165\1\176\1\331\24\165\1\216\1\333"+
    "\7\165\1\334\1\335\2\0\1\165\1\176\1\165\1\176"+
    "\3\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\12\167\1\365"+
    "\20\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\117\0\1\366\7\0\1\367\2\0\1\222"+
    "\15\224\1\222\4\224\1\225\2\224\26\225\1\224\1\222"+
    "\33\225\3\224\1\370\2\0\2\224\1\225\1\224\2\225"+
    "\1\371\1\0\1\224\1\0\114\224\1\372\2\0\6\224"+
    "\1\373\1\0\1\224\1\0\114\224\1\370\2\0\6\224"+
    "\1\371\1\0\1\224\1\0\1\374\15\224\1\374\4\224"+
    "\1\225\2\224\27\225\1\374\33\225\3\224\1\375\2\0"+
    "\1\224\5\225\1\376\1\0\1\224\1\0\1\222\15\224"+
    "\1\222\4\224\1\225\2\224\26\225\1\224\1\222\33\225"+
    "\3\224\1\372\2\0\2\224\1\225\1\224\2\225\1\373"+
    "\1\0\1\224\115\0\1\372\10\0\1\373\26\0\1\377"+
    "\133\0\1\u0100\26\31\1\0\6\31\1\u0100\24\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\12\31"+
    "\1\u0101\6\31\1\u0102\5\31\1\0\13\31\1\u0101\6\31"+
    "\1\u0102\10\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\5\31\1\u0103\20\31\1\u0104\1\u0105\2\31"+
    "\1\u0103\30\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\3\31\1\u0106\23\31\1\0\20\31\1\u0106"+
    "\12\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\3\31\1\u0107\1\31\1\u0108\21\31\1\0\2\31"+
    "\1\u0108\15\31\1\u0107\12\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\3\31\1\u0109\23\31\1\0"+
    "\20\31\1\u0109\12\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\15\31\1\u010a\4\31\1\u010b\1\31"+
    "\1\u010c\2\31\1\0\1\31\1\u010c\7\31\1\u010a\1\u010b"+
    "\20\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\20\31\1\u010d\6\31\1\0\25\31\1\u010d\5\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\1\u010e\4\31\1\u010f\12\31\1\u0110\6\31\1\0\2\31"+
    "\1\u010f\3\31\1\u010e\16\31\1\u0110\5\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\6\31\1\u0111"+
    "\20\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\10\31\1\u0112\16\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\5\31\1\u0113\21\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\10\31\1\u0114\16\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\5\31\1\u0115\21\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\10\31"+
    "\1\u0116\16\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\24\31\1\u0117\2\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\1\u0118\26\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\12\31\1\u0119\14\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\3\31\1\u011a\14\31\1\u011b\6\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\1\31\1\u011c\25\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\11\31\1\u011d"+
    "\15\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\1\u011e\26\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\5\31"+
    "\1\u011f\21\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\5\31\1\u0120\21\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\26\66\1\u0121\1\0\35\66\4\0\1\66\1\u0121"+
    "\1\66\1\u0121\2\66\2\0\1\66\27\0\27\31\1\0"+
    "\3\31\1\u0122\27\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\27\31\1\0\10\31\1\u0123\22\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\17\31\1\u0124\13\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\17\31"+
    "\1\305\13\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\31\1\0\16\31\1\u0125\14\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\7\31\1\u0126\23\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\15\31\1\u0127"+
    "\15\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\1\31\1\u0128\31\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\11\31\1\u0129\5\31\1\u012a\13\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\17\31"+
    "\1\u012b\13\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\5\31\1\u012c\21\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\15\31\1\u012d\15\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\2\31\1\u012e"+
    "\30\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\20\31\1\u012f\12\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\2\31\1\u0130\30\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\27\31\1\0\16\31\1\u0131\14\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\2\31\1\u0132\30\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\20\31"+
    "\1\u0133\12\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\31\1\0\2\31\1\u0134\30\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\16\31\1\u0135\14\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\11\31\1\u0136\15\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\66\1\0\11\66\1\u0137\23\66\4\0\6\66"+
    "\2\0\1\66\116\0\1\u0138\13\0\1\320\5\165\1\166"+
    "\7\165\1\320\36\165\1\320\35\165\1\321\1\322\2\0"+
    "\7\165\1\0\1\165\116\0\1\u0139\13\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\22\167\1\u013a"+
    "\4\167\1\320\12\167\1\u013a\20\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\12\167"+
    "\1\u013b\14\167\1\320\13\167\1\u013b\17\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\3\167\1\u013c\23\167\1\320\20\167\1\u013c\12\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\12\167\1\u013d\14\167\1\320\13\167\1\u013d\17\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\15\167\1\u013e\11\167\1\320\33\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\24\167\1\u013f\2\167\1\320\1\167\1\u013f\31\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\331\1\332\4\165\1\166\7\165\1\331"+
    "\36\165\1\331\25\165\1\333\7\165\1\334\1\335\2\0"+
    "\7\165\1\0\1\165\1\0\1\332\5\165\1\166\7\165"+
    "\1\332\36\165\1\332\35\165\1\u0140\1\u0141\2\0\7\165"+
    "\1\0\1\165\1\0\6\165\1\166\73\165\1\u0142\10\165"+
    "\1\316\1\317\2\0\7\165\1\0\1\165\116\0\1\u0143"+
    "\13\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\14\167\1\u0144\16\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\14\167\1\u0145\16\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\27\167"+
    "\1\320\26\167\1\u0146\4\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\10\167\1\u0147\22\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\6\167"+
    "\1\u0148\24\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\5\167\1\u0149"+
    "\4\167\1\u014a\20\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\12\167"+
    "\1\u014b\20\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\2\167\1\u014c"+
    "\30\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\13\167\1\u014d\17\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\22\167\1\u013a\4\167\1\320\12\167\1\u013a"+
    "\2\167\1\u014e\15\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\2\167"+
    "\1\u014f\2\167\1\u0150\25\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\20\167\1\u0151\12\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\25\167\1\u0150\1\167"+
    "\1\320\33\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\22\167\1\u0152"+
    "\10\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\3\167\1\u0153\27\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\27\167\1\320\22\167\1\u014a\10\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\5\167\1\u0154\16\167\1\u0155\6\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\27\167\1\320\15\167\1\u0156\15\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\1\167\1\u0157\31\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\15\167\1\u0158\15\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\27\167"+
    "\1\320\1\167\1\u0159\31\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\20\167\1\u015a\12\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\u015b\5\165\1\166"+
    "\7\165\1\u015b\7\165\1\364\1\165\25\364\1\u015b\33\364"+
    "\2\165\1\u015c\1\u015d\2\0\1\165\4\364\2\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\27\167\1\320\17\167\1\u015e\13\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\116\0\1\u015f\130\0\1\u0160\13\0\1\374\15\224\1\374"+
    "\36\224\1\374\36\224\1\375\2\0\6\224\1\376\1\0"+
    "\1\224\116\0\1\u0161\13\0\114\u0162\3\0\7\u0162\1\0"+
    "\1\u0162\27\0\3\31\1\u0163\23\31\1\0\20\31\1\u0163"+
    "\12\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\20\31\1\u0164\6\31\1\0\25\31\1\u0164\5\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\2\31\1\u0165\24\31\1\0\10\31\1\u0165\22\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\6\31"+
    "\1\u0166\20\31\1\0\5\31\1\u0166\25\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\25\31\1\u0167"+
    "\1\31\1\0\30\31\1\u0167\2\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\10\31\1\u0168\16\31"+
    "\1\0\16\31\1\u0168\14\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\23\31\1\u0169\3\31\1\0"+
    "\24\31\1\u0169\6\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\12\31\1\u016a\14\31\1\0\13\31"+
    "\1\u016a\17\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\7\31\1\u016b\17\31\1\0\14\31\1\u016b"+
    "\16\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\10\31\1\u016c\16\31\1\0\16\31\1\u016c\14\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\10\31\1\u016d\16\31\1\0\16\31\1\u016d\14\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\24\31"+
    "\1\u016e\2\31\1\0\1\31\1\u016e\31\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\11\31\1\u016f"+
    "\15\31\1\0\15\31\1\u016f\15\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\6\31\1\u0170\20\31"+
    "\1\0\5\31\1\u0170\25\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\1\u0171\26\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\24\31\1\u0172\2\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\3\31\1\u0173\23\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\1\0\1\u0174\15\0\1\u0174\7\0\3\31\1\u0175"+
    "\23\31\1\u0174\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\10\31\1\u0176\16\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\32\31\1\u0177\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\21\31\1\u0178\5\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\6\31\1\u0179\20\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\6\31\1\u017a"+
    "\20\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\15\31\1\u017b\11\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\5\31\1\u017c\21\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\6\31\1\u017d\20\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\24\31\1\u017e\2\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\26\66"+
    "\1\u017f\1\0\35\66\4\0\1\66\1\u017f\1\66\1\u017f"+
    "\2\66\2\0\1\66\27\0\27\31\1\0\1\u0180\32\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\24\0"+
    "\1\u0181\2\0\27\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\10\31"+
    "\1\u0182\22\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\31\1\0\2\31\1\u0183\30\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\1\31\1\u0184\31\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\17\31\1\u0185"+
    "\13\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\15\31\1\u0186\15\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\20\31\1\u0187\12\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\27\31\1\0\22\31\1\u0188\10\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\24\0"+
    "\1\u0189\2\0\27\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\13\31"+
    "\1\u018a\17\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\31\1\0\10\31\1\u018b\22\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\1\u018c\32\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\5\31\1\u018d\21\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\66\1\0\4\66\1\u018e\30\66\4\0\6\66\2\0"+
    "\1\66\117\0\1\316\130\0\1\321\12\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\24\167\1\u018f"+
    "\2\167\1\320\1\167\1\u018f\31\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\5\167"+
    "\1\u0190\21\167\1\320\2\167\1\u0190\30\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\6\167\1\u0191\20\167\1\320\5\167\1\u0191\25\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\17\167\1\u0192\7\167\1\320\17\167\1\u0192\13\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\1\u0193\26\167\1\320\33\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\7\167\1\u0194\17\167\1\320\14\167\1\u0194\16\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\116\0\1\u0195\13\0\1\u0142\5\165\1\166\7\165\1\u0142"+
    "\36\165\1\u0142\35\165\1\u0196\1\u0197\2\0\7\165\1\0"+
    "\1\165\117\0\1\334\12\0\1\u0198\5\165\1\166\7\165"+
    "\1\u0198\4\165\1\167\2\165\27\167\1\u0198\33\167\2\165"+
    "\1\u0199\1\u019a\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\20\167\1\u019b\12\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\u019c\5\165\1\166\7\165\1\u019c\4\165\1\167\2\165"+
    "\27\167\1\u019c\33\167\2\165\1\u019d\1\u019e\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\1\u0153"+
    "\32\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\1\u019f\32\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\6\167\1\u01a0\24\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\2\167\1\u0144\30\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\27\167"+
    "\1\320\5\167\1\u0144\25\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\6\167\1\u01a1\24\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\16\167"+
    "\1\u01a2\14\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\12\167\1\u01a3"+
    "\20\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\2\167\1\u01a4\30\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\27\167\1\320\23\167\1\u0144\7\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\25\167\1\u014a\1\167\1\320\33\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\4\167\1\u01a5\26\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\27\167"+
    "\1\320\16\167\1\u01a6\14\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\15\167\1\u0144\15\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\16\167"+
    "\1\u01a7\14\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\25\167\1\u01a8\1\167\1\320"+
    "\33\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\11\167\1\u01a9\21\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\27\167\1\320\15\167\1\u01aa\15\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\25\167\1\u01ab\5\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\16\167\1\u014a\14\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\u015b"+
    "\5\165\1\166\7\165\1\u015b\36\165\1\u015b\35\165\1\u015c"+
    "\1\u015d\2\0\7\165\1\0\1\165\116\0\1\u01ac\13\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\16\167\1\u01ad\14\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\127\0\1\371"+
    "\130\0\1\373\130\0\1\376\2\0\23\u0162\1\u01ae\70\u0162"+
    "\3\0\7\u0162\1\0\1\u0162\27\0\1\u01af\26\31\1\0"+
    "\6\31\1\u01af\24\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\22\31\1\u01b0\4\31\1\0\12\31"+
    "\1\u01b0\20\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\7\31\1\u01b1\17\31\1\0\14\31\1\u01b1"+
    "\16\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\11\31\1\u01b2\15\31\1\0\15\31\1\u01b2\15\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\10\31\1\u01b3\16\31\1\0\16\31\1\u01b3\14\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\13\31"+
    "\1\u01b4\13\31\1\0\7\31\1\u01b4\23\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\16\31\1\u01b5"+
    "\10\31\1\0\23\31\1\u01b5\7\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\10\31\1\u01b6\16\31"+
    "\1\0\16\31\1\u01b6\14\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\3\31\1\u01b7\23\31\1\0"+
    "\20\31\1\u01b7\12\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\3\31\1\u01b8\23\31\1\0\20\31"+
    "\1\u01b8\12\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\5\31\1\u01b9\21\31\1\0\2\31\1\u01b9"+
    "\30\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\21\31\1\u01ba\5\31\1\0\22\31\1\u01ba\10\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\10\31\1\u01bb\16\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\10\31\1\u01bc\16\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\11\31\1\u01bd\15\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\1\0\1\u0174"+
    "\15\0\1\u0174\12\0\1\u01be\23\0\1\u0174\101\0\27\31"+
    "\1\0\31\31\1\u01bf\1\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\1\31\1\u01c0\25\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\4\31\1\u01c1\22\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\20\31\1\u01c2"+
    "\6\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\24\31\1\u01c3\2\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\11\31\1\u01c4\15\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\6\31\1\u01c5\20\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\17\31\1\u01c6\7\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\10\31"+
    "\1\u01c7\16\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\17\31\1\u01c8\7\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\26\66\1\u01c9\1\0\35\66\4\0\3\66\1\u01c9"+
    "\2\66\2\0\1\66\27\0\27\31\1\0\16\31\1\u01ca"+
    "\14\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\62\0\1\u01cb\13\0\1\u01cc\61\0\27\31\1\0\1\31"+
    "\1\u01cd\31\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\31\1\0\5\31\1\u01ce\25\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\27\31"+
    "\1\0\2\31\1\u01cf\30\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\6\31\1\u01d0"+
    "\24\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\5\31\1\u01d1\25\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\64\0\1\u01d2\73\0"+
    "\27\31\1\0\10\31\1\u01d3\22\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\2\31"+
    "\1\u01d4\30\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\27\66\1\0\5\66\1\u01d5\27\66\4\0"+
    "\6\66\2\0\1\66\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\3\167\1\u01d6\23\167\1\320"+
    "\20\167\1\u01d6\12\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\25\167\1\u01d7\1\167"+
    "\1\320\30\167\1\u01d7\2\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\11\167\1\u01d8"+
    "\15\167\1\320\15\167\1\u01d8\15\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\u01d9\2\165\27\167"+
    "\1\320\33\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\5\167\1\u01da\21\167\1\320"+
    "\33\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\6\167\1\u01db\20\167\1\320\5\167"+
    "\1\u01db\25\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\117\0\1\u0140\127\0\1\u01dc\13\0"+
    "\1\u0198\5\165\1\166\7\165\1\u0198\36\165\1\u0198\35\165"+
    "\1\u0199\1\u019a\2\0\7\165\1\0\1\165\116\0\1\u01dd"+
    "\13\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\11\167\1\u01de\21\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\u019c\5\165\1\166\7\165\1\u019c\36\165\1\u019c\35\165"+
    "\1\u019d\1\u019e\2\0\7\165\1\0\1\165\116\0\1\u01df"+
    "\13\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\17\167\1\u01e0\13\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\7\167\1\u0144\23\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\27\167"+
    "\1\320\7\167\1\u01e1\23\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\2\167\1\u01e2\30\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\22\167"+
    "\1\u01e3\10\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\13\167\1\u0144"+
    "\17\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\2\167\1\u01e4\30\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\u01e5\5\165\1\166\7\165\1\u01e5\4\165"+
    "\1\167\2\165\27\167\1\u01e5\33\167\2\165\1\u01e6\1\u01e7"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\u01e8"+
    "\5\165\1\166\7\165\1\u01e8\4\165\1\167\2\165\27\167"+
    "\1\u01e8\33\167\2\165\1\u01e9\1\u01ea\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\2\167\1\u01eb"+
    "\30\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\11\167\1\u01a4\21\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\27\167\1\320\11\167\1\u01ec\21\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\15\167\1\u014a\15\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\117\0"+
    "\1\u015c\12\0\1\320\5\165\1\166\7\165\1\320\4\165"+
    "\1\167\2\165\27\167\1\320\20\167\1\u01ed\12\167\2\165"+
    "\1\321\1\322\2\0\1\165\5\167\1\165\1\0\1\165"+
    "\1\0\23\u0162\1\u01ee\70\u0162\3\0\7\u0162\1\0\1\u0162"+
    "\27\0\10\31\1\u01ef\16\31\1\0\16\31\1\u01ef\14\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\5\31\1\u01f0\21\31\1\0\2\31\1\u01f0\30\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\6\31"+
    "\1\u01f1\20\31\1\0\5\31\1\u01f1\25\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\15\31\1\u01f2"+
    "\11\31\1\0\11\31\1\u01f2\21\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\15\31\1\u01f3\11\31"+
    "\1\0\11\31\1\u01f3\21\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\20\31\1\u01f4\6\31\1\0"+
    "\25\31\1\u01f4\5\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\1\u01f5\26\31\1\0\6\31\1\u01f5"+
    "\24\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\5\31\1\u01f6\21\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\110\0\1\u01f7\47\0"+
    "\3\31\1\u01f8\23\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\3\31\1\u01f9\23\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\6\31\1\u01fa\20\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\1\31"+
    "\1\u01fb\25\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\5\31\1\u01fc\21\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\7\31\1\u01fd\17\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\17\31\1\u01fe"+
    "\7\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\5\31\1\u01ff\21\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\64\0"+
    "\1\u0200\143\0\1\u0201\60\0\27\31\1\0\11\31\1\u0202"+
    "\21\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\27\31\1\0\13\31\1\u0203\17\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\27\31\1\0"+
    "\22\31\1\u0204\10\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\27\31\1\0\7\31\1\u0205\23\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\15\31\1\u0206\15\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\74\0\1\u0207\63\0\27\31"+
    "\1\0\1\31\1\u0208\31\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\66\1\0\15\66\1\u0209"+
    "\17\66\4\0\6\66\2\0\1\66\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\5\167\1\u020a"+
    "\21\167\1\320\2\167\1\u020a\30\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\6\167"+
    "\1\u01d8\20\167\1\320\5\167\1\u01d8\25\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\u020b\5\165\1\166\7\165\1\u020b\4\165\1\167\2\165"+
    "\27\167\1\u020b\33\167\2\165\1\u020c\1\u020d\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\17\167\1\u020e\7\167"+
    "\1\320\17\167\1\u020e\13\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\17\167\1\u020f"+
    "\7\167\1\320\33\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\12\167\1\u01d7\14\167"+
    "\1\320\13\167\1\u01d7\17\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\117\0\1\u0196\130\0"+
    "\1\u0199\12\0\1\u0210\5\165\1\166\7\165\1\u0210\4\165"+
    "\1\167\2\165\27\167\1\u0210\33\167\2\165\1\u0211\1\u0212"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\117\0\1\u019d"+
    "\12\0\1\320\5\165\1\166\7\165\1\320\4\165\1\167"+
    "\2\165\27\167\1\320\20\167\1\u014b\12\167\2\165\1\321"+
    "\1\322\2\0\1\165\5\167\1\165\1\0\1\165\1\0"+
    "\1\320\5\165\1\166\7\165\1\320\4\165\1\167\2\165"+
    "\27\167\1\320\4\167\1\u0213\26\167\2\165\1\321\1\322"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\1\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\27\167"+
    "\1\320\1\167\1\u01a6\31\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\13\167\1\u0214\17\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\1\167"+
    "\1\u0215\31\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\u01e5\5\165\1\166\7\165"+
    "\1\u01e5\36\165\1\u01e5\35\165\1\u01e6\1\u01e7\2\0\7\165"+
    "\1\0\1\165\116\0\1\u0216\13\0\1\u01e8\5\165\1\166"+
    "\7\165\1\u01e8\36\165\1\u01e8\35\165\1\u01e9\1\u01ea\2\0"+
    "\7\165\1\0\1\165\116\0\1\u0217\13\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\1\167\1\u0144\31\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\27\167\1\320\26\167"+
    "\1\u0144\4\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\3\167\1\u0218"+
    "\27\167\2\165\1\321\1\322\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\1\0\4\u0162\1\u0219\16\u0162\1\u01ee\70\u0162"+
    "\3\0\7\u0162\1\0\1\u0162\27\0\24\31\1\u021a\2\31"+
    "\1\0\1\31\1\u021a\31\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\12\31\1\u021b\14\31\1\0"+
    "\13\31\1\u021b\17\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\12\31\1\u021c\14\31\1\0\13\31"+
    "\1\u021c\17\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\10\31\1\u021d\16\31\1\0\16\31\1\u021d"+
    "\14\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\10\31\1\u021e\16\31\1\0\16\31\1\u021e\14\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\24\31\1\u021f\2\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\12\31\1\u0220\14\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\11\31\1\u0221\15\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\24\31"+
    "\1\u0222\2\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\12\31\1\u0223\14\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\6\31\1\u0224\20\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\1\31\1\u0225"+
    "\25\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\101\0\1\u0226\127\0\1\u0227\57\0\27\31"+
    "\1\0\12\31\1\u0228\20\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\2\31\1\u0229"+
    "\30\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\77\0\1\u022a\32\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\24\167\1\u01d8\2\167\1\320\1\167"+
    "\1\u01d8\31\167\2\165\1\321\1\322\2\0\1\165\5\167"+
    "\1\165\1\0\1\165\1\0\1\u020b\5\165\1\166\7\165"+
    "\1\u020b\36\165\1\u020b\35\165\1\u020c\1\u020d\2\0\7\165"+
    "\1\0\1\165\116\0\1\u022b\13\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\5\167\1\u022c\21\167"+
    "\1\320\2\167\1\u022c\30\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\17\167\1\u022d"+
    "\7\167\1\320\33\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\u0210\5\165\1\166"+
    "\7\165\1\u0210\36\165\1\u0210\35\165\1\u0211\1\u0212\2\0"+
    "\7\165\1\0\1\165\116\0\1\u022e\13\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\27\167\1\320"+
    "\11\167\1\u022f\21\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\u0230\5\165\1\166"+
    "\7\165\1\u0230\4\165\1\167\2\165\27\167\1\u0230\33\167"+
    "\2\165\1\u0231\1\u0232\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\1\0\1\u0233\5\165\1\166\7\165\1\u0233\4\165"+
    "\1\167\2\165\27\167\1\u0233\33\167\2\165\1\u0234\1\u0235"+
    "\2\0\1\165\5\167\1\165\1\0\1\165\117\0\1\u01e6"+
    "\130\0\1\u01e9\12\0\1\320\5\165\1\166\7\165\1\320"+
    "\4\165\1\167\2\165\27\167\1\320\23\167\1\u01a6\7\167"+
    "\2\165\1\321\1\322\2\0\1\165\5\167\1\165\1\0"+
    "\1\165\27\0\5\31\1\u0236\21\31\1\0\2\31\1\u0236"+
    "\30\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\3\31\1\u0237\23\31\1\0\20\31\1\u0237\12\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\1\31\1\u0238\25\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\27\31\1\0\31\31"+
    "\1\u0239\1\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\5\31\1\u023a\21\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\1\31"+
    "\1\u023b\25\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\22\31\1\u023c\4\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\10\31\1\u023d\16\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\1\u023e\1\31"+
    "\25\u023e\1\0\33\u023e\2\66\4\0\1\66\4\u023e\1\66"+
    "\2\0\1\66\77\0\1\u023f\112\0\1\u0240\76\0\27\31"+
    "\1\0\13\31\1\u0241\17\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\27\31\1\0\13\31\1\u0242"+
    "\17\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\67\0\1\u0243\160\0\1\u020c\12\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\24\167\1\u0244\2\167"+
    "\1\320\1\167\1\u0244\31\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\1\167\1\u0245"+
    "\25\167\1\320\33\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\117\0\1\u0211\12\0\1\320"+
    "\5\165\1\166\7\165\1\320\4\165\1\167\2\165\27\167"+
    "\1\320\24\167\1\u0246\6\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\u0230\5\165"+
    "\1\166\7\165\1\u0230\36\165\1\u0230\35\165\1\u0231\1\u0232"+
    "\2\0\7\165\1\0\1\165\116\0\1\u0247\13\0\1\u0233"+
    "\5\165\1\166\7\165\1\u0233\36\165\1\u0233\35\165\1\u0234"+
    "\1\u0235\2\0\7\165\1\0\1\165\116\0\1\u0248\41\0"+
    "\6\31\1\u0249\20\31\1\0\5\31\1\u0249\25\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\12\31"+
    "\1\u024a\14\31\1\0\13\31\1\u024a\17\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\6\31\1\u024b"+
    "\20\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\15\31\1\u024c\11\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\12\31\1\u024d\14\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\27\0\21\31\1\u024e\5\31"+
    "\1\0\33\31\2\66\4\0\1\66\4\31\1\66\2\0"+
    "\1\66\27\0\15\31\1\u024f\11\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\74\0\1\u0250"+
    "\63\0\27\31\1\0\14\31\1\u0251\16\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\14\31\1\u0252"+
    "\12\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\72\0\1\u0253\37\0\1\320\5\165\1\166"+
    "\7\165\1\320\4\165\1\167\2\165\3\167\1\u0254\23\167"+
    "\1\320\20\167\1\u0254\12\167\2\165\1\321\1\322\2\0"+
    "\1\165\5\167\1\165\1\0\1\165\1\0\1\320\5\165"+
    "\1\166\7\165\1\320\4\165\1\167\2\165\1\u0255\1\167"+
    "\25\u0255\1\320\33\u0255\2\165\1\321\1\322\2\0\1\165"+
    "\4\u0255\1\167\1\165\1\0\1\165\1\0\1\u0256\5\165"+
    "\1\166\7\165\1\u0256\4\165\1\167\2\165\27\167\1\u0256"+
    "\33\167\2\165\1\u0257\1\u0258\2\0\1\165\5\167\1\165"+
    "\1\0\1\165\117\0\1\u0231\130\0\1\u0234\40\0\2\31"+
    "\1\u0259\24\31\1\0\10\31\1\u0259\22\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\11\31\1\u025a"+
    "\15\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\22\31\1\u025b\4\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\24\31\1\u025c\2\31\1\0\33\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\102\0\1\u025d\55\0\27\31"+
    "\1\0\23\31\1\u025e\7\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\1\0\1\320\5\165\1\166\7\165"+
    "\1\320\4\165\1\167\2\165\27\167\1\320\3\167\1\u01d8"+
    "\25\167\1\u01d8\1\167\2\165\1\321\1\322\2\0\1\165"+
    "\5\167\1\165\1\0\1\165\1\0\1\u025f\5\165\1\166"+
    "\1\u0260\6\165\1\u025f\4\165\1\167\2\165\1\u0255\1\167"+
    "\25\u0255\1\u025f\33\u0255\2\165\1\321\1\322\2\0\1\165"+
    "\4\u0255\1\167\1\165\1\0\1\165\1\0\1\u0256\5\165"+
    "\1\166\7\165\1\u0256\36\165\1\u0256\35\165\1\u0257\1\u0258"+
    "\2\0\7\165\1\0\1\165\116\0\1\u0261\41\0\5\31"+
    "\1\u0262\21\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\21\31\1\u0263\5\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\27\0\3\31\1\u0264\23\31\1\0\33\31\2\66\4\0"+
    "\1\66\4\31\1\66\2\0\1\66\27\0\3\31\1\u0265"+
    "\23\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\1\0\1\u025f\5\165\1\166\1\u0260\6\165"+
    "\1\u025f\36\165\1\u025f\35\165\1\321\1\322\2\0\7\165"+
    "\1\0\1\165\1\0\1\u0260\5\165\1\166\1\165\1\u0266"+
    "\5\165\1\u0260\36\165\1\u0260\35\165\1\316\1\317\2\0"+
    "\7\165\1\0\1\165\117\0\1\u0257\40\0\6\31\1\u0267"+
    "\20\31\1\0\33\31\2\66\4\0\1\66\4\31\1\66"+
    "\2\0\1\66\27\0\15\31\1\u0268\11\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\27\0"+
    "\27\31\1\0\14\31\1\u0269\16\31\2\66\4\0\1\66"+
    "\4\31\1\66\2\0\1\66\1\0\1\u0266\5\165\1\166"+
    "\7\165\1\u0266\36\165\1\u0266\35\165\1\u026a\1\u026b\2\0"+
    "\7\165\1\0\1\165\27\0\10\31\1\u026c\16\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66"+
    "\116\0\1\u026d\41\0\15\31\1\u026e\11\31\1\0\33\31"+
    "\2\66\4\0\1\66\4\31\1\66\2\0\1\66\117\0"+
    "\1\u026a\40\0\24\31\1\u026f\2\31\1\0\33\31\2\66"+
    "\4\0\1\66\4\31\1\66\2\0\1\66\27\0\3\31"+
    "\1\u0270\23\31\1\0\33\31\2\66\4\0\1\66\4\31"+
    "\1\66\2\0\1\66\27\0\15\31\1\u0271\11\31\1\0"+
    "\33\31\2\66\4\0\1\66\4\31\1\66\2\0\1\66";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\11\11\3\1\4\11\43\1\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\0\1\11\53\1\45\0\65\1\1\11\2\0"+
    "\1\11\12\0\1\11\34\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\0\5\1\1\11\62\1\10\0\1\11\33\0"+
    "\1\11\6\0\21\1\1\0\14\1\1\0\7\1\1\0"+
    "\5\1\7\0\1\11\2\0\1\11\3\0\1\11\21\0"+
    "\17\1\1\0\14\1\2\0\5\1\1\0\3\1\20\0"+
    "\1\11\2\0\1\11\5\0\10\1\1\11\10\1\2\0"+
    "\5\1\1\0\2\1\2\0\1\11\4\0\1\11\7\0"+
    "\15\1\2\0\2\1\7\0\1\11\2\0\1\11\1\0"+
    "\11\1\1\0\1\11\2\1\6\0\7\1\1\0\2\1"+
    "\1\11\3\0\1\11\1\0\4\1\1\11\1\1\3\0"+
    "\4\1\1\0\3\1\1\11\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de llos errores lexicos
    ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

    //Funciones
    //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
    private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
        //creamos un  token auxiliar
        Token tokenAux = new Token(tipoToken, lexema, fila, columna);
        System.out.println("Fila: "+fila+" Columa: "+columna+" Token: "+tipoToken+ " Lexema: "+lexema);
        //retornamos el token aux como simbolo
        return new Symbol(tipo, tokenAux);
    }
    
    //Agregamos un token al array list de errores lexicos
    private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
        //creamos un  token auxiliar
        TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
        //Agregamos al listado
        listadoErroresLexicos.add(tokenErrorAux);
    }

    //Obtenemos el arrLust de los errores lexicos
    public ArrayList<TokenError> obtenerListadoErroresLexicos(){
        return listadoErroresLexicos;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGCIC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addErrorLexico ("LEXICO", yytext(), "Token no valido",yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 116: break;
          case 2: 
            { /*                                                                                     */
            } 
            // fall through
          case 117: break;
          case 3: 
            { return retornarSimbolo(PERCENT     , "PERCENT"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 118: break;
          case 4: 
            { return retornarSimbolo(IGUAL       , "IGUAL"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 119: break;
          case 5: 
            { return retornarSimbolo(MENOR       , "MENOR"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 120: break;
          case 6: 
            { return retornarSimbolo(MAYOR       , "MAYOR"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 121: break;
          case 7: 
            { return retornarSimbolo(CORCH_INI   , "CORCH_INI"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 122: break;
          case 8: 
            { return retornarSimbolo(CORCH_FIN   , "CORCH_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 123: break;
          case 9: 
            { return retornarSimbolo(PAREN_INI   , "PAREN_INI"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 124: break;
          case 10: 
            { return retornarSimbolo(PAREN_FIN   , "PAREN_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 125: break;
          case 11: 
            { return retornarSimbolo(LLAVE_INI   , "LLAVE_INI"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 126: break;
          case 12: 
            { return retornarSimbolo(LLAVE_FIN   , "LLAVE_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 127: break;
          case 13: 
            { return retornarSimbolo(COMA        , "COMA"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 128: break;
          case 14: 
            { return retornarSimbolo(PUNTO_COMA  , "PUNTO_COMA"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 129: break;
          case 15: 
            { return retornarSimbolo(DOS_PUNTOS  , "DOS_PUNTOS"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 130: break;
          case 16: 
            { return retornarSimbolo(SIMBOL_NOT  , "SIMBOL_NOT"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 131: break;
          case 17: 
            { return retornarSimbolo(SIGNO_MAS   , "SIGNO_MAS"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 132: break;
          case 18: 
            { return retornarSimbolo(SIGNO_MIN   , "SIGNO_MIN"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 133: break;
          case 19: 
            { return retornarSimbolo(SIGNO_POR   , "SIGNO_POR"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 134: break;
          case 20: 
            { return retornarSimbolo(SIGNO_DIV   , "SIGNO_DIV"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 135: break;
          case 21: 
            { return retornarSimbolo(ID_VALUE        , "ID_VALUE"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 136: break;
          case 22: 
            { return retornarSimbolo(INTEGER_VALUE   , "INTEGER_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 137: break;
          case 23: 
            { return retornarSimbolo(ALL_CHARACTERS  , "ALL_CHARACTERS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 138: break;
          case 24: 
            { return retornarSimbolo(IGUAL_IGUAL , "IGUAL_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 139: break;
          case 25: 
            { return retornarSimbolo(MENOR_IGUAL , "MENOR_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 140: break;
          case 26: 
            { return retornarSimbolo(MAYOR_IGUAL , "MAYOR_IGUAL" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 141: break;
          case 27: 
            { return retornarSimbolo(NO_IGUAL    , "NO_IGUAL"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 142: break;
          case 28: 
            { return retornarSimbolo(SIMBOL_OR   , "SIMBOL_OR"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 143: break;
          case 29: 
            { return retornarSimbolo(SIMBOL_AND  , "SIMBOL_AND"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 144: break;
          case 30: 
            { return retornarSimbolo(IF          , "IF"          , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 145: break;
          case 31: 
            { return retornarSimbolo(ID          , "ID"          , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 146: break;
          case 32: 
            { System.out.println("Fila: "+ (yyline + 1) +" Columa: "+ (yycolumn + 1) +" Token: "+"COMENTARIO DE LINEA"+ " Lexema: "+yytext());
            } 
            // fall through
          case 147: break;
          case 33: 
            { return retornarSimbolo(C_P         , "C_P"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 148: break;
          case 34: 
            { return retornarSimbolo(END         , "END"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 149: break;
          case 35: 
            { return retornarSimbolo(FUNCTION_ASC                , "FUNCTION_ASC"  		      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 150: break;
          case 36: 
            { return retornarSimbolo(DECIMAL_VALUE   , "DECIMAL_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 151: break;
          case 37: 
            { return retornarSimbolo(ALT         , "ALT"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 152: break;
          case 38: 
            { return retornarSimbolo(SRC         , "SRC"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 153: break;
          case 39: 
            { return retornarSimbolo(TEXT_VALUE          , "TEXT_VALUE"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 154: break;
          case 40: 
            { return retornarSimbolo(ID_VALUE_STR  , "ID_VALUE_STR"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 155: break;
          case 41: 
            { return retornarSimbolo(DIGIT_VALUE , "DIGIT_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 156: break;
          case 42: 
            { return retornarSimbolo(INSERT_TOKEN_VALUE  , "INSERT_TOKEN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 157: break;
          case 43: 
            { return retornarSimbolo(CHARACT_VALUE   , "CHARACT_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 158: break;
          case 44: 
            { return retornarSimbolo(ID_VALUE_CHAR , "ID_VALUE_CHAR"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 159: break;
          case 45: 
            { return retornarSimbolo(C_H1        , "C_H1"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 160: break;
          case 46: 
            { return retornarSimbolo(C_BR        , "C_BR"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 161: break;
          case 47: 
            { return retornarSimbolo(INIT        , "INIT"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 162: break;
          case 48: 
            { return retornarSimbolo(ELSE        , "ELSE"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 163: break;
          case 49: 
            { return retornarSimbolo(FUNCTION_EXIT               , "FUNCTION_EXIT"               , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 164: break;
          case 50: 
            { return retornarSimbolo(FUNCTION_DESC               , "FUNCTION_DESC" 		      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 165: break;
          case 51: 
            { return retornarSimbolo(THEN        , "THEN"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 166: break;
          case 52: 
            { return retornarSimbolo(HREF        , "HREF"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 167: break;
          case 53: 
            { return retornarSimbolo(ROWS        , "ROWS"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 168: break;
          case 54: 
            { return retornarSimbolo(CHAR        , "CHAR"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 169: break;
          case 55: 
            { return retornarSimbolo(COLS        , "COLS"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 170: break;
          case 56: 
            { return retornarSimbolo(NAME        , "NAME"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 171: break;
          case 57: 
            { return retornarSimbolo(BOOLEAN_VALUE   , "BOOLEAN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 172: break;
          case 58: 
            { return retornarSimbolo(TYPE        , "TYPE"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 173: break;
          case 59: 
            { return retornarSimbolo(PERCE_VALUE , "PERCE_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 174: break;
          case 60: 
            { return retornarSimbolo(COLOR_HEX   , "COLOR_HEX"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 175: break;
          case 61: 
            { return retornarSimbolo(C_IMG       , "C_IMG"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 176: break;
          case 62: 
            { return retornarSimbolo(C_DIV       , "C_DIV"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 177: break;
          case 63: 
            { return retornarSimbolo(COLOR       , "COLOR"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 178: break;
          case 64: 
            { return retornarSimbolo(CLASS       , "CLASS"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 179: break;
          case 65: 
            { return retornarSimbolo(WIDTH       , "WIDTH"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 180: break;
          case 66: 
            { return retornarSimbolo(WHILE       , "WHILE"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 181: break;
          case 67: 
            { return retornarSimbolo(PIXEL_VALUE , "PIXEL_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 182: break;
          case 68: 
            { return retornarSimbolo(COLOR_VALUE , "COLOR_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 183: break;
          case 69: 
            { return retornarSimbolo(ROW         , "ROW"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 184: break;
          case 70: 
            { return retornarSimbolo(C_GCIC      , "C_GCIC"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 185: break;
          case 71: 
            { return retornarSimbolo(C_HEAD      , "C_HEAD"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 186: break;
          case 72: 
            { return retornarSimbolo(C_LINK      , "C_LINK"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 187: break;
          case 73: 
            { return retornarSimbolo(C_BODY      , "C_BODY"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 188: break;
          case 74: 
            { return retornarSimbolo(C_SPAM      , "C_SPAM"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 189: break;
          case 75: 
            { return retornarSimbolo(INSERT      , "INSERT"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 190: break;
          case 76: 
            { return retornarSimbolo(HUNTIL      , "HUNTIL"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 191: break;
          case 77: 
            { return retornarSimbolo(ELSE_IF     , "ELSE_IF"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 192: break;
          case 78: 
            { return retornarSimbolo(REPEAT      , "REPEAT"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 193: break;
          case 79: 
            { return retornarSimbolo(HEIGHT      , "HEIGHT"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 194: break;
          case 80: 
            { return retornarSimbolo(STRING      , "STRING"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 195: break;
          case 81: 
            { return retornarSimbolo(ALIGN_VALUE , "ALIGN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 196: break;
          case 82: 
            { return retornarSimbolo(TEXT        , "TEXT"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 197: break;
          case 83: 
            { return retornarSimbolo(C_INPUT     , "C_INPUT"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 198: break;
          case 84: 
            { return retornarSimbolo(C_TITLE     , "C_TITLE"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 199: break;
          case 85: 
            { return retornarSimbolo(ON_LOAD     , "ON_LOAD"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 200: break;
          case 86: 
            { return retornarSimbolo(FUNCTION_REVERSE            , "FUNCTION_REVERSE"            , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 201: break;
          case 87: 
            { return retornarSimbolo(BOOLEAN     , "BOOLEAN"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 202: break;
          case 88: 
            { return retornarSimbolo(ONCLICK     , "ONCLICK"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 203: break;
          case 89: 
            { return retornarSimbolo(DECIMAL     , "DECIMAL"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 204: break;
          case 90: 
            { return retornarSimbolo(INTEGER     , "INTEGER"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 205: break;
          case 91: 
            { return retornarSimbolo(MODO_GLOBAL , "MODO_GLOBAL" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 206: break;
          case 92: 
            { return retornarSimbolo(FONT_VALUE  , "FONT_VALUE"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 207: break;
          case 93: 
            { return retornarSimbolo(RADIO       , "RADIO"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 208: break;
          case 94: 
            { System.out.println("Fila: "+ (yyline + 1) +" Columa: "+ (yycolumn + 1) +" Token: "+"COMENTARIO DE BLOQUE"+ " Lexema: "+yytext());
            } 
            // fall through
          case 209: break;
          case 95: 
            { return retornarSimbolo(C_BUTTON    , "C_BUTTON"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 210: break;
          case 96: 
            { return retornarSimbolo(C_OPTION    , "C_OPTION"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 211: break;
          case 97: 
            { return retornarSimbolo(C_SELECT    , "C_SELECT"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 212: break;
          case 98: 
            { return retornarSimbolo(COLUMN      , "COLUMN"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 213: break;
          case 99: 
            { return retornarSimbolo(NUMBER      , "NUMBER"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 214: break;
          case 100: 
            { return retornarSimbolo(THENWHILE   , "THENWHILE"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 215: break;
          case 101: 
            { return retornarSimbolo(PROCESS_ABC , "PROCESS_ABC" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 216: break;
          case 102: 
            { return retornarSimbolo(FONT_SIZE   , "FONT_SIZE"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 217: break;
          case 103: 
            { return retornarSimbolo(C_TEXTAREA  , "C_TEXTAREA"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 218: break;
          case 104: 
            { return retornarSimbolo(FUNCTION_ALERT_INFO         , "FUNCTION_ALERT_INFO"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 219: break;
          case 105: 
            { return retornarSimbolo(FUNCTION_LETPAR_NUM         , "FUNCTION_LETPAR_NUM" 	      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 220: break;
          case 106: 
            { return retornarSimbolo(BACKGROUND  , "BACKGROUND"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 221: break;
          case 107: 
            { return retornarSimbolo(TEXT_ALIGN  , "TEXT_ALIGN"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 222: break;
          case 108: 
            { return retornarSimbolo(CHECKBOX    , "CHECKBOX"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 223: break;
          case 109: 
            { return retornarSimbolo(C_SCRIPTING , "C_SCRIPTING" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 224: break;
          case 110: 
            { return retornarSimbolo(FONT_FAMILY , "FONT_FAMILY" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 225: break;
          case 111: 
            { return retornarSimbolo(FUNCTION_LETIMPAR_NUM       , "FUNCTION_LETIMPAR_NUM" 	  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 226: break;
          case 112: 
            { return retornarSimbolo(FUNCTION_NUM_ALEATORIO      , "FUNCTION_NUM_ALEATORIO"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 227: break;
          case 113: 
            { return retornarSimbolo(GET_ELEMEN_BY_ID            , "GET_ELEMEN_BY_ID"            , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 228: break;
          case 114: 
            { return retornarSimbolo(PROCESS_VAL , "PROCESS_VAL" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 229: break;
          case 115: 
            { return retornarSimbolo(FUNCTION_CARACTER_ALEATORIO , "FUNCTION_CARACTER_ALEATORIO" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 230: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerGCIC [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerGCIC scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerGCIC(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
