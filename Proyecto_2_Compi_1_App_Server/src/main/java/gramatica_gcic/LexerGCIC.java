/* The following code was generated by JFlex 1.7.0 */

/*Primera seccion, librerias */
package gramatica_gcic;
import java_cup.runtime.*;
import static gramatica_gcic.sym.*;
import clasesDAO.Token;
import clasesDAO.TokenError;
import java.util.ArrayList;

/*Segunda seccion, config*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex_gcic.jflex</tt>
 */
public class LexerGCIC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\112\3\1\1\112\2\1\22\112\1\55\1\21\1\114\1\116\1\123"+
    "\1\2\1\20\1\124\1\10\1\11\1\24\1\22\1\14\1\23\1\126"+
    "\1\25\1\117\1\54\10\121\1\16\1\15\1\4\1\3\1\5\1\113"+
    "\1\111\1\34\1\42\1\26\1\35\1\33\1\107\1\30\1\32\1\31"+
    "\1\105\1\41\1\37\1\47\1\40\1\43\1\46\1\105\1\52\1\45"+
    "\1\36\1\50\1\106\1\110\1\51\1\44\1\105\1\6\1\113\1\7"+
    "\1\113\1\27\1\113\1\63\1\62\1\64\1\72\1\60\1\61\1\66"+
    "\1\56\1\76\1\122\1\65\1\73\1\100\1\71\1\67\1\103\1\120"+
    "\1\57\1\75\1\74\1\70\1\53\1\104\1\102\1\101\1\77\1\12"+
    "\1\17\1\13\1\113\u1f99\0\1\125\1\125\2\0\1\115\1\115\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udff2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\15\27"+
    "\1\30\17\27\2\31\1\1\1\30\1\1\2\0\4\27"+
    "\1\32\15\27\1\31\25\27\1\33\2\27\1\31\41\0"+
    "\1\34\11\27\1\35\5\27\1\36\2\27\1\37\10\27"+
    "\1\40\7\27\1\41\12\27\1\42\4\27\1\31\1\43"+
    "\1\0\1\44\11\0\1\45\30\0\2\46\1\0\2\47"+
    "\1\50\1\0\4\27\2\51\6\27\1\52\5\27\1\53"+
    "\2\27\1\54\1\55\1\27\1\56\1\57\7\27\1\40"+
    "\1\60\1\27\1\61\3\27\1\62\1\27\1\63\3\27"+
    "\1\64\1\27\1\65\1\27\1\66\4\27\1\31\6\0"+
    "\1\67\31\0\1\70\2\0\2\27\1\71\1\27\1\72"+
    "\25\27\1\40\4\27\1\73\1\74\6\27\1\75\1\76"+
    "\1\31\6\0\1\77\1\0\1\100\2\0\1\101\17\0"+
    "\1\102\1\27\1\103\2\27\1\104\1\105\4\27\1\106"+
    "\1\27\1\107\1\110\7\27\1\111\1\27\1\40\1\112"+
    "\10\27\1\113\1\27\1\31\15\0\1\114\1\0\1\115"+
    "\4\0\1\116\1\117\13\27\1\120\1\27\1\121\3\27"+
    "\1\122\1\27\1\123\1\124\1\27\1\125\1\126\2\0"+
    "\1\127\3\0\1\130\4\0\1\131\1\27\1\132\1\133"+
    "\1\27\1\134\14\27\4\0\1\135\1\0\1\136\4\27"+
    "\1\137\3\27\1\140\1\27\1\141\3\27\3\0\1\142"+
    "\2\27\1\143\1\27\1\144\2\27\1\145\1\27\1\146"+
    "\3\0\1\147\1\150\3\27\1\151\1\27\2\0\1\27"+
    "\1\152\2\27\1\0\1\27\1\153\1\154\1\155\4\27"+
    "\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\127\0\127\0\127\0\256\0\127\0\127"+
    "\0\127\0\127\0\127\0\127\0\127\0\127\0\127\0\127"+
    "\0\127\0\127\0\u0105\0\127\0\u015c\0\127\0\127\0\u01b3"+
    "\0\u020a\0\u0261\0\u02b8\0\u030f\0\u0366\0\u03bd\0\u0414\0\u046b"+
    "\0\u04c2\0\u0519\0\u0570\0\u05c7\0\u061e\0\u0675\0\u06cc\0\u0723"+
    "\0\u077a\0\u07d1\0\u0828\0\u087f\0\u08d6\0\u092d\0\u0984\0\u09db"+
    "\0\u0a32\0\u0a89\0\u0ae0\0\u0b37\0\u0b8e\0\u0be5\0\u0c3c\0\u0c93"+
    "\0\u0cea\0\u0d41\0\u0d98\0\u015c\0\u0def\0\u0e46\0\u0e9d\0\u020a"+
    "\0\u0ef4\0\u0f4b\0\u0fa2\0\u0ff9\0\u1050\0\u10a7\0\u10fe\0\u1155"+
    "\0\u11ac\0\u1203\0\u125a\0\u12b1\0\u1308\0\u135f\0\u13b6\0\u140d"+
    "\0\u1464\0\u14bb\0\u1512\0\u1569\0\u15c0\0\u1617\0\u166e\0\u16c5"+
    "\0\u171c\0\u1773\0\u17ca\0\u1821\0\u1878\0\u18cf\0\u1926\0\u197d"+
    "\0\u19d4\0\u1a2b\0\u1a82\0\u020a\0\u1ad9\0\u1b30\0\u1b87\0\u1bde"+
    "\0\u1c35\0\u1c8c\0\u1ce3\0\u1d3a\0\u1d91\0\u1de8\0\u1e3f\0\u1e96"+
    "\0\u1eed\0\u1f44\0\u1f9b\0\u1ff2\0\u2049\0\u20a0\0\u20f7\0\u214e"+
    "\0\u21a5\0\u21fc\0\u2253\0\u22aa\0\u2301\0\u2358\0\u23af\0\u2406"+
    "\0\u245d\0\u24b4\0\u250b\0\u2562\0\u25b9\0\u2610\0\u2667\0\u26be"+
    "\0\u0d98\0\u2715\0\u276c\0\u27c3\0\u281a\0\u2871\0\u28c8\0\u291f"+
    "\0\u2976\0\u29cd\0\u020a\0\u2a24\0\u2a7b\0\u2ad2\0\u2b29\0\u2b80"+
    "\0\u020a\0\u2bd7\0\u2c2e\0\u020a\0\u2c85\0\u2cdc\0\u2d33\0\u2d8a"+
    "\0\u2de1\0\u2e38\0\u2e8f\0\u2ee6\0\u2f3d\0\u2f94\0\u2feb\0\u3042"+
    "\0\u3099\0\u30f0\0\u3147\0\u319e\0\u020a\0\u31f5\0\u324c\0\u32a3"+
    "\0\u32fa\0\u3351\0\u33a8\0\u33ff\0\u3456\0\u34ad\0\u3504\0\u020a"+
    "\0\u355b\0\u35b2\0\u3609\0\u3660\0\u36b7\0\127\0\u370e\0\127"+
    "\0\u3765\0\u37bc\0\u3813\0\u386a\0\u38c1\0\u3918\0\u396f\0\u39c6"+
    "\0\u3a1d\0\127\0\u3a74\0\u3acb\0\u3b22\0\u3b79\0\u3bd0\0\u3c27"+
    "\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda\0\u3e31\0\u3e88\0\u3edf"+
    "\0\u3f36\0\u3f8d\0\u3fe4\0\u403b\0\u4092\0\u40e9\0\u4140\0\u4197"+
    "\0\u41ee\0\u4245\0\u25b9\0\127\0\u429c\0\u25b9\0\127\0\127"+
    "\0\u42f3\0\u434a\0\u43a1\0\u43f8\0\u444f\0\u020a\0\127\0\u44a6"+
    "\0\u44fd\0\u4554\0\u45ab\0\u4602\0\u4659\0\u020a\0\u46b0\0\u4707"+
    "\0\u475e\0\u47b5\0\u480c\0\u020a\0\u4863\0\u48ba\0\u020a\0\u020a"+
    "\0\u4911\0\u020a\0\u4968\0\u49bf\0\u4a16\0\u4a6d\0\u4ac4\0\u4b1b"+
    "\0\u4b72\0\u4bc9\0\u4c20\0\u020a\0\u4c77\0\u020a\0\u4cce\0\u4d25"+
    "\0\u4d7c\0\u020a\0\u4dd3\0\u020a\0\u4e2a\0\u4e81\0\u4ed8\0\u020a"+
    "\0\u4f2f\0\u020a\0\u4f86\0\u020a\0\u4fdd\0\u5034\0\u508b\0\u50e2"+
    "\0\u5139\0\u5190\0\u51e7\0\u523e\0\u5295\0\u52ec\0\u5343\0\127"+
    "\0\u539a\0\u53f1\0\u5448\0\u549f\0\u54f6\0\u554d\0\u55a4\0\u55fb"+
    "\0\u5652\0\u56a9\0\u5700\0\u5757\0\u57ae\0\u5805\0\u585c\0\u58b3"+
    "\0\u590a\0\u5961\0\u59b8\0\u5a0f\0\u5a66\0\u5abd\0\u5b14\0\u5b6b"+
    "\0\u5bc2\0\127\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e\0\u020a\0\u5d75"+
    "\0\u020a\0\u5dcc\0\u5e23\0\u5e7a\0\u5ed1\0\u5f28\0\u5f7f\0\u5fd6"+
    "\0\u602d\0\u6084\0\u60db\0\u6132\0\u6189\0\u61e0\0\u6237\0\u628e"+
    "\0\u62e5\0\u633c\0\u6393\0\u63ea\0\u6441\0\u6498\0\u64ef\0\u6546"+
    "\0\u659d\0\u65f4\0\u664b\0\u020a\0\u020a\0\u66a2\0\u66f9\0\u6750"+
    "\0\u67a7\0\u67fe\0\u6855\0\u020a\0\u020a\0\u68ac\0\u6903\0\u695a"+
    "\0\u69b1\0\u6a08\0\u6a5f\0\u6ab6\0\127\0\u6b0d\0\127\0\u6b64"+
    "\0\u6bbb\0\127\0\u6c12\0\u6c69\0\u6cc0\0\u6d17\0\u6d6e\0\u6dc5"+
    "\0\u6e1c\0\u6e73\0\u6eca\0\u6f21\0\u6f78\0\u6fcf\0\u7026\0\u707d"+
    "\0\u70d4\0\u020a\0\u712b\0\u020a\0\u7182\0\u71d9\0\u020a\0\u020a"+
    "\0\u7230\0\u7287\0\u72de\0\u7335\0\u020a\0\u738c\0\u020a\0\u020a"+
    "\0\u73e3\0\u743a\0\u7491\0\u74e8\0\u753f\0\u7596\0\u75ed\0\u020a"+
    "\0\u7644\0\u0be5\0\u020a\0\u769b\0\u76f2\0\u7749\0\u77a0\0\u77f7"+
    "\0\u784e\0\u78a5\0\u78fc\0\u020a\0\u7953\0\u79aa\0\u7a01\0\u7a58"+
    "\0\u7aaf\0\u7b06\0\u7b5d\0\u7bb4\0\u7c0b\0\u7c62\0\u7cb9\0\u7d10"+
    "\0\u7d67\0\u7dbe\0\u7e15\0\127\0\u7e6c\0\127\0\u7ec3\0\u7f1a"+
    "\0\u7f71\0\u7fc8\0\u020a\0\u020a\0\u801f\0\u8076\0\u80cd\0\u8124"+
    "\0\u817b\0\u81d2\0\u8229\0\u8280\0\u82d7\0\u832e\0\u8385\0\u020a"+
    "\0\u83dc\0\u020a\0\u8433\0\u848a\0\u84e1\0\u020a\0\u8538\0\u020a"+
    "\0\u020a\0\u858f\0\u020a\0\u0be5\0\u85e6\0\u863d\0\127\0\u8694"+
    "\0\u86eb\0\u8742\0\127\0\u8799\0\u87f0\0\u8847\0\u889e\0\u5c70"+
    "\0\u88f5\0\u020a\0\u020a\0\u894c\0\u020a\0\u89a3\0\u89fa\0\u8a51"+
    "\0\u8aa8\0\u8aff\0\u8b56\0\u8bad\0\u8c04\0\u8c5b\0\u8cb2\0\u8d09"+
    "\0\u8d60\0\u8db7\0\u8e0e\0\u8e65\0\u8ebc\0\127\0\u8f13\0\127"+
    "\0\u8f6a\0\u8fc1\0\u9018\0\u906f\0\u020a\0\u90c6\0\u911d\0\u9174"+
    "\0\u8bad\0\u91cb\0\u015c\0\u9222\0\u9279\0\u92d0\0\u9327\0\u937e"+
    "\0\u93d5\0\u020a\0\u942c\0\u9483\0\u020a\0\u94da\0\u020a\0\u9531"+
    "\0\u9588\0\u020a\0\u95df\0\u015c\0\u9636\0\u968d\0\u96e4\0\127"+
    "\0\u020a\0\u973b\0\u9792\0\u97e9\0\u015c\0\u9840\0\u9897\0\u98ee"+
    "\0\u9945\0\u020a\0\u999c\0\u99f3\0\u9a4a\0\u9aa1\0\u020a\0\u020a"+
    "\0\127\0\u9af8\0\u9b4f\0\u9ba6\0\u9bfd\0\u020a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\31\1\42\2\31\1\43\3\31\1\44\1\31\1\45"+
    "\1\3\1\46\1\47\1\31\1\50\1\51\1\52\1\53"+
    "\1\31\1\54\1\55\1\31\1\56\1\57\1\31\1\60"+
    "\1\61\1\62\5\31\1\63\3\31\1\64\1\65\1\2"+
    "\1\66\2\67\1\66\1\70\1\31\1\45\2\31\2\71"+
    "\1\66\150\0\1\72\126\0\1\73\130\0\1\74\2\0"+
    "\27\74\1\0\33\74\6\0\5\74\26\0\1\74\2\0"+
    "\1\31\1\75\4\31\1\76\20\31\1\0\33\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\27\31\1\0\33\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\12\31\1\77\14\31\1\0\31\31\1\100\1\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\22\31\1\101\4\31\1\0\33\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\11\31\1\102\1\103\10\31\1\104\3\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\11\31\1\105\5\31"+
    "\1\106\7\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\5\31"+
    "\1\107\21\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\4\31"+
    "\1\110\22\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\5\31"+
    "\1\111\21\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\22\31"+
    "\1\112\4\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\12\31"+
    "\1\113\14\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\24\31"+
    "\1\114\2\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\5\31"+
    "\1\115\21\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\26\0\26\66\1\45\1\0"+
    "\34\66\1\0\1\66\2\0\1\66\1\45\1\66\1\45"+
    "\2\66\2\0\1\116\23\0\1\74\2\0\27\31\1\0"+
    "\1\31\1\117\1\120\30\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\31"+
    "\1\0\11\31\1\121\21\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\31"+
    "\1\0\5\31\1\122\3\31\1\123\21\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\5\31\1\124\3\31\1\125\21\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\15\31\1\126\15\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\1\31\1\75\25\31\1\0\1\127"+
    "\10\31\1\130\3\31\1\131\15\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\2\31\1\132\30\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\13\31\1\133\17\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\5\31\1\134\25\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\2\31\1\135\30\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\1\31\1\136\1\137\20\31\1\140\7\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\1\31\1\141\14\31"+
    "\1\142\14\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\13\31"+
    "\1\143\1\144\16\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\27\31\1\0"+
    "\20\31\1\145\12\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\4\31\1\146"+
    "\22\31\1\0\33\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\26\0\27\66\1\0\10\66\1\147"+
    "\23\66\1\0\1\66\2\0\6\66\2\0\1\66\26\0"+
    "\27\66\1\0\34\66\1\0\1\66\2\0\6\66\2\0"+
    "\1\66\1\0\1\150\21\151\1\152\2\151\1\153\1\152"+
    "\1\154\3\152\1\155\10\152\1\156\1\157\4\152\1\160"+
    "\1\161\1\150\1\152\1\162\1\152\1\163\1\164\1\165"+
    "\1\166\1\152\1\167\1\170\1\152\1\171\1\152\1\172"+
    "\1\173\1\174\2\152\1\175\1\176\1\152\1\177\1\200"+
    "\1\152\1\160\2\152\1\151\1\150\1\151\2\0\1\201"+
    "\1\202\1\152\1\161\1\203\1\152\1\151\1\0\1\151"+
    "\26\0\27\66\1\0\34\66\1\0\1\66\2\0\6\66"+
    "\2\0\1\116\1\0\1\204\21\205\1\206\2\205\26\206"+
    "\1\205\1\204\33\206\1\205\1\204\1\205\1\207\1\0"+
    "\2\205\1\206\1\205\2\206\1\205\1\0\1\205\23\0"+
    "\1\210\105\0\110\211\1\0\2\211\1\0\7\211\1\0"+
    "\1\211\23\0\1\74\2\0\2\31\1\212\1\213\1\214"+
    "\2\31\1\215\1\216\1\217\2\31\1\220\1\221\1\31"+
    "\1\222\1\223\6\31\1\0\1\214\3\31\1\220\3\31"+
    "\1\212\1\221\2\31\1\215\1\217\1\216\1\222\1\213"+
    "\4\31\1\223\5\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\24\31\1\224"+
    "\2\31\1\0\33\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\3\31\1\225"+
    "\13\31\1\226\7\31\1\0\33\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\12\31\1\227\14\31\1\0\33\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\17\31\1\230\7\31\1\0\33\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\7\31\1\231\17\31\1\0\33\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\3\31\1\232\23\31\1\0\33\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\5\31\1\233\21\31\1\0\33\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\1\234\26\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\17\31"+
    "\1\235\7\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\5\31"+
    "\1\236\21\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\10\31"+
    "\1\237\16\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\21\31"+
    "\1\240\5\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\1\31"+
    "\1\241\25\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\15\31"+
    "\1\242\11\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\20\31"+
    "\1\243\6\31\1\0\30\31\1\244\2\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\26\0\26\66"+
    "\1\245\1\0\34\66\1\0\1\66\2\0\1\66\1\245"+
    "\1\66\1\245\2\66\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\2\31\1\246\30\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\20\31\1\247\12\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\26\31\1\250\4\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\15\31\1\251\15\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\13\31\1\252\17\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\6\31\1\253\24\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\11\31\1\254\21\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\16\31\1\255\14\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\5\31\1\256\25\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\15\31\1\257\15\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\5\31\1\260\25\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\16\31\1\261\14\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\6\31\1\262\24\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\22\31\1\263\10\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\6\31\1\264\24\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\12\31\1\265\20\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\24\31\1\266\6\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\25\31\1\267\5\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\6\31\1\270\24\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\1\31\1\271\31\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\16\31\1\272\14\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\14\31\1\273\16\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\3\31\1\274\23\31\1\0\33\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\26\0\27\66\1\0"+
    "\15\66\1\275\16\66\1\0\1\66\2\0\6\66\2\0"+
    "\1\66\1\0\1\150\21\151\1\152\2\151\1\153\1\152"+
    "\1\154\3\152\1\155\10\152\1\156\1\157\4\152\1\160"+
    "\1\161\1\150\1\152\1\162\1\152\1\163\1\164\1\165"+
    "\1\166\1\152\1\167\1\170\1\152\1\171\1\152\1\172"+
    "\1\173\1\174\2\152\1\175\1\176\1\152\1\177\1\200"+
    "\1\152\1\160\2\152\1\151\1\150\1\151\2\276\1\201"+
    "\1\202\1\152\1\161\1\203\1\152\1\151\1\0\1\151"+
    "\1\0\113\151\2\276\7\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\33\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\15\152\1\301\11\152\1\277"+
    "\11\152\1\301\21\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\5\152\1\302\21\152\1\277\2\152\1\302\30\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\24\152\1\303"+
    "\2\152\1\277\1\152\1\303\31\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\6\152\1\304\20\152\1\277\5\152"+
    "\1\304\25\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\24\152\1\305\2\152\1\277\33\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\5\152\1\306\21\152\1\277\2\152"+
    "\1\306\30\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\307\1\310\51\151\1\161"+
    "\1\307\25\151\1\311\6\151\1\307\1\151\2\312\1\151"+
    "\1\161\1\151\1\161\3\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\2\152\1\313\2\152"+
    "\1\314\3\152\1\315\6\152\1\316\12\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\12\152\1\317"+
    "\20\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\15\152\1\320\15\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\24\152\1\303\2\152\1\277\1\152\1\303"+
    "\31\152\1\151\1\277\1\151\2\300\1\151\1\152\1\321"+
    "\3\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\15\152\1\301\11\152\1\277\1\322\1\152\1\323"+
    "\6\152\1\324\21\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\5\152\1\302\21\152\1\277\1\152\1\325\1\302"+
    "\30\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\15\152\1\326\15\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\27\152\1\277\5\152\1\327\4\152\1\330"+
    "\20\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\2\152\1\331\15\152\1\332\12\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\2\152\1\333"+
    "\30\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\6\152"+
    "\1\304\20\152\1\277\5\152\1\304\12\152\1\334\12\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\27\152\1\277"+
    "\5\152\1\335\25\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\2\152\1\336\30\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\12\152\1\337"+
    "\20\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\1\340\32\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\25\151\1\341\1\151"+
    "\25\341\1\151\33\341\3\151\2\276\1\151\4\341\2\151"+
    "\1\0\1\151\1\0\1\307\1\310\51\151\1\161\1\307"+
    "\24\151\1\201\1\311\6\151\1\307\1\151\2\312\1\151"+
    "\1\161\1\151\1\161\3\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\12\152\1\342\20\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\204\21\205\1\206\2\205\26\206\1\205"+
    "\1\204\33\206\1\205\1\204\1\205\2\0\2\205\1\206"+
    "\1\205\2\206\1\343\1\344\1\205\1\0\113\205\2\0"+
    "\6\205\1\343\1\344\1\205\1\0\1\345\21\205\1\206"+
    "\2\205\27\206\1\345\33\206\1\205\1\345\1\205\2\0"+
    "\1\205\5\206\1\346\1\347\1\205\124\0\2\350\24\0"+
    "\1\351\126\0\1\74\2\0\1\352\26\31\1\0\6\31"+
    "\1\352\24\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\12\31\1\353\6\31"+
    "\1\354\5\31\1\0\13\31\1\353\6\31\1\354\10\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\5\31\1\355\20\31\1\356\1\357"+
    "\2\31\1\355\30\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\3\31\1\360"+
    "\23\31\1\0\20\31\1\360\12\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\3\31\1\361\1\31\1\362\21\31\1\0\2\31\1\362"+
    "\15\31\1\361\12\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\3\31\1\363"+
    "\23\31\1\0\20\31\1\363\12\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\15\31\1\364\4\31\1\365\1\31\1\366\2\31\1\0"+
    "\1\31\1\366\7\31\1\364\1\365\20\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\20\31\1\367\6\31\1\0\25\31\1\367\5\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\1\370\4\31\1\371\12\31\1\372"+
    "\6\31\1\0\2\31\1\371\3\31\1\370\16\31\1\372"+
    "\5\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\6\31\1\373\20\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\10\31\1\374\16\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\5\31\1\375\21\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\10\31\1\376\16\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\5\31\1\377\21\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\10\31\1\u0100\16\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\24\31\1\u0101\2\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\1\u0102\26\31\1\0\33\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\12\31\1\u0103\14\31\1\0\33\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\3\31\1\u0104\14\31\1\u0105\6\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\1\31\1\u0106\25\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\11\31\1\u0107\15\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\1\u0108\26\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\5\31\1\u0109\21\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\5\31\1\u010a\21\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\26\0\26\66\1\u010b\1\0\34\66\1\0\1\66"+
    "\2\0\1\66\1\u010b\1\66\1\u010b\2\66\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\3\31\1\u010c\27\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\10\31\1\u010d\22\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\17\31\1\u010e\13\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\17\31\1\265\13\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\16\31\1\u010f\14\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\7\31\1\u0110\23\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\15\31\1\u0111\15\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\1\31\1\u0112\31\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\11\31\1\u0113\5\31"+
    "\1\u0114\13\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\17\31"+
    "\1\u0115\13\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\5\31\1\u0116\21\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\15\31"+
    "\1\u0117\15\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\2\31"+
    "\1\u0118\30\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\20\31"+
    "\1\u0119\12\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\2\31"+
    "\1\u011a\30\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\16\31"+
    "\1\u011b\14\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\2\31"+
    "\1\u011c\30\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\20\31"+
    "\1\u011d\12\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\2\31"+
    "\1\u011e\30\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\16\31"+
    "\1\u011f\14\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\11\31\1\u0120\15\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\26\0\27\66\1\0\11\66\1\u0121\22\66"+
    "\1\0\1\66\2\0\6\66\2\0\1\66\1\0\1\277"+
    "\53\151\1\277\34\151\1\277\1\151\2\300\7\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\22\152\1\u0122"+
    "\4\152\1\277\12\152\1\u0122\20\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\12\152\1\u0123\14\152\1\277\13\152"+
    "\1\u0123\17\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\3\152\1\u0124\23\152\1\277\20\152\1\u0124\12\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\12\152\1\u0125\14\152"+
    "\1\277\13\152\1\u0125\17\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\15\152\1\u0126\11\152\1\277\33\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\24\152\1\u0127\2\152"+
    "\1\277\1\152\1\u0127\31\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\307\1\310"+
    "\52\151\1\307\25\151\1\311\6\151\1\307\1\151\2\312"+
    "\7\151\1\0\1\151\1\0\1\310\53\151\1\310\34\151"+
    "\1\310\1\151\2\u0128\7\151\1\0\1\151\1\0\101\151"+
    "\1\u0129\11\151\2\276\7\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\14\152\1\u012a\16\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\27\152\1\277"+
    "\14\152\1\u012b\16\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\26\152\1\u012c\4\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\10\152\1\u012d"+
    "\22\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\6\152\1\u012e\24\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\27\152\1\277\5\152\1\u012f\4\152\1\u0130"+
    "\20\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\12\152\1\u0131\20\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\27\152\1\277\2\152\1\u0132\30\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\27\152\1\277\13\152"+
    "\1\u0133\17\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\22\152\1\u0122\4\152\1\277\12\152\1\u0122\2\152\1\u0134"+
    "\15\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\2\152\1\u0135\2\152\1\u0136\25\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\20\152\1\u0137"+
    "\12\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\25\152"+
    "\1\u0136\1\152\1\277\33\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\27\152\1\277\22\152\1\u0138\10\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\27\152\1\277\3\152"+
    "\1\u0139\27\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\22\152\1\u0130\10\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\5\152\1\u013a\16\152"+
    "\1\u013b\6\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\15\152\1\u013c\15\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\1\152\1\u013d\31\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\27\152\1\277"+
    "\15\152\1\u013e\15\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\1\152\1\u013f\31\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\20\152\1\u0140"+
    "\12\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\u0141\24\151\1\341\1\151\25\341"+
    "\1\u0141\33\341\1\151\1\u0141\1\151\2\u0142\1\151\4\341"+
    "\2\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\17\152\1\u0143\13\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\345"+
    "\53\205\1\345\34\205\1\345\1\205\2\0\6\205\1\346"+
    "\1\347\1\205\1\0\114\u0144\1\0\7\u0144\1\0\1\u0144"+
    "\23\0\1\74\2\0\3\31\1\u0145\23\31\1\0\20\31"+
    "\1\u0145\12\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\20\31\1\u0146\6\31"+
    "\1\0\25\31\1\u0146\5\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\2\31"+
    "\1\u0147\24\31\1\0\10\31\1\u0147\22\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\6\31\1\u0148\20\31\1\0\5\31\1\u0148\25\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\25\31\1\u0149\1\31\1\0\30\31"+
    "\1\u0149\2\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\10\31\1\u014a\16\31"+
    "\1\0\16\31\1\u014a\14\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\23\31"+
    "\1\u014b\3\31\1\0\24\31\1\u014b\6\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\12\31\1\u014c\14\31\1\0\13\31\1\u014c\17\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\7\31\1\u014d\17\31\1\0\14\31"+
    "\1\u014d\16\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\10\31\1\u014e\16\31"+
    "\1\0\16\31\1\u014e\14\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\10\31"+
    "\1\u014f\16\31\1\0\16\31\1\u014f\14\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\24\31\1\u0150\2\31\1\0\1\31\1\u0150\31\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\11\31\1\u0151\15\31\1\0\15\31"+
    "\1\u0151\15\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\6\31\1\u0152\20\31"+
    "\1\0\5\31\1\u0152\25\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\1\u0153"+
    "\26\31\1\0\33\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\24\31\1\u0154"+
    "\2\31\1\0\33\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\3\31\1\u0155"+
    "\23\31\1\0\33\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\10\31\1\u0156"+
    "\16\31\1\0\33\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\27\31\1\0"+
    "\32\31\1\u0157\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\21\31\1\u0158\5\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\6\31\1\u0159\20\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\6\31\1\u015a\20\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\15\31\1\u015b\11\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\5\31\1\u015c\21\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\6\31\1\u015d\20\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\24\31\1\u015e\2\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\26\0\26\66\1\u015f\1\0\34\66\1\0"+
    "\1\66\2\0\1\66\1\u015f\1\66\1\u015f\2\66\2\0"+
    "\1\66\23\0\1\74\2\0\27\31\1\0\1\u0160\32\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\u0161\2\0\27\31\1\0\33\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\10\31\1\u0162\22\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\2\31\1\u0163\30\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\1\31\1\u0164\31\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\17\31\1\u0165\13\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\15\31\1\u0166\15\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\20\31\1\u0167\12\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\22\31\1\u0168\10\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\u0169"+
    "\2\0\27\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\31"+
    "\1\0\13\31\1\u016a\17\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\31"+
    "\1\0\10\31\1\u016b\22\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\31"+
    "\1\0\1\u016c\32\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\5\31\1\u016d"+
    "\21\31\1\0\33\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\26\0\27\66\1\0\4\66\1\u016e"+
    "\27\66\1\0\1\66\2\0\6\66\2\0\1\66\1\0"+
    "\1\277\21\151\1\152\2\151\24\152\1\u016f\2\152\1\277"+
    "\1\152\1\u016f\31\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\5\152\1\u0170\21\152\1\277\2\152\1\u0170\30\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\6\152\1\u0171"+
    "\20\152\1\277\5\152\1\u0171\25\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\17\152\1\u0172\7\152\1\277\17\152"+
    "\1\u0172\13\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\1\u0173\26\152\1\277\33\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\7\152\1\u0174\17\152\1\277\14\152\1\u0174"+
    "\16\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\u0129\53\151\1\u0129\34\151\1\u0129"+
    "\1\151\2\u0175\7\151\1\0\1\151\1\0\1\u0176\21\151"+
    "\1\152\2\151\27\152\1\u0176\33\152\1\151\1\u0176\1\151"+
    "\2\u0177\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\20\152\1\u0178\12\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\u0179\21\151\1\152\2\151\27\152\1\u0179"+
    "\33\152\1\151\1\u0179\1\151\2\u017a\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\1\u0139\32\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\1\u017b\32\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\6\152\1\u017c\24\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\27\152\1\277"+
    "\2\152\1\u012a\30\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\5\152\1\u012a\25\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\6\152\1\u017d"+
    "\24\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\16\152\1\u017e\14\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\27\152\1\277\12\152\1\u017f\20\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\27\152\1\277\2\152"+
    "\1\u0180\30\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\23\152\1\u012a\7\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\25\152\1\u0130\1\152\1\277\33\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\27\152\1\277"+
    "\4\152\1\u0181\26\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\16\152\1\u0182\14\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\15\152\1\u012a"+
    "\15\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\16\152\1\u0183\14\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\25\152\1\u0184\1\152\1\277\33\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\27\152\1\277\11\152"+
    "\1\u0185\21\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\15\152\1\u0186\15\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\25\152\1\u0187\5\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\27\152\1\277"+
    "\16\152\1\u0130\14\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\u0141\53\151\1\u0141"+
    "\34\151\1\u0141\1\151\2\u0142\7\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\16\152\1\u0188"+
    "\14\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\22\u0144\1\u0189\71\u0144\1\0\7\u0144"+
    "\1\0\1\u0144\23\0\1\74\2\0\1\u018a\26\31\1\0"+
    "\6\31\1\u018a\24\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\22\31\1\u018b"+
    "\4\31\1\0\12\31\1\u018b\20\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\7\31\1\u018c\17\31\1\0\14\31\1\u018c\16\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\11\31\1\u018d\15\31\1\0\15\31\1\u018d"+
    "\15\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\10\31\1\u018e\16\31\1\0"+
    "\16\31\1\u018e\14\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\13\31\1\u018f"+
    "\13\31\1\0\7\31\1\u018f\23\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\16\31\1\u0190\10\31\1\0\23\31\1\u0190\7\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\10\31\1\u0191\16\31\1\0\16\31\1\u0191"+
    "\14\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\3\31\1\u0192\23\31\1\0"+
    "\20\31\1\u0192\12\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\3\31\1\u0193"+
    "\23\31\1\0\20\31\1\u0193\12\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\5\31\1\u0194\21\31\1\0\2\31\1\u0194\30\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\21\31\1\u0195\5\31\1\0\22\31\1\u0195"+
    "\10\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\10\31\1\u0196\16\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\10\31\1\u0197\16\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\11\31\1\u0198\15\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\1\31\1\u0199\25\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\4\31\1\u019a\22\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\20\31\1\u019b\6\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\24\31\1\u019c\2\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\11\31\1\u019d\15\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\6\31\1\u019e\20\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\17\31\1\u019f\7\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\10\31\1\u01a0\16\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\17\31\1\u01a1\7\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\26\0\26\66\1\u01a2\1\0\34\66\1\0\1\66"+
    "\2\0\3\66\1\u01a2\2\66\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\16\31\1\u01a3\14\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\74\1\0\3\74\1\u01a4\13\74\1\u01a5\13\74"+
    "\6\0\5\74\26\0\1\74\2\0\27\31\1\0\1\31"+
    "\1\u01a6\31\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\5\31"+
    "\1\u01a7\25\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\2\31"+
    "\1\u01a8\30\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\6\31"+
    "\1\u01a9\24\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\31\1\0\5\31"+
    "\1\u01aa\25\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\74\1\0\5\74"+
    "\1\u01ab\25\74\6\0\5\74\26\0\1\74\2\0\27\31"+
    "\1\0\10\31\1\u01ac\22\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\31"+
    "\1\0\2\31\1\u01ad\30\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\26\0\27\66\1\0\5\66"+
    "\1\u01ae\26\66\1\0\1\66\2\0\6\66\2\0\1\66"+
    "\1\0\1\277\21\151\1\152\2\151\3\152\1\u01af\23\152"+
    "\1\277\20\152\1\u01af\12\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\25\152\1\u01b0\1\152\1\277\30\152\1\u01b0"+
    "\2\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\11\152"+
    "\1\u01b1\15\152\1\277\15\152\1\u01b1\15\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\u01b2\2\151\27\152\1\277\33\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\5\152\1\u01b3\21\152"+
    "\1\277\33\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\6\152\1\u01b4\20\152\1\277\5\152\1\u01b4\25\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\u0176\53\151\1\u0176\34\151\1\u0176\1\151\2\u0177"+
    "\7\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\11\152\1\u01b5\21\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\u0179"+
    "\53\151\1\u0179\34\151\1\u0179\1\151\2\u017a\7\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\27\152\1\277"+
    "\17\152\1\u01b6\13\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\7\152\1\u012a\23\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\7\152\1\u01b7"+
    "\23\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\2\152\1\u01b8\30\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\27\152\1\277\22\152\1\u01b9\10\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\27\152\1\277\13\152"+
    "\1\u012a\17\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\2\152\1\u01ba\30\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\u01bb"+
    "\21\151\1\152\2\151\27\152\1\u01bb\33\152\1\151\1\u01bb"+
    "\1\151\2\u01bc\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\u01bd\21\151\1\152\2\151\27\152\1\u01bd\33\152\1\151"+
    "\1\u01bd\1\151\2\u01be\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\27\152\1\277\2\152"+
    "\1\u01bf\30\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\11\152\1\u0180\21\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\27\152\1\277\11\152\1\u01c0\21\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\27\152\1\277"+
    "\15\152\1\u0130\15\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\20\152\1\u01c1\12\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\22\u0144\1\u01c2\71\u0144\1\0\7\u0144\1\0\1\u0144\23\0"+
    "\1\74\2\0\10\31\1\u01c3\16\31\1\0\16\31\1\u01c3"+
    "\14\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\5\31\1\u01c4\21\31\1\0"+
    "\2\31\1\u01c4\30\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\6\31\1\u01c5"+
    "\20\31\1\0\5\31\1\u01c5\25\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\15\31\1\u01c6\11\31\1\0\11\31\1\u01c6\21\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\15\31\1\u01c7\11\31\1\0\11\31\1\u01c7"+
    "\21\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\20\31\1\u01c8\6\31\1\0"+
    "\25\31\1\u01c8\5\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\1\u01c9\26\31"+
    "\1\0\6\31\1\u01c9\24\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\5\31"+
    "\1\u01ca\21\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\3\31"+
    "\1\u01cb\23\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\3\31"+
    "\1\u01cc\23\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\6\31"+
    "\1\u01cd\20\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\1\31"+
    "\1\u01ce\25\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\5\31"+
    "\1\u01cf\21\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\7\31"+
    "\1\u01d0\17\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\17\31"+
    "\1\u01d1\7\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\5\31"+
    "\1\u01d2\21\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\74"+
    "\1\0\5\74\1\u01d3\25\74\6\0\5\74\26\0\1\74"+
    "\2\0\27\74\1\0\20\74\1\u01d4\12\74\6\0\5\74"+
    "\26\0\1\74\2\0\27\31\1\0\11\31\1\u01d5\21\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\13\31\1\u01d6\17\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\22\31\1\u01d7\10\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\7\31\1\u01d8\23\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\31\1\0\15\31\1\u01d9\15\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\27\74\1\0\15\74\1\u01da\15\74"+
    "\6\0\5\74\26\0\1\74\2\0\27\31\1\0\1\31"+
    "\1\u01db\31\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\26\0\27\66\1\0\15\66\1\u01dc\16\66"+
    "\1\0\1\66\2\0\6\66\2\0\1\66\1\0\1\277"+
    "\21\151\1\152\2\151\5\152\1\u01dd\21\152\1\277\2\152"+
    "\1\u01dd\30\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\6\152\1\u01b1\20\152\1\277\5\152\1\u01b1\25\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\u01de\21\151\1\152\2\151\27\152\1\u01de\33\152"+
    "\1\151\1\u01de\1\151\2\u01df\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\17\152\1\u01e0"+
    "\7\152\1\277\17\152\1\u01e0\13\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\277"+
    "\21\151\1\152\2\151\17\152\1\u01e1\7\152\1\277\33\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\277\21\151\1\152\2\151\12\152\1\u01b0"+
    "\14\152\1\277\13\152\1\u01b0\17\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\u01e2"+
    "\21\151\1\152\2\151\27\152\1\u01e2\33\152\1\151\1\u01e2"+
    "\1\151\2\u01e3\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\20\152\1\u0131"+
    "\12\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\4\152\1\u01e4\26\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\27\152\1\277\1\152\1\u0182\31\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\277\21\151\1\152\2\151\27\152\1\277\13\152"+
    "\1\u01e5\17\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\27\152\1\277\1\152\1\u01e6\31\152\1\151\1\277\1\151"+
    "\2\300\1\151\5\152\1\151\1\0\1\151\1\0\1\u01bb"+
    "\53\151\1\u01bb\34\151\1\u01bb\1\151\2\u01bc\7\151\1\0"+
    "\1\151\1\0\1\u01bd\53\151\1\u01bd\34\151\1\u01bd\1\151"+
    "\2\u01be\7\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\1\152\1\u012a\31\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\26\152\1\u012a"+
    "\4\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\3\152\1\u01e7\27\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\4\u0144\1\u01e8"+
    "\15\u0144\1\u01c2\71\u0144\1\0\7\u0144\1\0\1\u0144\23\0"+
    "\1\74\2\0\24\31\1\u01e9\2\31\1\0\1\31\1\u01e9"+
    "\31\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\12\31\1\u01ea\14\31\1\0"+
    "\13\31\1\u01ea\17\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\12\31\1\u01eb"+
    "\14\31\1\0\13\31\1\u01eb\17\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\10\31\1\u01ec\16\31\1\0\16\31\1\u01ec\14\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\10\31\1\u01ed\16\31\1\0\16\31\1\u01ed"+
    "\14\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\24\31\1\u01ee\2\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\12\31\1\u01ef\14\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\11\31\1\u01f0\15\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\24\31\1\u01f1\2\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\12\31\1\u01f2\14\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\6\31\1\u01f3\20\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\1\31\1\u01f4\25\31\1\0"+
    "\33\31\1\66\1\0\1\66\2\0\1\66\5\31\2\0"+
    "\1\66\23\0\1\74\2\0\27\74\1\0\22\74\1\u01f5"+
    "\10\74\6\0\5\74\26\0\1\74\2\0\27\74\1\0"+
    "\21\74\1\u01f6\11\74\6\0\5\74\26\0\1\74\2\0"+
    "\27\31\1\0\12\31\1\u01f7\20\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\31\1\0\2\31\1\u01f8\30\31\1\66\1\0\1\66"+
    "\2\0\1\66\5\31\2\0\1\66\23\0\1\74\2\0"+
    "\27\74\1\0\20\74\1\u01f9\12\74\6\0\5\74\4\0"+
    "\1\277\21\151\1\152\2\151\24\152\1\u01b1\2\152\1\277"+
    "\1\152\1\u01b1\31\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\u01de\53\151\1\u01de"+
    "\34\151\1\u01de\1\151\2\u01df\7\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\5\152\1\u01fa\21\152\1\277"+
    "\2\152\1\u01fa\30\152\1\151\1\277\1\151\2\300\1\151"+
    "\5\152\1\151\1\0\1\151\1\0\1\277\21\151\1\152"+
    "\2\151\17\152\1\u01fb\7\152\1\277\33\152\1\151\1\277"+
    "\1\151\2\300\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\u01e2\53\151\1\u01e2\34\151\1\u01e2\1\151\2\u01e3\7\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\27\152"+
    "\1\277\11\152\1\u01fc\21\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\u01fd\21\151"+
    "\1\152\2\151\27\152\1\u01fd\33\152\1\151\1\u01fd\1\151"+
    "\2\u01fe\1\151\5\152\1\151\1\0\1\151\1\0\1\u01ff"+
    "\21\151\1\152\2\151\27\152\1\u01ff\33\152\1\151\1\u01ff"+
    "\1\151\2\u0200\1\151\5\152\1\151\1\0\1\151\1\0"+
    "\1\277\21\151\1\152\2\151\27\152\1\277\23\152\1\u0182"+
    "\7\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\23\0\1\74\2\0\5\31\1\u0201\21\31"+
    "\1\0\2\31\1\u0201\30\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\3\31"+
    "\1\u0202\23\31\1\0\20\31\1\u0202\12\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\1\31\1\u0203\25\31\1\0\33\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\27\31\1\0\31\31\1\u0204\1\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\5\31\1\u0205\21\31\1\0\33\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\1\31\1\u0206\25\31\1\0\33\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\22\31\1\u0207\4\31\1\0\33\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\10\31\1\u0208\16\31\1\0\33\31\1\66\1\0"+
    "\1\66\2\0\1\66\5\31\2\0\1\66\23\0\1\74"+
    "\2\0\1\u0209\1\31\25\u0209\1\0\33\u0209\1\66\1\0"+
    "\1\66\2\0\1\66\4\u0209\1\31\2\0\1\66\23\0"+
    "\1\74\2\0\27\74\1\0\20\74\1\u020a\12\74\6\0"+
    "\5\74\26\0\1\74\2\0\27\74\1\0\2\74\1\u020b"+
    "\30\74\6\0\5\74\26\0\1\74\2\0\27\31\1\0"+
    "\13\31\1\u020c\17\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\27\31\1\0"+
    "\13\31\1\u020d\17\31\1\66\1\0\1\66\2\0\1\66"+
    "\5\31\2\0\1\66\23\0\1\74\2\0\27\74\1\0"+
    "\10\74\1\u020e\22\74\6\0\5\74\4\0\1\277\21\151"+
    "\1\152\2\151\24\152\1\u020f\2\152\1\277\1\152\1\u020f"+
    "\31\152\1\151\1\277\1\151\2\300\1\151\5\152\1\151"+
    "\1\0\1\151\1\0\1\277\21\151\1\152\2\151\1\152"+
    "\1\u0210\25\152\1\277\33\152\1\151\1\277\1\151\2\300"+
    "\1\151\5\152\1\151\1\0\1\151\1\0\1\277\21\151"+
    "\1\152\2\151\27\152\1\277\24\152\1\u0211\6\152\1\151"+
    "\1\277\1\151\2\300\1\151\5\152\1\151\1\0\1\151"+
    "\1\0\1\u01fd\53\151\1\u01fd\34\151\1\u01fd\1\151\2\u01fe"+
    "\7\151\1\0\1\151\1\0\1\u01ff\53\151\1\u01ff\34\151"+
    "\1\u01ff\1\151\2\u0200\7\151\1\0\1\151\23\0\1\74"+
    "\2\0\6\31\1\u0212\20\31\1\0\5\31\1\u0212\25\31"+
    "\1\66\1\0\1\66\2\0\1\66\5\31\2\0\1\66"+
    "\23\0\1\74\2\0\12\31\1\u0213\14\31\1\0\13\31"+
    "\1\u0213\17\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\6\31\1\u0214\20\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\15\31\1\u0215\11\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\12\31\1\u0216\14\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\21\31\1\u0217\5\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\15\31\1\u0218\11\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\74\1\0\15\74"+
    "\1\u0219\15\74\6\0\5\74\26\0\1\74\2\0\27\31"+
    "\1\0\14\31\1\u021a\16\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\14\31"+
    "\1\u021b\12\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\74"+
    "\1\0\13\74\1\u021c\17\74\6\0\5\74\4\0\1\277"+
    "\21\151\1\152\2\151\3\152\1\u021d\23\152\1\277\20\152"+
    "\1\u021d\12\152\1\151\1\277\1\151\2\300\1\151\5\152"+
    "\1\151\1\0\1\151\1\0\1\277\21\151\1\152\2\151"+
    "\1\u021e\1\152\25\u021e\1\277\33\u021e\1\151\1\277\1\151"+
    "\2\300\1\151\4\u021e\1\152\1\151\1\0\1\151\1\0"+
    "\1\u021f\21\151\1\152\2\151\27\152\1\u021f\33\152\1\151"+
    "\1\u021f\1\151\2\u0220\1\151\5\152\1\151\1\0\1\151"+
    "\23\0\1\74\2\0\2\31\1\u0221\24\31\1\0\10\31"+
    "\1\u0221\22\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\11\31\1\u0222\15\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\22\31\1\u0223\4\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\24\31\1\u0224\2\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\27\74\1\0\23\74"+
    "\1\u0225\7\74\6\0\5\74\26\0\1\74\2\0\27\31"+
    "\1\0\23\31\1\u0226\7\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\1\0\1\277\21\151\1\152"+
    "\2\151\27\152\1\277\3\152\1\u01b1\25\152\1\u01b1\1\152"+
    "\1\151\1\277\1\151\2\300\1\151\5\152\1\151\1\0"+
    "\1\151\1\0\1\u0227\6\151\1\u0228\12\151\1\152\2\151"+
    "\1\u021e\1\152\25\u021e\1\u0227\33\u021e\1\151\1\u0227\1\151"+
    "\2\300\1\151\4\u021e\1\152\1\151\1\0\1\151\1\0"+
    "\1\u021f\53\151\1\u021f\34\151\1\u021f\1\151\2\u0220\7\151"+
    "\1\0\1\151\23\0\1\74\2\0\5\31\1\u0229\21\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\21\31\1\u022a\5\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\3\31\1\u022b\23\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\23\0\1\74\2\0\3\31\1\u022c\23\31"+
    "\1\0\33\31\1\66\1\0\1\66\2\0\1\66\5\31"+
    "\2\0\1\66\1\0\1\u0227\6\151\1\u0228\44\151\1\u0227"+
    "\34\151\1\u0227\1\151\2\300\7\151\1\0\1\151\1\0"+
    "\1\u0228\7\151\1\u022d\43\151\1\u0228\34\151\1\u0228\1\151"+
    "\2\276\7\151\1\0\1\151\23\0\1\74\2\0\6\31"+
    "\1\u022e\20\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\15\31"+
    "\1\u022f\11\31\1\0\33\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\23\0\1\74\2\0\27\31"+
    "\1\0\14\31\1\u0230\16\31\1\66\1\0\1\66\2\0"+
    "\1\66\5\31\2\0\1\66\1\0\1\u022d\53\151\1\u022d"+
    "\34\151\1\u022d\1\151\2\u0231\7\151\1\0\1\151\23\0"+
    "\1\74\2\0\10\31\1\u0232\16\31\1\0\33\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\15\31\1\u0233\11\31\1\0\33\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\24\31\1\u0234\2\31\1\0\33\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\3\31\1\u0235\23\31\1\0\33\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66\23\0"+
    "\1\74\2\0\15\31\1\u0236\11\31\1\0\33\31\1\66"+
    "\1\0\1\66\2\0\1\66\5\31\2\0\1\66";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\1\1\14\11\1\1\1\11\1\1\2\11"+
    "\42\1\2\0\54\1\41\0\65\1\1\11\1\0\1\11"+
    "\11\0\1\11\30\0\1\1\1\11\1\0\1\1\2\11"+
    "\1\0\5\1\1\11\62\1\6\0\1\11\31\0\1\11"+
    "\2\0\52\1\6\0\1\11\1\0\1\11\2\0\1\11"+
    "\17\0\45\1\15\0\1\11\1\0\1\11\4\0\32\1"+
    "\2\0\1\11\3\0\1\11\4\0\22\1\4\0\1\11"+
    "\1\0\1\11\16\1\3\0\13\1\3\0\1\11\6\1"+
    "\2\0\4\1\1\0\3\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Creamos un listado de llos errores lexicos
    ArrayList<TokenError> listadoErroresLexicos = new ArrayList();

    //Funciones
    //retorna un simbolo despues de crear un nuevo token y agregarlo al listado
    private Symbol retornarSimbolo(int tipo, String tipoToken, String lexema, int fila, int columna){
        //creamos un  token auxiliar
        Token tokenAux = new Token(tipoToken, lexema, fila, columna);
        System.out.println("Fila: "+fila+" Columa: "+columna+" Token: "+tipoToken+ " Lexema: "+lexema);
        //retornamos el token aux como simbolo
        return new Symbol(tipo, tokenAux);
    }
    
    //Agregamos un token al array list de errores lexicos
    private void addErrorLexico(String tipoToken, String lexema, String msgError, int fila, int columna){
        //creamos un  token auxiliar
        TokenError tokenErrorAux = new TokenError(tipoToken, lexema, msgError, fila, columna);
        //Agregamos al listado
        listadoErroresLexicos.add(tokenErrorAux);
    }

    //Obtenemos el arrLust de los errores lexicos
    public ArrayList<TokenError> obtenerListadoErroresLexicos(){
        return listadoErroresLexicos;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGCIC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addErrorLexico ("LEXICO", yytext(), "Token no valido",yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 111: break;
          case 2: 
            { /*                                                                                     */
            } 
            // fall through
          case 112: break;
          case 3: 
            { return retornarSimbolo(PERCENT     , "PERCENT"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 113: break;
          case 4: 
            { return retornarSimbolo(IGUAL       , "IGUAL"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 114: break;
          case 5: 
            { return retornarSimbolo(MENOR       , "MENOR"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 115: break;
          case 6: 
            { return retornarSimbolo(MAYOR       , "MAYOR"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 116: break;
          case 7: 
            { return retornarSimbolo(CORCH_INI   , "CORCH_INI"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 117: break;
          case 8: 
            { return retornarSimbolo(CORCH_FIN   , "CORCH_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 118: break;
          case 9: 
            { return retornarSimbolo(PAREN_INI   , "PAREN_INI"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 119: break;
          case 10: 
            { return retornarSimbolo(PAREN_FIN   , "PAREN_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 120: break;
          case 11: 
            { return retornarSimbolo(LLAVE_INI   , "LLAVE_INI"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 121: break;
          case 12: 
            { return retornarSimbolo(LLAVE_FIN   , "LLAVE_FIN"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 122: break;
          case 13: 
            { return retornarSimbolo(COMA        , "COMA"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 123: break;
          case 14: 
            { return retornarSimbolo(PUNTO_COMA  , "PUNTO_COMA"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 124: break;
          case 15: 
            { return retornarSimbolo(DOS_PUNTOS  , "DOS_PUNTOS"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 125: break;
          case 16: 
            { return retornarSimbolo(SIMBOL_OR   , "SIMBOL_OR"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 126: break;
          case 17: 
            { return retornarSimbolo(SIMBOL_AND  , "SIMBOL_AND"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 127: break;
          case 18: 
            { return retornarSimbolo(SIMBOL_NOT  , "SIMBOL_NOT"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 128: break;
          case 19: 
            { return retornarSimbolo(SIGNO_MAS   , "SIGNO_MAS"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 129: break;
          case 20: 
            { return retornarSimbolo(SIGNO_MIN   , "SIGNO_MIN"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 130: break;
          case 21: 
            { return retornarSimbolo(SIGNO_POR   , "SIGNO_POR"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 131: break;
          case 22: 
            { return retornarSimbolo(SIGNO_DIV   , "SIGNO_DIV"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 132: break;
          case 23: 
            { return retornarSimbolo(ID_VALUE        , "ID_VALUE"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 133: break;
          case 24: 
            { return retornarSimbolo(INTEGER_VALUE   , "INTEGER_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 134: break;
          case 25: 
            { return retornarSimbolo(ALL_CHARACTERS  , "ALL_CHARACTERS", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 135: break;
          case 26: 
            { return retornarSimbolo(IF          , "IF"          , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 136: break;
          case 27: 
            { return retornarSimbolo(ID          , "ID"          , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 137: break;
          case 28: 
            { System.out.println("Fila: "+ (yyline + 1) +" Columa: "+ (yycolumn + 1) +" Token: "+"COMENTARIO DE LINEA"+ " Lexema: "+yytext());
            } 
            // fall through
          case 138: break;
          case 29: 
            { return retornarSimbolo(C_P         , "C_P"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 139: break;
          case 30: 
            { return retornarSimbolo(END         , "END"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 140: break;
          case 31: 
            { return retornarSimbolo(FUNCTION_ASC                , "FUNCTION_ASC"  		      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 141: break;
          case 32: 
            { return retornarSimbolo(DECIMAL_VALUE   , "DECIMAL_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 142: break;
          case 33: 
            { return retornarSimbolo(ALT         , "ALT"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 143: break;
          case 34: 
            { return retornarSimbolo(SRC         , "SRC"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 144: break;
          case 35: 
            { return retornarSimbolo(TEXT_VALUE          , "TEXT_VALUE"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 145: break;
          case 36: 
            { return retornarSimbolo(ID_VALUE_STR  , "ID_VALUE_STR"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 146: break;
          case 37: 
            { return retornarSimbolo(DIGIT_VALUE , "DIGIT_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 147: break;
          case 38: 
            { return retornarSimbolo(INSERT_TOKEN_VALUE  , "INSERT_TOKEN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 148: break;
          case 39: 
            { return retornarSimbolo(ID_VALUE_CHAR , "ID_VALUE_CHAR"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 149: break;
          case 40: 
            { return retornarSimbolo(CHARACT_VALUE   , "CHARACT_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 150: break;
          case 41: 
            { return retornarSimbolo(C_H1        , "C_H1"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 151: break;
          case 42: 
            { return retornarSimbolo(C_BR        , "C_BR"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 152: break;
          case 43: 
            { return retornarSimbolo(INIT        , "INIT"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 153: break;
          case 44: 
            { return retornarSimbolo(ELSE        , "ELSE"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 154: break;
          case 45: 
            { return retornarSimbolo(FUNCTION_EXIT               , "FUNCTION_EXIT"               , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 155: break;
          case 46: 
            { return retornarSimbolo(FUNCTION_DESC               , "FUNCTION_DESC" 		      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 156: break;
          case 47: 
            { return retornarSimbolo(THEN        , "THEN"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 157: break;
          case 48: 
            { return retornarSimbolo(HREF        , "HREF"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 158: break;
          case 49: 
            { return retornarSimbolo(ROWS        , "ROWS"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 159: break;
          case 50: 
            { return retornarSimbolo(CHAR        , "CHAR"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 160: break;
          case 51: 
            { return retornarSimbolo(COLS        , "COLS"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 161: break;
          case 52: 
            { return retornarSimbolo(NAME        , "NAME"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 162: break;
          case 53: 
            { return retornarSimbolo(BOOLEAN_VALUE   , "BOOLEAN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 163: break;
          case 54: 
            { return retornarSimbolo(TYPE        , "TYPE"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 164: break;
          case 55: 
            { return retornarSimbolo(PERCE_VALUE , "PERCE_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 165: break;
          case 56: 
            { return retornarSimbolo(COLOR_HEX   , "COLOR_HEX"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 166: break;
          case 57: 
            { return retornarSimbolo(C_IMG       , "C_IMG"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 167: break;
          case 58: 
            { return retornarSimbolo(C_DIV       , "C_DIV"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 168: break;
          case 59: 
            { return retornarSimbolo(COLOR       , "COLOR"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 169: break;
          case 60: 
            { return retornarSimbolo(CLASS       , "CLASS"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 170: break;
          case 61: 
            { return retornarSimbolo(WIDTH       , "WIDTH"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 171: break;
          case 62: 
            { return retornarSimbolo(WHILE       , "WHILE"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 172: break;
          case 63: 
            { return retornarSimbolo(PIXEL_VALUE , "PIXEL_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 173: break;
          case 64: 
            { return retornarSimbolo(COLOR_VALUE , "COLOR_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 174: break;
          case 65: 
            { return retornarSimbolo(ROW         , "ROW"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 175: break;
          case 66: 
            { return retornarSimbolo(C_GCIC      , "C_GCIC"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 176: break;
          case 67: 
            { return retornarSimbolo(C_HEAD      , "C_HEAD"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 177: break;
          case 68: 
            { return retornarSimbolo(C_LINK      , "C_LINK"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 178: break;
          case 69: 
            { return retornarSimbolo(C_BODY      , "C_BODY"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 179: break;
          case 70: 
            { return retornarSimbolo(C_SPAM      , "C_SPAM"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 180: break;
          case 71: 
            { return retornarSimbolo(INSERT      , "INSERT"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 181: break;
          case 72: 
            { return retornarSimbolo(HUNTIL      , "HUNTIL"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 182: break;
          case 73: 
            { return retornarSimbolo(REPEAT      , "REPEAT"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 183: break;
          case 74: 
            { return retornarSimbolo(HEIGHT      , "HEIGHT"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 184: break;
          case 75: 
            { return retornarSimbolo(STRING      , "STRING"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 185: break;
          case 76: 
            { return retornarSimbolo(ALIGN_VALUE , "ALIGN_VALUE" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 186: break;
          case 77: 
            { return retornarSimbolo(TEXT        , "TEXT"        , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 187: break;
          case 78: 
            { return retornarSimbolo(C_INPUT     , "C_INPUT"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 188: break;
          case 79: 
            { return retornarSimbolo(C_TITLE     , "C_TITLE"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 189: break;
          case 80: 
            { return retornarSimbolo(ON_LOAD     , "ON_LOAD"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 190: break;
          case 81: 
            { return retornarSimbolo(FUNCTION_REVERSE            , "FUNCTION_REVERSE"            , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 191: break;
          case 82: 
            { return retornarSimbolo(BOOLEAN     , "BOOLEAN"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 192: break;
          case 83: 
            { return retornarSimbolo(ONCLICK     , "ONCLICK"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 193: break;
          case 84: 
            { return retornarSimbolo(DECIMAL     , "DECIMAL"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 194: break;
          case 85: 
            { return retornarSimbolo(INTEGER     , "INTEGER"     , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 195: break;
          case 86: 
            { return retornarSimbolo(MODO_GLOBAL , "MODO_GLOBAL" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 196: break;
          case 87: 
            { return retornarSimbolo(FONT_VALUE  , "FONT_VALUE"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 197: break;
          case 88: 
            { return retornarSimbolo(RADIO       , "RADIO"       , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 198: break;
          case 89: 
            { System.out.println("Fila: "+ (yyline + 1) +" Columa: "+ (yycolumn + 1) +" Token: "+"COMENTARIO DE BLOQUE"+ " Lexema: "+yytext());
            } 
            // fall through
          case 199: break;
          case 90: 
            { return retornarSimbolo(C_BUTTON    , "C_BUTTON"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 200: break;
          case 91: 
            { return retornarSimbolo(C_OPTION    , "C_OPTION"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 201: break;
          case 92: 
            { return retornarSimbolo(C_SELECT    , "C_SELECT"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 202: break;
          case 93: 
            { return retornarSimbolo(COLUMN      , "COLUMN"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 203: break;
          case 94: 
            { return retornarSimbolo(NUMBER      , "NUMBER"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 204: break;
          case 95: 
            { return retornarSimbolo(THENWHILE   , "THENWHILE"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 205: break;
          case 96: 
            { return retornarSimbolo(PROCESS_ABC , "PROCESS_ABC" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 206: break;
          case 97: 
            { return retornarSimbolo(FONT_SIZE   , "FONT_SIZE"   , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 207: break;
          case 98: 
            { return retornarSimbolo(C_TEXTAREA  , "C_TEXTAREA"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 208: break;
          case 99: 
            { return retornarSimbolo(FUNCTION_ALERT_INFO         , "FUNCTION_ALERT_INFO"         , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 209: break;
          case 100: 
            { return retornarSimbolo(FUNCTION_LETPAR_NUM         , "FUNCTION_LETPAR_NUM" 	      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 210: break;
          case 101: 
            { return retornarSimbolo(BACKGROUND  , "BACKGROUND"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 211: break;
          case 102: 
            { return retornarSimbolo(TEXT_ALIGN  , "TEXT_ALIGN"  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 212: break;
          case 103: 
            { return retornarSimbolo(CHECKBOX    , "CHECKBOX"    , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 213: break;
          case 104: 
            { return retornarSimbolo(C_SCRIPTING , "C_SCRIPTING" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 214: break;
          case 105: 
            { return retornarSimbolo(FONT_FAMILY , "FONT_FAMILY" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 215: break;
          case 106: 
            { return retornarSimbolo(FUNCTION_LETIMPAR_NUM       , "FUNCTION_LETIMPAR_NUM" 	  , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 216: break;
          case 107: 
            { return retornarSimbolo(FUNCTION_NUM_ALEATORIO      , "FUNCTION_NUM_ALEATORIO"      , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 217: break;
          case 108: 
            { return retornarSimbolo(GET_ELEMEN_BY_ID            , "GET_ELEMEN_BY_ID"            , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 218: break;
          case 109: 
            { return retornarSimbolo(PROCESS_VAL , "PROCESS_VAL" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 219: break;
          case 110: 
            { return retornarSimbolo(FUNCTION_CARACTER_ALEATORIO , "FUNCTION_CARACTER_ALEATORIO" , yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerGCIC [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerGCIC scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerGCIC(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}