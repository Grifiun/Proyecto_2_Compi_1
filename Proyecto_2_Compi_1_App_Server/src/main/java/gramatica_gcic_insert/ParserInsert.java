
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gramatica_gcic_insert;

import java_cup.runtime.*;
import gramatica_gcic_insert.ParserInsertSym;
import gramatica_gcic_insert.LexerGCICInsert;
import java_cup.runtime.XMLElement;
import clasesDAO.Token;
import clasesDAO.TokenError;
import java.util.ArrayList;
import java.util.List;
import tabla_simbolos.*;
import etiquetas.*;
import tabla_simbolos_etiquetas.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserInsert extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserInsertSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserInsert() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserInsert(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserInsert(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\002\003\000\002\005\005\000\002\006\005" +
    "\000\002\011\005\000\002\017\005\000\002\027\004\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\031\004\000\002\031" +
    "\002\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\004\000\002\033\002\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\015\005" +
    "\000\002\030\004\000\002\030\002\000\002\021\003\000" +
    "\002\020\004\000\002\007\005\000\002\010\005\000\002" +
    "\012\005\000\002\013\005\000\002\014\005\000\002\016" +
    "\005\000\002\022\005\000\002\023\005\000\002\024\005" +
    "\000\002\025\004\000\002\025\004\000\002\025\002\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\162\002" +
    "\000\002\035\006\000\002\163\002\000\002\036\006\000" +
    "\002\164\002\000\002\037\006\000\002\165\002\000\002" +
    "\040\006\000\002\166\002\000\002\041\006\000\002\167" +
    "\002\000\002\042\006\000\002\170\002\000\002\043\006" +
    "\000\002\171\002\000\002\044\006\000\002\172\002\000" +
    "\002\045\006\000\002\173\002\000\002\046\006\000\002" +
    "\174\002\000\002\047\006\000\002\175\002\000\002\050" +
    "\006\000\002\176\002\000\002\051\006\000\002\177\002" +
    "\000\002\052\006\000\002\200\002\000\002\053\006\000" +
    "\002\201\002\000\002\054\006\000\002\076\003\000\002" +
    "\076\003\000\002\076\004\000\002\056\006\000\002\056" +
    "\003\000\002\057\006\000\002\060\006\000\002\060\003" +
    "\000\002\061\006\000\002\061\003\000\002\062\006\000" +
    "\002\063\006\000\002\063\003\000\002\064\006\000\002" +
    "\064\003\000\002\065\006\000\002\065\003\000\002\066" +
    "\006\000\002\066\003\000\002\067\006\000\002\067\003" +
    "\000\002\070\006\000\002\071\006\000\002\071\003\000" +
    "\002\072\006\000\002\072\003\000\002\073\006\000\002" +
    "\073\003\000\002\074\006\000\002\074\003\000\002\077" +
    "\004\000\002\077\004\000\002\077\004\000\002\100\004" +
    "\000\002\100\004\000\002\100\004\000\002\101\004\000" +
    "\002\101\004\000\002\101\004\000\002\102\004\000\002" +
    "\102\004\000\002\102\004\000\002\103\004\000\002\103" +
    "\004\000\002\103\004\000\002\104\004\000\002\104\004" +
    "\000\002\104\004\000\002\105\004\000\002\105\004\000" +
    "\002\105\004\000\002\106\004\000\002\106\004\000\002" +
    "\106\004\000\002\107\004\000\002\107\004\000\002\107" +
    "\004\000\002\110\004\000\002\110\002\000\002\111\004" +
    "\000\002\111\002\000\002\112\004\000\002\112\002\000" +
    "\002\113\004\000\002\113\002\000\002\114\004\000\002" +
    "\114\002\000\002\115\004\000\002\115\002\000\002\116" +
    "\004\000\002\116\002\000\002\117\004\000\002\117\002" +
    "\000\002\120\004\000\002\120\002\000\002\121\003\000" +
    "\002\121\003\000\002\122\003\000\002\123\003\000\002" +
    "\123\003\000\002\124\003\000\002\124\003\000\002\124" +
    "\003\000\002\125\003\000\002\125\003\000\002\125\003" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\131\003\000\002\131\003\000\002\130\003\000\002" +
    "\130\003\000\002\130\003\000\002\130\003\000\002\130" +
    "\003\000\002\127\003\000\002\127\003\000\002\127\003" +
    "\000\002\126\003\000\002\132\007\000\002\133\007\000" +
    "\002\134\007\000\002\135\007\000\002\136\007\000\002" +
    "\137\007\000\002\140\007\000\002\141\007\000\002\142" +
    "\007\000\002\143\007\000\002\144\007\000\002\145\007" +
    "\000\002\146\007\000\002\147\007\000\002\150\007\000" +
    "\002\151\007\000\002\152\007\000\002\153\003\000\002" +
    "\153\003\000\002\154\003\000\002\154\003\000\002\155" +
    "\003\000\002\155\003\000\002\155\003\000\002\155\003" +
    "\000\002\156\003\000\002\156\003\000\002\156\003\000" +
    "\002\156\003\000\002\156\003\000\002\156\003\000\002" +
    "\156\003\000\002\156\003\000\002\156\003\000\002\156" +
    "\003\000\002\156\003\000\002\156\003\000\002\156\003" +
    "\000\002\157\003\000\002\157\003\000\002\160\003\000" +
    "\002\160\003\000\002\161\003\000\002\161\003\000\002" +
    "\161\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a3\000\010\002\uffff\003\034\006\005\001\002\000" +
    "\006\002\uffe7\006\uffe7\001\002\000\032\027\u019a\032\u0199" +
    "\033\057\034\056\035\053\036\050\040\046\041\052\042" +
    "\054\043\055\044\060\045\047\001\002\000\006\002\uffe9" +
    "\006\uffe9\001\002\000\006\002\uffe4\006\uffe4\001\002\000" +
    "\006\002\ufff6\006\ufff6\001\002\000\166\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\104\uffd2\107\uffd2\110\uffd2" +
    "\111\uffd2\112\uffd2\113\uffd2\114\uffd2\001\002\000\004\006" +
    "\uffed\001\002\000\170\002\uffdf\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\104\uffdf\107\uffdf\110\uffdf\111\uffdf" +
    "\112\uffdf\113\uffdf\114\uffdf\001\002\000\166\003\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\066\uffd2\104\uffd2\107\uffd2\110" +
    "\uffd2\111\uffd2\112\uffd2\113\uffd2\114\uffd2\001\002\000\006" +
    "\002\ufff4\006\ufff4\001\002\000\166\003\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\104\uffd2\107\uffd2\110\uffd2\111" +
    "\uffd2\112\uffd2\113\uffd2\114\uffd2\001\002\000\006\002\ufff5" +
    "\006\ufff5\001\002\000\006\002\uffea\006\uffea\001\002\000" +
    "\006\002\ufff7\006\ufff7\001\002\000\006\002\000\006\005" +
    "\001\002\000\006\002\uffe5\006\uffe5\001\002\000\004\002" +
    "\u017c\001\002\000\006\003\uffe0\006\uffe0\001\002\000\006" +
    "\002\uffe8\006\uffe8\001\002\000\006\003\u0163\006\u0164\001" +
    "\002\000\166\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\104\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2" +
    "\114\uffd2\001\002\000\006\002\uffe6\006\uffe6\001\002\000" +
    "\006\002\uffeb\006\uffeb\001\002\000\006\002\uffec\006\uffec" +
    "\001\002\000\004\002\ufffe\001\002\000\006\003\ufff2\006" +
    "\ufff2\001\002\000\006\002\uffe3\006\uffe3\001\002\000\166" +
    "\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\104\uffd2" +
    "\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2\114\uffd2\001" +
    "\002\000\166\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\104\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2" +
    "\114\uffd2\001\002\000\004\006\uffed\001\002\000\004\006" +
    "\043\001\002\000\030\025\051\033\057\034\056\035\053" +
    "\036\050\040\046\041\052\042\054\043\055\044\060\045" +
    "\047\001\002\000\004\006\uffee\001\002\000\006\002\ufffb" +
    "\006\ufffb\001\002\000\010\003\uff80\007\uff80\010\uff80\001" +
    "\002\000\010\003\uff76\007\uff76\010\uff76\001\002\000\010" +
    "\003\uff84\007\uff84\010\uff84\001\002\000\004\032\312\001" +
    "\002\000\010\003\uff7e\007\uff7e\010\uff7e\001\002\000\010" +
    "\003\uff86\007\uff86\010\uff86\001\002\000\006\003\uff7c\007" +
    "\uff7c\001\002\000\010\003\uff7a\007\uff7a\010\uff7a\001\002" +
    "\000\010\003\uff88\007\uff88\010\uff88\001\002\000\010\003" +
    "\uff8a\007\uff8a\010\uff8a\001\002\000\010\003\uff78\007\uff78" +
    "\010\uff78\001\002\000\010\003\064\007\uff2c\010\uff2c\001" +
    "\002\000\166\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77" +
    "\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77\015\uff77\016" +
    "\uff77\017\uff77\020\uff77\022\uff77\023\uff77\024\uff77\025\uff77" +
    "\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034" +
    "\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051" +
    "\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77" +
    "\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77\065\uff77\066" +
    "\uff77\104\uff77\107\uff77\110\uff77\111\uff77\112\uff77\113\uff77" +
    "\114\uff77\001\002\000\006\007\073\010\071\001\002\000" +
    "\010\003\064\007\066\010\uff2c\001\002\000\166\003\uff40" +
    "\004\uff40\005\uff40\006\uff40\007\uff40\010\uff40\011\uff40\012" +
    "\uff40\013\uff40\014\uff40\015\uff40\016\uff40\017\uff40\020\uff40" +
    "\022\uff40\023\uff40\024\uff40\025\uff40\026\uff40\027\uff40\030" +
    "\uff40\031\uff40\032\uff40\033\uff40\034\uff40\035\uff40\036\uff40" +
    "\037\uff40\040\uff40\041\uff40\042\uff40\043\uff40\044\uff40\045" +
    "\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40" +
    "\054\uff40\055\uff40\056\uff40\057\uff40\060\uff40\061\uff40\062" +
    "\uff40\063\uff40\064\uff40\065\uff40\066\uff40\104\uff40\107\uff40" +
    "\110\uff40\111\uff40\112\uff40\113\uff40\114\uff40\001\002\000" +
    "\166\003\uff3f\004\uff3f\005\uff3f\006\uff3f\007\uff3f\010\uff3f" +
    "\011\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f\016\uff3f\017" +
    "\uff3f\020\uff3f\022\uff3f\023\uff3f\024\uff3f\025\uff3f\026\uff3f" +
    "\027\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035" +
    "\uff3f\036\uff3f\037\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f" +
    "\044\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052" +
    "\uff3f\053\uff3f\054\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f" +
    "\061\uff3f\062\uff3f\063\uff3f\064\uff3f\065\uff3f\066\uff3f\104" +
    "\uff3f\107\uff3f\110\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f" +
    "\001\002\000\006\007\uff2d\010\uff2d\001\002\000\006\007" +
    "\uff15\010\uff15\001\002\000\014\050\101\051\100\052\102" +
    "\053\103\055\077\001\002\000\006\007\uff18\010\uff18\001" +
    "\002\000\166\003\uff41\004\uff41\005\uff41\006\uff41\007\uff41" +
    "\010\uff41\011\uff41\012\uff41\013\uff41\014\uff41\015\uff41\016" +
    "\uff41\017\uff41\020\uff41\022\uff41\023\uff41\024\uff41\025\uff41" +
    "\026\uff41\027\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034" +
    "\uff41\035\uff41\036\uff41\037\uff41\040\uff41\041\uff41\042\uff41" +
    "\043\uff41\044\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051" +
    "\uff41\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41" +
    "\060\uff41\061\uff41\062\uff41\063\uff41\064\uff41\065\uff41\066" +
    "\uff41\104\uff41\107\uff41\110\uff41\111\uff41\112\uff41\113\uff41" +
    "\114\uff41\001\002\000\006\007\uff17\010\uff17\001\002\000" +
    "\006\007\uff19\010\uff19\001\002\000\006\007\uff16\010\uff16" +
    "\001\002\000\004\005\124\001\002\000\004\005\117\001" +
    "\002\000\004\005\112\001\002\000\004\005\107\001\002" +
    "\000\004\005\104\001\002\000\004\077\105\001\002\000" +
    "\004\011\106\001\002\000\006\007\uff0b\010\uff0b\001\002" +
    "\000\004\076\110\001\002\000\004\011\111\001\002\000" +
    "\006\007\uff0c\010\uff0c\001\002\000\006\072\115\073\113" +
    "\001\002\000\004\011\ufefe\001\002\000\004\011\116\001" +
    "\002\000\004\011\ufeff\001\002\000\006\007\uff0e\010\uff0e" +
    "\001\002\000\006\074\121\075\122\001\002\000\004\011" +
    "\123\001\002\000\004\011\ufefd\001\002\000\004\011\ufefc" +
    "\001\002\000\006\007\uff0d\010\uff0d\001\002\000\034\073" +
    "\137\074\132\075\133\076\127\077\125\100\134\101\130" +
    "\102\136\103\140\104\141\105\131\106\142\107\126\001" +
    "\002\000\004\011\ufef3\001\002\000\004\011\ufeeb\001\002" +
    "\000\004\011\ufef4\001\002\000\004\011\ufef1\001\002\000" +
    "\004\011\ufeed\001\002\000\004\011\ufef6\001\002\000\004" +
    "\011\ufef5\001\002\000\004\011\ufef2\001\002\000\004\011" +
    "\143\001\002\000\004\011\ufef0\001\002\000\004\011\ufef7" +
    "\001\002\000\004\011\ufeef\001\002\000\004\011\ufeee\001" +
    "\002\000\004\011\ufeec\001\002\000\006\007\uff09\010\uff09" +
    "\001\002\000\010\003\064\007\uff2c\010\uff2c\001\002\000" +
    "\166\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017" +
    "\uff89\020\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052" +
    "\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89" +
    "\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\104" +
    "\uff89\107\uff89\110\uff89\111\uff89\112\uff89\113\uff89\114\uff89" +
    "\001\002\000\010\003\150\007\uff34\010\uff34\001\002\000" +
    "\006\007\157\010\156\001\002\000\010\003\150\007\152" +
    "\010\uff34\001\002\000\166\003\uff87\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\022\uff87\023\uff87\024" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041" +
    "\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87" +
    "\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056" +
    "\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87" +
    "\065\uff87\066\uff87\104\uff87\107\uff87\110\uff87\111\uff87\112" +
    "\uff87\113\uff87\114\uff87\001\002\000\166\003\uff4b\004\uff4b" +
    "\005\uff4b\006\uff4b\007\uff4b\010\uff4b\011\uff4b\012\uff4b\013" +
    "\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b\022\uff4b" +
    "\023\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b\030\uff4b\031" +
    "\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b" +
    "\040\uff4b\041\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b\046" +
    "\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b" +
    "\055\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b\062\uff4b\063" +
    "\uff4b\064\uff4b\065\uff4b\066\uff4b\104\uff4b\107\uff4b\110\uff4b" +
    "\111\uff4b\112\uff4b\113\uff4b\114\uff4b\001\002\000\166\003" +
    "\uff4c\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\011\uff4c" +
    "\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c\020" +
    "\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\026\uff4c\027\uff4c" +
    "\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036" +
    "\uff4c\037\uff4c\040\uff4c\041\uff4c\042\uff4c\043\uff4c\044\uff4c" +
    "\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053" +
    "\uff4c\054\uff4c\055\uff4c\056\uff4c\057\uff4c\060\uff4c\061\uff4c" +
    "\062\uff4c\063\uff4c\064\uff4c\065\uff4c\066\uff4c\104\uff4c\107" +
    "\uff4c\110\uff4c\111\uff4c\112\uff4c\113\uff4c\114\uff4c\001\002" +
    "\000\006\007\uff25\010\uff25\001\002\000\006\007\uff26\010" +
    "\uff26\001\002\000\016\050\101\051\100\052\102\053\103" +
    "\054\161\055\077\001\002\000\166\003\uff4d\004\uff4d\005" +
    "\uff4d\006\uff4d\007\uff4d\010\uff4d\011\uff4d\012\uff4d\013\uff4d" +
    "\014\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d\022\uff4d\023" +
    "\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d\030\uff4d\031\uff4d" +
    "\032\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d\037\uff4d\040" +
    "\uff4d\041\uff4d\042\uff4d\043\uff4d\044\uff4d\045\uff4d\046\uff4d" +
    "\047\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d\054\uff4d\055" +
    "\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d\062\uff4d\063\uff4d" +
    "\064\uff4d\065\uff4d\066\uff4d\104\uff4d\107\uff4d\110\uff4d\111" +
    "\uff4d\112\uff4d\113\uff4d\114\uff4d\001\002\000\006\007\uff35" +
    "\010\uff35\001\002\000\004\005\162\001\002\000\012\100" +
    "\165\101\167\102\164\103\166\001\002\000\004\011\170" +
    "\001\002\000\004\011\ufef9\001\002\000\004\011\ufefb\001" +
    "\002\000\004\011\ufef8\001\002\000\004\011\ufefa\001\002" +
    "\000\006\007\uff0a\010\uff0a\001\002\000\010\003\172\007" +
    "\uff2a\010\uff2a\001\002\000\010\003\172\007\215\010\uff2a" +
    "\001\002\000\166\003\uff79\004\uff79\005\uff79\006\uff79\007" +
    "\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\022\uff79\023\uff79\024\uff79\025" +
    "\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79" +
    "\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042" +
    "\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79" +
    "\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057" +
    "\uff79\060\uff79\061\uff79\062\uff79\063\uff79\064\uff79\065\uff79" +
    "\066\uff79\104\uff79\107\uff79\110\uff79\111\uff79\112\uff79\113" +
    "\uff79\114\uff79\001\002\000\006\007\203\010\201\001\002" +
    "\000\006\007\uff14\010\uff14\001\002\000\006\007\uff13\010" +
    "\uff13\001\002\000\006\007\uff2b\010\uff2b\001\002\000\006" +
    "\007\uff11\010\uff11\001\002\000\020\047\204\050\101\051" +
    "\100\052\102\053\103\055\077\066\205\001\002\000\006" +
    "\007\uff12\010\uff12\001\002\000\166\003\uff3e\004\uff3e\005" +
    "\uff3e\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e" +
    "\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020\uff3e\022\uff3e\023" +
    "\uff3e\024\uff3e\025\uff3e\026\uff3e\027\uff3e\030\uff3e\031\uff3e" +
    "\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\040" +
    "\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046\uff3e" +
    "\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055" +
    "\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e" +
    "\064\uff3e\065\uff3e\066\uff3e\104\uff3e\107\uff3e\110\uff3e\111" +
    "\uff3e\112\uff3e\113\uff3e\114\uff3e\001\002\000\004\005\211" +
    "\001\002\000\004\005\206\001\002\000\004\071\207\001" +
    "\002\000\004\011\210\001\002\000\006\007\uff00\010\uff00" +
    "\001\002\000\006\072\115\073\113\001\002\000\004\011" +
    "\213\001\002\000\006\007\uff0f\010\uff0f\001\002\000\166" +
    "\003\uff3d\004\uff3d\005\uff3d\006\uff3d\007\uff3d\010\uff3d\011" +
    "\uff3d\012\uff3d\013\uff3d\014\uff3d\015\uff3d\016\uff3d\017\uff3d" +
    "\020\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\027" +
    "\uff3d\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d" +
    "\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044" +
    "\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d" +
    "\053\uff3d\054\uff3d\055\uff3d\056\uff3d\057\uff3d\060\uff3d\061" +
    "\uff3d\062\uff3d\063\uff3d\064\uff3d\065\uff3d\066\uff3d\104\uff3d" +
    "\107\uff3d\110\uff3d\111\uff3d\112\uff3d\113\uff3d\114\uff3d\001" +
    "\002\000\166\003\uff3c\004\uff3c\005\uff3c\006\uff3c\007\uff3c" +
    "\010\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016" +
    "\uff3c\017\uff3c\020\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c" +
    "\026\uff3c\027\uff3c\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034" +
    "\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c" +
    "\043\uff3c\044\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051" +
    "\uff3c\052\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c" +
    "\060\uff3c\061\uff3c\062\uff3c\063\uff3c\064\uff3c\065\uff3c\066" +
    "\uff3c\104\uff3c\107\uff3c\110\uff3c\111\uff3c\112\uff3c\113\uff3c" +
    "\114\uff3c\001\002\000\006\003\217\007\221\001\002\000" +
    "\170\002\uff73\003\uff73\004\uff73\005\uff73\006\uff73\007\222" +
    "\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016" +
    "\uff73\017\uff73\020\uff73\022\uff73\023\uff73\024\uff73\025\uff73" +
    "\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034" +
    "\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\051" +
    "\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73" +
    "\060\uff73\061\uff73\062\uff73\063\uff73\064\uff73\065\uff73\066" +
    "\uff73\104\uff73\107\uff73\110\uff73\111\uff73\112\uff73\113\uff73" +
    "\114\uff73\001\002\000\170\002\uff7b\003\uff7b\004\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b" +
    "\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055" +
    "\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b" +
    "\064\uff7b\065\uff7b\066\uff7b\104\uff7b\107\uff7b\110\uff7b\111" +
    "\uff7b\112\uff7b\113\uff7b\114\uff7b\001\002\000\170\002\uff74" +
    "\003\uff74\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011" +
    "\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74\017\uff74" +
    "\020\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027" +
    "\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74" +
    "\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044" +
    "\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74" +
    "\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\061" +
    "\uff74\062\uff74\063\uff74\064\uff74\065\uff74\066\uff74\104\uff74" +
    "\107\uff74\110\uff74\111\uff74\112\uff74\113\uff74\114\uff74\001" +
    "\002\000\170\002\uff72\003\uff72\004\uff72\005\uff72\006\uff72" +
    "\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72\015" +
    "\uff72\016\uff72\017\uff72\020\uff72\022\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72" +
    "\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050" +
    "\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72" +
    "\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72\065" +
    "\uff72\066\uff72\104\uff72\107\uff72\110\uff72\111\uff72\112\uff72" +
    "\113\uff72\114\uff72\001\002\000\010\003\224\007\uff32\010" +
    "\uff32\001\002\000\010\003\224\007\246\010\uff32\001\002" +
    "\000\006\007\233\010\231\001\002\000\166\003\uff85\004" +
    "\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85" +
    "\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85\022" +
    "\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\066\uff85\104\uff85\107\uff85\110" +
    "\uff85\111\uff85\112\uff85\113\uff85\114\uff85\001\002\000\006" +
    "\007\uff22\010\uff22\001\002\000\006\007\uff24\010\uff24\001" +
    "\002\000\020\050\101\051\100\052\102\053\103\055\077" +
    "\057\236\060\235\001\002\000\006\007\uff23\010\uff23\001" +
    "\002\000\166\003\uff4a\004\uff4a\005\uff4a\006\uff4a\007\uff4a" +
    "\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016" +
    "\uff4a\017\uff4a\020\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a" +
    "\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034" +
    "\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a" +
    "\043\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051" +
    "\uff4a\052\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a\057\uff4a" +
    "\060\uff4a\061\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\066" +
    "\uff4a\104\uff4a\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a" +
    "\114\uff4a\001\002\000\006\007\uff33\010\uff33\001\002\000" +
    "\004\005\242\001\002\000\004\005\237\001\002\000\004" +
    "\104\240\001\002\000\004\011\241\001\002\000\006\007" +
    "\uff07\010\uff07\001\002\000\004\104\243\001\002\000\004" +
    "\011\244\001\002\000\006\007\uff06\010\uff06\001\002\000" +
    "\166\003\uff49\004\uff49\005\uff49\006\uff49\007\uff49\010\uff49" +
    "\011\uff49\012\uff49\013\uff49\014\uff49\015\uff49\016\uff49\017" +
    "\uff49\020\uff49\022\uff49\023\uff49\024\uff49\025\uff49\026\uff49" +
    "\027\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035" +
    "\uff49\036\uff49\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49" +
    "\044\uff49\045\uff49\046\uff49\047\uff49\050\uff49\051\uff49\052" +
    "\uff49\053\uff49\054\uff49\055\uff49\056\uff49\057\uff49\060\uff49" +
    "\061\uff49\062\uff49\063\uff49\064\uff49\065\uff49\066\uff49\104" +
    "\uff49\107\uff49\110\uff49\111\uff49\112\uff49\113\uff49\114\uff49" +
    "\001\002\000\166\003\uff48\004\uff48\005\uff48\006\uff48\007" +
    "\uff48\010\uff48\011\uff48\012\uff48\013\uff48\014\uff48\015\uff48" +
    "\016\uff48\017\uff48\020\uff48\022\uff48\023\uff48\024\uff48\025" +
    "\uff48\026\uff48\027\uff48\030\uff48\031\uff48\032\uff48\033\uff48" +
    "\034\uff48\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042" +
    "\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047\uff48\050\uff48" +
    "\051\uff48\052\uff48\053\uff48\054\uff48\055\uff48\056\uff48\057" +
    "\uff48\060\uff48\061\uff48\062\uff48\063\uff48\064\uff48\065\uff48" +
    "\066\uff48\104\uff48\107\uff48\110\uff48\111\uff48\112\uff48\113" +
    "\uff48\114\uff48\001\002\000\010\003\251\007\uff2e\010\uff2e" +
    "\001\002\000\006\003\uff7d\006\uff7d\001\002\000\010\003" +
    "\251\007\311\010\uff2e\001\002\000\006\007\261\010\256" +
    "\001\002\000\006\007\uff1b\010\uff1b\001\002\000\006\007" +
    "\uff1e\010\uff1e\001\002\000\006\007\uff1c\010\uff1c\001\002" +
    "\000\014\055\077\062\265\063\264\064\266\065\263\001" +
    "\002\000\006\007\uff2f\010\uff2f\001\002\000\006\007\uff1d" +
    "\010\uff1d\001\002\000\006\003\uff44\006\uff44\001\002\000" +
    "\006\007\uff1a\010\uff1a\001\002\000\004\005\300\001\002" +
    "\000\004\005\275\001\002\000\004\005\272\001\002\000" +
    "\004\005\267\001\002\000\006\074\121\075\122\001\002" +
    "\000\004\011\271\001\002\000\006\007\uff02\010\uff02\001" +
    "\002\000\004\110\273\001\002\000\004\011\274\001\002" +
    "\000\006\007\uff04\010\uff04\001\002\000\006\074\121\075" +
    "\122\001\002\000\004\011\277\001\002\000\006\007\uff03" +
    "\010\uff03\001\002\000\042\071\303\072\306\073\137\074" +
    "\132\075\133\076\127\077\125\100\134\101\130\102\136" +
    "\103\140\104\141\105\131\106\142\107\126\110\301\001" +
    "\002\000\004\011\ufeea\001\002\000\004\011\307\001\002" +
    "\000\004\011\ufee5\001\002\000\004\011\ufee9\001\002\000" +
    "\004\011\ufee4\001\002\000\004\011\ufee6\001\002\000\006" +
    "\007\uff01\010\uff01\001\002\000\006\003\uff43\006\uff43\001" +
    "\002\000\006\003\uff42\006\uff42\001\002\000\004\007\313" +
    "\001\002\000\006\002\uff6a\006\uff6a\001\002\000\010\003" +
    "\064\007\uff2c\010\uff2c\001\002\000\006\003\uff83\006\uff83" +
    "\001\002\000\010\003\064\007\uff2c\010\uff2c\001\002\000" +
    "\166\003\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75" +
    "\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017" +
    "\uff75\020\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75" +
    "\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035" +
    "\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75" +
    "\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052" +
    "\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75" +
    "\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75\066\uff75\104" +
    "\uff75\107\uff75\110\uff75\111\uff75\112\uff75\113\uff75\114\uff75" +
    "\001\002\000\010\003\321\007\uff30\010\uff30\001\002\000" +
    "\010\003\321\007\341\010\uff30\001\002\000\006\007\327" +
    "\010\325\001\002\000\004\006\uff7f\001\002\000\006\007" +
    "\uff20\010\uff20\001\002\000\020\047\204\050\101\051\100" +
    "\052\102\053\103\055\077\061\332\001\002\000\006\007" +
    "\uff1f\010\uff1f\001\002\000\004\006\uff47\001\002\000\006" +
    "\007\uff21\010\uff21\001\002\000\006\007\uff31\010\uff31\001" +
    "\002\000\004\005\333\001\002\000\006\105\336\106\335" +
    "\001\002\000\004\011\337\001\002\000\004\011\ufee7\001" +
    "\002\000\004\011\ufee8\001\002\000\006\007\uff05\010\uff05" +
    "\001\002\000\004\006\uff46\001\002\000\004\006\uff45\001" +
    "\002\000\166\003\u0102\004\u0105\005\364\006\u0106\007\u010b" +
    "\010\353\011\343\012\u011f\013\u0118\014\363\015\357\016" +
    "\u0104\017\u0100\020\354\022\u010a\023\u0119\024\u0113\025\362" +
    "\026\374\027\355\030\u011a\031\345\032\372\033\367\034" +
    "\365\035\u0103\036\u0117\037\u0111\040\344\041\366\042\351" +
    "\043\375\044\u0101\045\373\046\u0115\047\376\050\u0109\051" +
    "\346\052\u0110\053\u011d\054\370\055\377\056\u0108\057\u010c" +
    "\060\361\061\371\062\u011b\063\352\064\u0107\065\u0114\066" +
    "\356\104\u011c\107\u010f\110\u0116\111\u011e\112\360\113\u0112" +
    "\114\347\001\002\000\166\003\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\104\uffcc\107\uffcc\110\uffcc\111\uffcc\112" +
    "\uffcc\113\uffcc\114\uffcc\001\002\000\166\003\uffb0\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\104\uffb0\107\uffb0\110\uffb0" +
    "\111\uffb0\112\uffb0\113\uffb0\114\uffb0\001\002\000\166\003" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\104\uffb7\107" +
    "\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\114\uffb7\001\002" +
    "\000\166\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\104\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114" +
    "\uffa7\001\002\000\166\003\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\104\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1" +
    "\113\uffd1\114\uffd1\001\002\000\166\003\uffd3\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\104\uffd3\107\uffd3\110\uffd3\111" +
    "\uffd3\112\uffd3\113\uffd3\114\uffd3\001\002\000\166\003\uffae" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\064\uffae\065\uffae\066\uffae\104\uffae\107\uffae" +
    "\110\uffae\111\uffae\112\uffae\113\uffae\114\uffae\001\002\000" +
    "\166\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\104" +
    "\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d" +
    "\001\002\000\166\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\104\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113" +
    "\uffcd\114\uffcd\001\002\000\166\003\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\104\uffc5\107\uffc5\110\uffc5\111\uffc5" +
    "\112\uffc5\113\uffc5\114\uffc5\001\002\000\166\003\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\104\uffb9\107\uffb9\110" +
    "\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\001\002\000\166" +
    "\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\104\uff9a" +
    "\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a\001" +
    "\002\000\166\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\104\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8" +
    "\114\uffc8\001\002\000\166\003\uff98\004\uff98\005\uff98\006" +
    "\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98" +
    "\065\uff98\066\uff98\104\uff98\107\uff98\110\uff98\111\uff98\112" +
    "\uff98\113\uff98\114\uff98\001\002\000\166\003\uffa0\004\uffa0" +
    "\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\104\uffa0\107\uffa0\110\uffa0" +
    "\111\uffa0\112\uffa0\113\uffa0\114\uffa0\001\002\000\166\003" +
    "\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\104\uffbb\107" +
    "\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb\001\002" +
    "\000\166\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\104\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\114" +
    "\uffc9\001\002\000\166\003\uffce\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\066\uffce\104\uffce\107\uffce\110\uffce\111\uffce\112\uffce" +
    "\113\uffce\114\uffce\001\002\000\166\003\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\104\uffb4\107\uffb4\110\uffb4\111" +
    "\uffb4\112\uffb4\113\uffb4\114\uffb4\001\002\000\166\003\uffaf" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\104\uffaf\107\uffaf" +
    "\110\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\001\002\000" +
    "\166\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\104" +
    "\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5" +
    "\001\002\000\166\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\104\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113" +
    "\uffa4\114\uffa4\001\002\000\166\003\uff9f\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\104\uff9f\107\uff9f\110\uff9f\111\uff9f" +
    "\112\uff9f\113\uff9f\114\uff9f\001\002\000\166\003\uffb6\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\104\uffb6\107\uffb6\110" +
    "\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\001\002\000\166" +
    "\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\104\uffab" +
    "\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\114\uffab\001" +
    "\002\000\166\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\104\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba" +
    "\114\uffba\001\002\000\166\003\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad" +
    "\065\uffad\066\uffad\104\uffad\107\uffad\110\uffad\111\uffad\112" +
    "\uffad\113\uffad\114\uffad\001\002\000\166\003\uffa9\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\104\uffa9\107\uffa9\110\uffa9" +
    "\111\uffa9\112\uffa9\113\uffa9\114\uffa9\001\002\000\166\003" +
    "\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\104\uffa3\107" +
    "\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\001\002" +
    "\000\166\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\104\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114" +
    "\uffc6\001\002\000\166\003\uffac\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\104\uffac\107\uffac\110\uffac\111\uffac\112\uffac" +
    "\113\uffac\114\uffac\001\002\000\006\002\uff5b\006\uff5b\001" +
    "\002\000\166\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\104\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3" +
    "\114\uffb3\001\002\000\166\003\uffc7\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\104\uffc7\107\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\113\uffc7\114\uffc7\001\002\000\166\003\uffcf\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\104\uffcf\107\uffcf\110\uffcf" +
    "\111\uffcf\112\uffcf\113\uffcf\114\uffcf\001\002\000\014\025" +
    "\u0124\042\054\111\u0126\112\u0125\114\u0123\001\002\000\166" +
    "\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\104\uff9c" +
    "\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c\001" +
    "\002\000\166\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\104\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2" +
    "\114\uffa2\001\002\000\166\003\uffa8\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\104\uffa8\107\uffa8\110\uffa8\111\uffa8\112" +
    "\uffa8\113\uffa8\114\uffa8\001\002\000\166\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\104\uffc4\107\uffc4\110\uffc4" +
    "\111\uffc4\112\uffc4\113\uffc4\114\uffc4\001\002\000\010\111" +
    "\u0122\112\u0121\114\u0120\001\002\000\166\003\uffa1\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\066\uffa1\104\uffa1\107\uffa1\110\uffa1" +
    "\111\uffa1\112\uffa1\113\uffa1\114\uffa1\001\002\000\006\002" +
    "\uffd7\006\uffd7\001\002\000\166\003\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\104\uffd4\107\uffd4\110\uffd4\111\uffd4" +
    "\112\uffd4\113\uffd4\114\uffd4\001\002\000\166\003\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96" +
    "\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\064\uff96\065\uff96\066\uff96\104\uff96\107\uff96\110" +
    "\uff96\111\uff96\112\uff96\113\uff96\114\uff96\001\002\000\166" +
    "\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\104\uffa6" +
    "\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\001" +
    "\002\000\166\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\104\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1" +
    "\114\uffb1\001\002\000\166\003\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\104\uffd0\107\uffd0\110\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\114\uffd0\001\002\000\166\003\uffc3\004\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\104\uffc3\107\uffc3\110\uffc3" +
    "\111\uffc3\112\uffc3\113\uffc3\114\uffc3\001\002\000\166\003" +
    "\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\104\uff9b\107" +
    "\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\001\002" +
    "\000\166\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\104\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa\114" +
    "\uffaa\001\002\000\166\003\uff97\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\104\uff97\107\uff97\110\uff97\111\uff97\112\uff97" +
    "\113\uff97\114\uff97\001\002\000\166\003\uffb2\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\104\uffb2\107\uffb2\110\uffb2\111" +
    "\uffb2\112\uffb2\113\uffb2\114\uffb2\001\002\000\166\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\104\uffca\107\uffca" +
    "\110\uffca\111\uffca\112\uffca\113\uffca\114\uffca\001\002\000" +
    "\166\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\104" +
    "\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2" +
    "\001\002\000\166\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\104\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\114\uffb8\001\002\000\166\003\uff9e\004\uff9e\005\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\104\uff9e\107\uff9e\110\uff9e\111\uff9e" +
    "\112\uff9e\113\uff9e\114\uff9e\001\002\000\166\003\uff95\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054" +
    "\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95" +
    "\063\uff95\064\uff95\065\uff95\066\uff95\104\uff95\107\uff95\110" +
    "\uff95\111\uff95\112\uff95\113\uff95\114\uff95\001\002\000\166" +
    "\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\104\uffa5" +
    "\107\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5\001" +
    "\002\000\166\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\022\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066" +
    "\uff99\104\uff99\107\uff99\110\uff99\111\uff99\112\uff99\113\uff99" +
    "\114\uff99\001\002\000\166\003\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\104\uffcb\107\uffcb\110\uffcb\111\uffcb\112" +
    "\uffcb\113\uffcb\114\uffcb\001\002\000\166\003\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\104\uffc1\107\uffc1\110\uffc1" +
    "\111\uffc1\112\uffc1\113\uffc1\114\uffc1\001\002\000\166\003" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\104\uffbe\107" +
    "\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\001\002" +
    "\000\166\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\104\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114" +
    "\uffbf\001\002\000\166\003\uffc0\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\104\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0" +
    "\113\uffc0\114\uffc0\001\002\000\004\043\u0127\001\002\000" +
    "\166\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\104" +
    "\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc" +
    "\001\002\000\166\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\104\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113" +
    "\uffbd\114\uffbd\001\002\000\004\007\u0128\001\002\000\006" +
    "\002\uff5c\006\uff5c\001\002\000\166\003\u012b\004\u0105\005" +
    "\364\006\u012c\007\u010b\010\353\011\343\012\u011f\013\u0118" +
    "\014\363\015\357\016\u0104\017\u0100\020\354\022\u010a\023" +
    "\u0119\024\u0113\025\362\026\374\027\355\030\u011a\031\345" +
    "\032\372\033\367\034\365\035\u0103\036\u0117\037\u0111\040" +
    "\344\041\366\042\351\043\375\044\u0101\045\373\046\u0115" +
    "\047\376\050\u0109\051\346\052\u0110\053\u011d\054\370\055" +
    "\377\056\u0108\057\u010c\060\361\061\371\062\u011b\063\352" +
    "\064\u0107\065\u0114\066\356\104\u011c\107\u010f\110\u0116\111" +
    "\u011e\112\360\113\u0112\114\347\001\002\000\006\002\uffd5" +
    "\006\uffd5\001\002\000\006\002\uff57\006\uff57\001\002\000" +
    "\014\025\u012d\042\054\111\u0126\112\u0125\114\u0123\001\002" +
    "\000\004\045\u012e\001\002\000\004\007\u012f\001\002\000" +
    "\006\002\uff58\006\uff58\001\002\000\006\003\u0132\006\u0135" +
    "\001\002\000\006\003\ufff0\006\ufff0\001\002\000\006\003" +
    "\uffef\006\uffef\001\002\000\166\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\104\uffd2\107\uffd2\110\uffd2\111\uffd2" +
    "\112\uffd2\113\uffd2\114\uffd2\001\002\000\006\003\ufff3\006" +
    "\ufff3\001\002\000\010\025\u0140\030\u0141\031\u0142\001\002" +
    "\000\006\002\ufffc\006\ufffc\001\002\000\006\003\ufff1\006" +
    "\ufff1\001\002\000\166\003\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\104\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2" +
    "\113\uffd2\114\uffd2\001\002\000\166\003\u013b\004\u0105\005" +
    "\364\006\u013c\007\u010b\010\353\011\343\012\u011f\013\u0118" +
    "\014\363\015\357\016\u0104\017\u0100\020\354\022\u010a\023" +
    "\u0119\024\u0113\025\362\026\374\027\355\030\u011a\031\345" +
    "\032\372\033\367\034\365\035\u0103\036\u0117\037\u0111\040" +
    "\344\041\366\042\351\043\375\044\u0101\045\373\046\u0115" +
    "\047\376\050\u0109\051\346\052\u0110\053\u011d\054\370\055" +
    "\377\056\u0108\057\u010c\060\361\061\371\062\u011b\063\352" +
    "\064\u0107\065\u0114\066\356\104\u011c\107\u010f\110\u0116\111" +
    "\u011e\112\360\113\u0112\114\347\001\002\000\006\003\uffdc" +
    "\006\uffdc\001\002\000\006\003\uff6b\006\uff6b\001\002\000" +
    "\014\025\u013d\042\054\111\u0126\112\u0125\114\u0123\001\002" +
    "\000\004\031\u013e\001\002\000\004\007\u013f\001\002\000" +
    "\006\003\uff6c\006\uff6c\001\002\000\004\027\u0153\001\002" +
    "\000\006\003\uff90\007\uff90\001\002\000\010\003\uff8e\007" +
    "\uff8e\010\uff8e\001\002\000\010\003\u0145\007\uff38\010\uff38" +
    "\001\002\000\166\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\022\uff8d\023\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d" +
    "\066\uff8d\104\uff8d\107\uff8d\110\uff8d\111\uff8d\112\uff8d\113" +
    "\uff8d\114\uff8d\001\002\000\010\003\u0145\007\u0150\010\uff38" +
    "\001\002\000\006\007\u014a\010\u0148\001\002\000\006\007" +
    "\uff39\010\uff39\001\002\000\004\046\u014b\001\002\000\006" +
    "\007\uff27\010\uff27\001\002\000\166\003\uff53\004\uff53\005" +
    "\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53\013\uff53" +
    "\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53\022\uff53\023" +
    "\uff53\024\uff53\025\uff53\026\uff53\027\uff53\030\uff53\031\uff53" +
    "\032\uff53\033\uff53\034\uff53\035\uff53\036\uff53\037\uff53\040" +
    "\uff53\041\uff53\042\uff53\043\uff53\044\uff53\045\uff53\046\uff53" +
    "\047\uff53\050\uff53\051\uff53\052\uff53\053\uff53\054\uff53\055" +
    "\uff53\056\uff53\057\uff53\060\uff53\061\uff53\062\uff53\063\uff53" +
    "\064\uff53\065\uff53\066\uff53\104\uff53\107\uff53\110\uff53\111" +
    "\uff53\112\uff53\113\uff53\114\uff53\001\002\000\004\005\u014c" +
    "\001\002\000\004\110\u014d\001\002\000\004\011\u014e\001" +
    "\002\000\006\007\uff10\010\uff10\001\002\000\166\003\uff52" +
    "\004\uff52\005\uff52\006\uff52\007\uff52\010\uff52\011\uff52\012" +
    "\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017\uff52\020\uff52" +
    "\022\uff52\023\uff52\024\uff52\025\uff52\026\uff52\027\uff52\030" +
    "\uff52\031\uff52\032\uff52\033\uff52\034\uff52\035\uff52\036\uff52" +
    "\037\uff52\040\uff52\041\uff52\042\uff52\043\uff52\044\uff52\045" +
    "\uff52\046\uff52\047\uff52\050\uff52\051\uff52\052\uff52\053\uff52" +
    "\054\uff52\055\uff52\056\uff52\057\uff52\060\uff52\061\uff52\062" +
    "\uff52\063\uff52\064\uff52\065\uff52\066\uff52\104\uff52\107\uff52" +
    "\110\uff52\111\uff52\112\uff52\113\uff52\114\uff52\001\002\000" +
    "\166\003\uff51\004\uff51\005\uff51\006\uff51\007\uff51\010\uff51" +
    "\011\uff51\012\uff51\013\uff51\014\uff51\015\uff51\016\uff51\017" +
    "\uff51\020\uff51\022\uff51\023\uff51\024\uff51\025\uff51\026\uff51" +
    "\027\uff51\030\uff51\031\uff51\032\uff51\033\uff51\034\uff51\035" +
    "\uff51\036\uff51\037\uff51\040\uff51\041\uff51\042\uff51\043\uff51" +
    "\044\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052" +
    "\uff51\053\uff51\054\uff51\055\uff51\056\uff51\057\uff51\060\uff51" +
    "\061\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066\uff51\104" +
    "\uff51\107\uff51\110\uff51\111\uff51\112\uff51\113\uff51\114\uff51" +
    "\001\002\000\006\003\217\007\221\001\002\000\166\003" +
    "\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\104\uff8f\107" +
    "\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\114\uff8f\001\002" +
    "\000\004\007\u0154\001\002\000\006\002\uff6f\006\uff6f\001" +
    "\002\000\166\003\u0156\004\u0105\005\364\006\u0157\007\u010b" +
    "\010\353\011\343\012\u011f\013\u0118\014\363\015\357\016" +
    "\u0104\017\u0100\020\354\022\u010a\023\u0119\024\u0113\025\362" +
    "\026\374\027\355\030\u011a\031\345\032\372\033\367\034" +
    "\365\035\u0103\036\u0117\037\u0111\040\344\041\366\042\351" +
    "\043\375\044\u0101\045\373\046\u0115\047\376\050\u0109\051" +
    "\346\052\u0110\053\u011d\054\370\055\377\056\u0108\057\u010c" +
    "\060\361\061\371\062\u011b\063\352\064\u0107\065\u0114\066" +
    "\356\104\u011c\107\u010f\110\u0116\111\u011e\112\360\113\u0112" +
    "\114\347\001\002\000\006\003\uff6d\006\uff6d\001\002\000" +
    "\014\025\u0159\042\054\111\u0126\112\u0125\114\u0123\001\002" +
    "\000\006\003\uffdd\006\uffdd\001\002\000\004\030\u015a\001" +
    "\002\000\004\007\u015b\001\002\000\006\003\uff6e\006\uff6e" +
    "\001\002\000\166\003\u015d\004\u0105\005\364\006\u015e\007" +
    "\u010b\010\353\011\343\012\u011f\013\u0118\014\363\015\357" +
    "\016\u0104\017\u0100\020\354\022\u010a\023\u0119\024\u0113\025" +
    "\362\026\374\027\355\030\u011a\031\345\032\372\033\367" +
    "\034\365\035\u0103\036\u0117\037\u0111\040\344\041\366\042" +
    "\351\043\375\044\u0101\045\373\046\u0115\047\376\050\u0109" +
    "\051\346\052\u0110\053\u011d\054\370\055\377\056\u0108\057" +
    "\u010c\060\361\061\371\062\u011b\063\352\064\u0107\065\u0114" +
    "\066\356\104\u011c\107\u010f\110\u0116\111\u011e\112\360\113" +
    "\u0112\114\347\001\002\000\006\002\uff59\006\uff59\001\002" +
    "\000\014\025\u0160\042\054\111\u0126\112\u0125\114\u0123\001" +
    "\002\000\006\002\uffd6\006\uffd6\001\002\000\004\044\u0161" +
    "\001\002\000\004\007\u0162\001\002\000\006\002\uff5a\006" +
    "\uff5a\001\002\000\006\002\uff5d\006\uff5d\001\002\000\004" +
    "\025\u0166\001\002\000\006\002\uffde\006\uffde\001\002\000" +
    "\004\041\u0167\001\002\000\004\007\u0168\001\002\000\006" +
    "\002\uff5e\006\uff5e\001\002\000\006\003\u016a\006\u016c\001" +
    "\002\000\006\002\uff62\006\uff62\001\002\000\006\002\uffe2" +
    "\006\uffe2\001\002\000\006\025\u0176\037\u0177\001\002\000" +
    "\006\003\uffe1\006\uffe1\001\002\000\166\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\104\uffd2\107\uffd2\110\uffd2" +
    "\111\uffd2\112\uffd2\113\uffd2\114\uffd2\001\002\000\166\003" +
    "\u0171\004\u0105\005\364\006\u0172\007\u010b\010\353\011\343" +
    "\012\u011f\013\u0118\014\363\015\357\016\u0104\017\u0100\020" +
    "\354\022\u010a\023\u0119\024\u0113\025\362\026\374\027\355" +
    "\030\u011a\031\345\032\372\033\367\034\365\035\u0103\036" +
    "\u0117\037\u0111\040\344\041\366\042\351\043\375\044\u0101" +
    "\045\373\046\u0115\047\376\050\u0109\051\346\052\u0110\053" +
    "\u011d\054\370\055\377\056\u0108\057\u010c\060\361\061\371" +
    "\062\u011b\063\352\064\u0107\065\u0114\066\356\104\u011c\107" +
    "\u010f\110\u0116\111\u011e\112\360\113\u0112\114\347\001\002" +
    "\000\006\003\uffd8\006\uffd8\001\002\000\006\003\uff60\006" +
    "\uff60\001\002\000\014\025\u0173\042\054\111\u0126\112\u0125" +
    "\114\u0123\001\002\000\004\037\u0174\001\002\000\004\007" +
    "\u0175\001\002\000\006\003\uff61\006\uff61\001\002\000\004" +
    "\036\u017a\001\002\000\006\003\uff82\007\uff82\001\002\000" +
    "\006\003\217\007\221\001\002\000\166\003\uff81\004\uff81" +
    "\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\022\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\064\uff81\065\uff81\066\uff81\104\uff81\107\uff81\110\uff81" +
    "\111\uff81\112\uff81\113\uff81\114\uff81\001\002\000\004\007" +
    "\u017b\001\002\000\006\002\uff63\006\uff63\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufff8\006\ufff8\001\002\000" +
    "\166\003\u017f\004\u0105\005\364\006\u0180\007\u010b\010\353" +
    "\011\343\012\u011f\013\u0118\014\363\015\357\016\u0104\017" +
    "\u0100\020\354\022\u010a\023\u0119\024\u0113\025\362\026\374" +
    "\027\355\030\u011a\031\345\032\372\033\367\034\365\035" +
    "\u0103\036\u0117\037\u0111\040\344\041\366\042\351\043\375" +
    "\044\u0101\045\373\046\u0115\047\376\050\u0109\051\346\052" +
    "\u0110\053\u011d\054\370\055\377\056\u0108\057\u010c\060\361" +
    "\061\371\062\u011b\063\352\064\u0107\065\u0114\066\356\104" +
    "\u011c\107\u010f\110\u0116\111\u011e\112\360\113\u0112\114\347" +
    "\001\002\000\006\002\uff68\006\uff68\001\002\000\014\025" +
    "\u0182\042\054\111\u0126\112\u0125\114\u0123\001\002\000\006" +
    "\002\uffdb\006\uffdb\001\002\000\004\033\u0183\001\002\000" +
    "\004\007\u0184\001\002\000\006\002\uff69\006\uff69\001\002" +
    "\000\166\003\u0186\004\u0105\005\364\006\u0187\007\u010b\010" +
    "\353\011\343\012\u011f\013\u0118\014\363\015\357\016\u0104" +
    "\017\u0100\020\354\022\u010a\023\u0119\024\u0113\025\362\026" +
    "\374\027\355\030\u011a\031\345\032\372\033\367\034\365" +
    "\035\u0103\036\u0117\037\u0111\040\344\041\366\042\351\043" +
    "\375\044\u0101\045\373\046\u0115\047\376\050\u0109\051\346" +
    "\052\u0110\053\u011d\054\370\055\377\056\u0108\057\u010c\060" +
    "\361\061\371\062\u011b\063\352\064\u0107\065\u0114\066\356" +
    "\104\u011c\107\u010f\110\u0116\111\u011e\112\360\113\u0112\114" +
    "\347\001\002\000\006\002\uff64\006\uff64\001\002\000\014" +
    "\025\u0189\042\054\111\u0126\112\u0125\114\u0123\001\002\000" +
    "\006\002\uffd9\006\uffd9\001\002\000\004\035\u018a\001\002" +
    "\000\004\007\u018b\001\002\000\006\002\uff65\006\uff65\001" +
    "\002\000\004\006\u018d\001\002\000\030\025\u018f\033\057" +
    "\034\056\035\053\036\050\040\046\041\052\042\054\043" +
    "\055\044\060\045\047\001\002\000\006\002\ufffa\006\ufffa" +
    "\001\002\000\004\040\u0190\001\002\000\004\007\u0191\001" +
    "\002\000\006\002\uff5f\006\uff5f\001\002\000\166\003\u0194" +
    "\004\u0105\005\364\006\u0195\007\u010b\010\353\011\343\012" +
    "\u011f\013\u0118\014\363\015\357\016\u0104\017\u0100\020\354" +
    "\022\u010a\023\u0119\024\u0113\025\362\026\374\027\355\030" +
    "\u011a\031\345\032\372\033\367\034\365\035\u0103\036\u0117" +
    "\037\u0111\040\344\041\366\042\351\043\375\044\u0101\045" +
    "\373\046\u0115\047\376\050\u0109\051\346\052\u0110\053\u011d" +
    "\054\370\055\377\056\u0108\057\u010c\060\361\061\371\062" +
    "\u011b\063\352\064\u0107\065\u0114\066\356\104\u011c\107\u010f" +
    "\110\u0116\111\u011e\112\360\113\u0112\114\347\001\002\000" +
    "\006\002\uffda\006\uffda\001\002\000\006\002\uff66\006\uff66" +
    "\001\002\000\014\025\u0196\042\054\111\u0126\112\u0125\114" +
    "\u0123\001\002\000\004\034\u0197\001\002\000\004\007\u0198" +
    "\001\002\000\006\002\uff67\006\uff67\001\002\000\010\003" +
    "\uff8c\007\uff8c\010\uff8c\001\002\000\006\003\uff92\007\uff92" +
    "\001\002\000\006\003\217\007\221\001\002\000\006\003" +
    "\uff91\006\uff91\001\002\000\010\003\u019f\007\uff36\010\uff36" +
    "\001\002\000\006\007\u01a4\010\u01a3\001\002\000\010\003" +
    "\u019f\007\u01a2\010\uff36\001\002\000\004\006\uff8b\001\002" +
    "\000\004\006\uff4f\001\002\000\004\006\uff4e\001\002\000" +
    "\004\047\204\001\002\000\004\006\uff50\001\002\000\006" +
    "\007\uff37\010\uff37\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a3\000\072\002\023\003\021\004\020\006\007\011" +
    "\016\012\032\013\031\014\017\015\005\017\025\020\003" +
    "\021\030\022\022\023\006\024\035\034\014\036\034\041" +
    "\040\042\015\043\010\044\013\045\024\047\011\050\026" +
    "\051\012\052\037\053\027\054\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0191\001\001\000\004\033" +
    "\u018b\001\001\000\002\001\001\000\004\025\u0184\001\001" +
    "\000\002\001\001\000\004\025\u017d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\004\u017c" +
    "\006\007\011\016\012\032\013\031\014\017\015\005\017" +
    "\025\020\003\021\030\022\022\023\006\024\035\034\014" +
    "\036\034\041\040\042\015\043\010\044\013\045\024\047" +
    "\011\050\026\051\012\052\037\053\027\054\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0168\001" +
    "\001\000\002\001\001\000\004\071\u0164\001\001\000\004" +
    "\025\u015b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u012f\001\001" +
    "\000\002\001\001\000\004\025\u0128\001\001\000\004\025" +
    "\341\001\001\000\004\033\041\001\001\000\056\012\032" +
    "\013\031\014\017\015\005\017\025\020\003\021\030\022" +
    "\022\023\006\024\035\034\043\042\015\043\010\044\013" +
    "\045\024\047\011\050\026\051\012\052\037\053\027\054" +
    "\036\062\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\174\317\001\001\000\004\201" +
    "\315\001\001\000\004\172\313\001\001\000\002\001\001" +
    "\000\004\175\246\001\001\000\004\171\222\001\001\000" +
    "\004\176\215\001\001\000\004\177\170\001\001\000\004" +
    "\170\145\001\001\000\004\167\143\001\001\000\004\200" +
    "\060\001\001\000\006\106\061\117\062\001\001\000\002" +
    "\001\001\000\016\130\066\134\067\135\074\136\071\137" +
    "\073\141\075\001\001\000\006\106\064\117\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\153\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\154\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\156\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\106\144\117\062\001\001\000\002\001\001\000\006" +
    "\102\150\113\146\001\001\000\022\123\157\130\153\134" +
    "\067\135\074\136\071\137\073\140\154\141\075\001\001" +
    "\000\006\102\152\113\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\155\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\107\172" +
    "\120\173\001\001\000\006\107\213\120\173\001\001\000" +
    "\002\001\001\000\026\126\201\127\176\130\175\133\177" +
    "\134\067\135\074\136\071\137\073\141\075\152\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\153" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\103\225\114\224\001\001\000\006\103" +
    "\244\114\224\001\001\000\024\124\233\130\226\134\067" +
    "\135\074\136\071\137\073\141\075\143\227\144\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\105\247\116\251\001\001\000" +
    "\002\001\001\000\006\105\307\116\251\001\001\000\016" +
    "\131\256\141\261\146\253\147\257\150\254\151\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\154" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\154" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\156\304\157\301\161\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\106\314\117\062\001\001\000\002\001\001\000" +
    "\006\106\316\117\062\001\001\000\002\001\001\000\006" +
    "\104\322\115\321\001\001\000\006\104\337\115\321\001" +
    "\001\000\026\125\330\126\325\130\323\133\177\134\067" +
    "\135\074\136\071\137\073\141\075\145\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\160\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\347" +
    "\026\u010d\051\012\072\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\347\026\u010d\051\012\074\u0129\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\u0136\010\u0130\032\u0133\037\u0132\040\u0137\057\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0138\001\001\000" +
    "\012\021\347\026\u010d\051\012\061\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\164\u0150\001\001\000\004\165\u0142\001\001\000" +
    "\006\100\u0143\111\u0145\001\001\000\002\001\001\000\006" +
    "\100\u014e\111\u0145\001\001\000\006\122\u0146\132\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\u0151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\347\026\u010d" +
    "\051\012\060\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\347\026\u010d\051\012\073" +
    "\u015e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\u016c\046\u016d\066\u016a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u016e\001\001\000\012\021\347\026\u010d\051\012" +
    "\067\u016f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\173\u0177\001\001\000" +
    "\004\076\u0178\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\347\026\u010d\051\012\063\u0180\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\347" +
    "\026\u010d\051\012\065\u0187\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\012\032\013\031\014" +
    "\017\015\005\017\025\020\003\021\030\022\022\023\006" +
    "\024\035\034\043\042\015\043\010\044\013\045\024\047" +
    "\011\050\026\051\012\052\037\053\027\054\036\070\u018d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\347" +
    "\026\u010d\051\012\064\u0192\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\166\u019c\001\001\000" +
    "\004\163\u019a\001\001\000\004\076\u019b\001\001\000\002" +
    "\001\001\000\006\101\u019f\112\u019d\001\001\000\006\126" +
    "\u01a4\133\177\001\001\000\006\101\u01a0\112\u019d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserInsert$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserInsert$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserInsert$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Listado de errores	
	//Controlador de error sintactico
    ArrayList<TokenError> listadoErroresSintacticos;
	TablaSimbolos tablaSimbolos;
	TablaSimbolosEtiquetas tablaSimbolosEtiquetas;
	int filaInicial, columnaInicial;
	int numeroEtiqueta = 0;
	String etiqueta = "";
	String bloqueHTML = "";

	ArrayList<Etiqueta> listadoEtiquetas;
	
	@Override
	public void syntax_error(Symbol a){
		Token tokenError = (Token) a.value;//lo transformamos en token para obtener su lexema, fila y columna		
		String msgError = "Se esperaba: ";	
		
                
		int linea = (tokenError != null) ? tokenError.getLinea() : 0;
		int columna = (tokenError != null) ? tokenError.getColumna() : 0;
		linea += filaInicial;
		columna += columnaInicial;

		if(a.sym == ParserInsertSym.EOF){
			System.out.println("END OF FILE");
			TokenError tokenErrorAux = new TokenError("ERROR SINTACTICO", "Etiqueta de cierre", "La etiqueta de cierre debe ser <C_GCIC>", -1, -1);
			listadoErroresSintacticos.add(tokenErrorAux);
		}else{
			for(int i = 0; i < expected_token_ids().size(); i++){
				//msgError = msgError + mensajes[expected_token_ids().get(i)];
				msgError = msgError + symbl_name_from_id(expected_token_ids().get(i)) + " ";

				if(i < expected_token_ids().size() - 1)
					msgError = msgError + ", ";			
			}
			//System.out.println("error de sintaxis: linea: "+tokenError.getLexema()+" "+tokenError.getLinea()+" columna: "+tokenError.getColumna()+" MENSAJE: "+msgError);
			TokenError tokenErrorAux = new TokenError("ERROR SINTACTICO", tokenError.getLexema(), msgError, linea, columna);
			listadoErroresSintacticos.add(tokenErrorAux);
		}
		
	}
	
	public void report_error(String message, Object info) {
        System.out.println("Reportar Error");
    }
    
	public void report_fatal_error(String message, Object info) {
        System.out.println("Error Fatal: " + info);
    }

    protected int error_sync_size() {
        return 1;
    }

	public TablaSimbolos getTablaSimbolos(){
		return tablaSimbolos;
	}

	public TablaSimbolosEtiquetas getTablaSimbolosEtiquetas(){
		return tablaSimbolosEtiquetas;
	}

	public ArrayList<TokenError> getListadoErroresSintacticos(){
		return listadoErroresSintacticos;
	}

	public ArrayList<TokenError> getListadoErroresSemanticos(){
		return tablaSimbolos.getListadoErroresSemanticos();
	}

	public int getNumeroEtiqueta(){
		return numeroEtiqueta;
	}

	public void analizarParametroEtiqueta(Token tokenAux){
		TokenError tokenErrorAux = tablaSimbolosEtiquetas.getTokenErrorAuxiliar();
		if(tokenErrorAux != null){//se produjo un error
			tokenErrorAux.setLinea(tokenAux.getLinea());
			tokenErrorAux.setColumna(tokenAux.getColumna());
			tablaSimbolos.addErrorSemantico(tokenErrorAux);		
			tablaSimbolosEtiquetas.resetTokenErrorAuxiliar();	//reseteamos el error
		}
	}

	public void verificarPermisividadEtiqueta(String bloqueHTMLRequerido, Token posicion){
		if(bloqueHTMLRequerido.equals(bloqueHTML) == false){//la etiqueta no es permitida
			String msgError = "La etiqueta <" + posicion.getTipoToken() + "> solo es permitida dentro de las etiquetas" + bloqueHTMLRequerido + ", bloque actual" + bloqueHTML;
			System.out.println("         ********* ERROR DE POSICION HTML:\n");
			TokenError tokenErrorAux = new TokenError("ERROR SINTACTICO", posicion.getLexema(), msgError, posicion.getLinea() + filaInicial, posicion.getColumna() + columnaInicial );
			listadoErroresSintacticos.add(tokenErrorAux);
		}

	}

	public ArrayList<ParametroEtiquetaInterno> agregarParametroEtiqueta(ArrayList<ParametroEtiquetaInterno> listadoParametros, ParametroEtiquetaInterno parametro){
		if(listadoParametros == null){
			listadoParametros = new ArrayList();//si es nulo lo inicializamos
		}
		//agregamos el parametro si existe
		if(parametro != null){//hay un param
			listadoParametros.add(parametro);
		}

		return listadoParametros;//retornamos el listado
	}

	public ArrayList<Etiqueta> agregarEtiquetaAuxiliar(ArrayList<Etiqueta> listadoEtiqueta, Etiqueta etiqueta){
		if(listadoEtiqueta == null){
			listadoEtiqueta = new ArrayList();//si es nulo lo inicializamos
		}
		//agregamos el parametro si existe
		if(etiqueta != null){//hay un param
			listadoEtiqueta.add(etiqueta);
		}

		return listadoEtiqueta;//retornamos el listado
	}

    public ParserInsert(LexerGCICInsert lex, ArrayList<TokenError> listadoErroresSintacticos, TablaSimbolos tablaSimbolos, TablaSimbolosEtiquetas tablaSimbolosEtiquetas, int filaInicial, int columnaInicial, String bloqueHTML, int numeroEtiqueta, ArrayList<Etiqueta> listadoEtiquetas){
        super(lex);
		this.listadoErroresSintacticos = listadoErroresSintacticos;
		this.tablaSimbolos = tablaSimbolos;
		this.tablaSimbolosEtiquetas = tablaSimbolosEtiquetas;
		this.filaInicial = filaInicial;
		this.columnaInicial = columnaInicial;
		this.bloqueHTML = bloqueHTML;//C_GCIC, C_BODY, C_HEAD
		this.numeroEtiqueta = numeroEtiqueta;
		this.listadoEtiquetas = listadoEtiquetas;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserInsert$actions {
  private final ParserInsert parser;

  /** Constructor */
  CUP$ParserInsert$actions(ParserInsert parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserInsert$do_action_part00000000(
    int                        CUP$ParserInsert$act_num,
    java_cup.runtime.lr_parser CUP$ParserInsert$parser,
    java.util.Stack            CUP$ParserInsert$stack,
    int                        CUP$ParserInsert$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserInsert$result;

      /* select the action based on the action number */
      switch (CUP$ParserInsert$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		RESULT = start_val;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserInsert$parser.done_parsing();
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= bloque_etiquetas 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= 
            {
              Object RESULT =null;
		 System.out.println("Se registro una etiqueta vacia"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= error 
            {
              Object RESULT =null;
		 System.out.println("Cierre bien la etiqueta C_GCIC"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // etiqueta_gcic ::= etiqueta_apertura_gcic bloque_elements_gcic etiqueta_cierre_gcic 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoEtiquetasleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoEtiquetasright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<Etiqueta> listadoEtiquetas = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 
			etiquetaAux.setListadoEtiquetas(listadoEtiquetas);
			RESULT = etiquetaAux;
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_gcic",3, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // etiqueta_head ::= etiqueta_apertura_head bloque_elements_head etiqueta_cierre_head 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoEtiquetasleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoEtiquetasright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<Etiqueta> listadoEtiquetas = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 
			etiquetaAux.setListadoEtiquetas(listadoEtiquetas);
			RESULT = etiquetaAux;	 
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_head",4, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // etiqueta_body ::= etiqueta_apertura_body bloque_elements_body etiqueta_cierre_body 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoEtiquetasleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoEtiquetasright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<Etiqueta> listadoEtiquetas = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 
			etiquetaAux.setListadoEtiquetas(listadoEtiquetas);
			RESULT = etiquetaAux;	 
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_body",7, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiqueta_div ::= etiqueta_apertura_div bloque_elements_body etiqueta_cierre_div 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoEtiquetasleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoEtiquetasright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<Etiqueta> listadoEtiquetas = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 
			etiquetaAux.setListadoEtiquetas(listadoEtiquetas);
			RESULT = etiquetaAux;	 
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_div",13, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_elements_gcic ::= etiqueta_head etiqueta_body 
            {
              ArrayList<Etiqueta> RESULT =null;
		int etiquetaAux1left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int etiquetaAux1right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Etiqueta etiquetaAux1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int etiquetaAux2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAux2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux2 = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		
			ArrayList<Etiqueta> listadoEtiquetaGCIC = new ArrayList();
			if(etiquetaAux1 != null){
				listadoEtiquetaGCIC.add(etiquetaAux1);
			}
			if(etiquetaAux2 != null){
				listadoEtiquetaGCIC.add(etiquetaAux2);
			}
			RESULT = listadoEtiquetaGCIC;
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_elements_gcic",21, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_etiquetas ::= bloque_etiquetas etiquetas_gen 
            {
              ArrayList<Etiqueta> RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarEtiquetaAuxiliar(listadoEtiquetas, etiquetaAux); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_etiquetas",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_etiquetas ::= etiquetas_gen 
            {
              ArrayList<Etiqueta> RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarEtiquetaAuxiliar(listadoEtiquetas, etiquetaAux); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_etiquetas",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // etiquetas_gen ::= etiqueta_head 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiquetas_gen",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiquetas_gen ::= etiqueta_body 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiquetas_gen",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiquetas_gen ::= elements_body 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiquetas_gen",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_elements_head ::= bloque_elements_head elements_head 
            {
              ArrayList<Etiqueta> RESULT =null;
		int listadoEtiquetasleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoEtiquetasright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<Etiqueta> listadoEtiquetas = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarEtiquetaAuxiliar(listadoEtiquetas, etiquetaAux); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_elements_head",23, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque_elements_head ::= 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_elements_head",23, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elements_head ::= etiqueta_title 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_head",24, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elements_head ::= etiqueta_link 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_head",24, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elements_head ::= error 
            {
              Etiqueta RESULT =null;
		 System.out.println("Error etiqueta del head"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_head",24, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_elements_body ::= bloque_elements_body elements_body 
            {
              ArrayList<Etiqueta> RESULT =null;
		int listadoEtiquetasleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoEtiquetasright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<Etiqueta> listadoEtiquetas = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarEtiquetaAuxiliar(listadoEtiquetas, etiquetaAux); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_elements_body",25, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_elements_body ::= 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_elements_body",25, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elements_body ::= etiqueta_spam 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elements_body ::= etiqueta_input 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elements_body ::= etiqueta_textarea 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elements_body ::= etiqueta_select 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elements_body ::= etiqueta_div 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elements_body ::= etiqueta_img 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elements_body ::= etiqueta_br 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // elements_body ::= etiqueta_button 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // elements_body ::= etiqueta_h1 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elements_body ::= etiqueta_p 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("elements_body",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // etiqueta_select ::= etiqueta_apertura_select bloque_options etiqueta_cierre_select 
            {
              Etiqueta RESULT =null;
		int etiquetaSelectleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaSelectright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaSelect = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoOpcionesleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoOpcionesright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<Etiqueta> listadoOpciones = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
					  	//agregamos las etiquetas al select
						  etiquetaSelect.setListadoEtiquetas(listadoOpciones);
						  RESULT = etiquetaSelect;				  
					  
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_select",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque_options ::= bloque_options etiqueta_option 
            {
              ArrayList<Etiqueta> RESULT =null;
		int listadoOpcionesleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoOpcionesright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<Etiqueta> listadoOpciones = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int opcionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int opcionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta opcion = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		
			RESULT = agregarEtiquetaAuxiliar(listadoOpciones, opcion);
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_options",22, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloque_options ::= 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_options",22, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etiqueta_br ::= etiqueta_apertura_br 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_br",15, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // etiqueta_img ::= etiqueta_apertura_img etiqueta_cierre_img 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_img",14, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // etiqueta_title ::= etiqueta_apertura_title contenido_texto etiqueta_cierre_title 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_title",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // etiqueta_link ::= etiqueta_apertura_link contenido_texto etiqueta_cierre_link 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_link",6, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // etiqueta_spam ::= etiqueta_apertura_spam contenido_texto etiqueta_cierre_spam 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_spam",8, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // etiqueta_input ::= etiqueta_apertura_input contenido_texto etiqueta_cierre_input 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_input",9, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // etiqueta_textarea ::= etiqueta_apertura_textarea contenido_texto etiqueta_cierre_textarea 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_textarea",10, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // etiqueta_option ::= etiqueta_apertura_option contenido_texto etiqueta_cierre_option 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_option",12, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiqueta_button ::= etiqueta_apertura_button contenido_texto etiqueta_cierre_button 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_button",16, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // etiqueta_h1 ::= etiqueta_apertura_h1 contenido_texto etiqueta_cierre_h1 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_h1",17, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiqueta_p ::= etiqueta_apertura_p contenido_texto etiqueta_cierre_p 
            {
              Etiqueta RESULT =null;
		int etiquetaAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int etiquetaAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Etiqueta etiquetaAux = (Etiqueta)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 System.out.println(" ---> TEXTO --->: "+a); etiquetaAux.setTexto(a); RESULT = etiquetaAux; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_p",18, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contenido_texto ::= contenido_texto contenido_texto_unidad 
            {
              String RESULT =null;
		int bloqueTextoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int bloqueTextoright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String bloqueTexto = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int textoAuxleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int textoAuxright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		String textoAux = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		
			RESULT = bloqueTexto + " " + textoAux;//agregamos texto
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto",19, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contenido_texto ::= contenido_texto etiqueta_br 
            {
              String RESULT =null;
		int bloqueTextoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int bloqueTextoright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String bloqueTexto = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
			RESULT = bloqueTexto + " " + "<br>";//agregamos salto de linea
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto",19, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenido_texto ::= 
            {
              String RESULT =null;
		
			RESULT = "";
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto",19, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenido_texto_unidad ::= ALL_CHARACTERS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contenido_texto_unidad ::= ID_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenido_texto_unidad ::= PERCENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenido_texto_unidad ::= IGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenido_texto_unidad ::= CORCH_INI 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenido_texto_unidad ::= CORCH_FIN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenido_texto_unidad ::= PAREN_INI 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenido_texto_unidad ::= PAREN_FIN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenido_texto_unidad ::= LLAVE_INI 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenido_texto_unidad ::= LLAVE_FIN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contenido_texto_unidad ::= COMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contenido_texto_unidad ::= PUNTO_COMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contenido_texto_unidad ::= DOS_PUNTOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenido_texto_unidad ::= NO_IGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenido_texto_unidad ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contenido_texto_unidad ::= MENOR_IGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenido_texto_unidad ::= MAYOR ALL_CHARACTERS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema() + " " + b.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenido_texto_unidad ::= MENOR ALL_CHARACTERS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema() + " " + b.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contenido_texto_unidad ::= MAYOR INTEGER_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema() + " " + b.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contenido_texto_unidad ::= MAYOR DECIMAL_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema() + " " + b.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contenido_texto_unidad ::= MENOR INTEGER_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema() + " " + b.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contenido_texto_unidad ::= MENOR DECIMAL_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema() + " " + b.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // contenido_texto_unidad ::= SIGNO_DIV 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // contenido_texto_unidad ::= C_GCIC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contenido_texto_unidad ::= C_HEAD 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // contenido_texto_unidad ::= C_TITLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // contenido_texto_unidad ::= C_LINK 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // contenido_texto_unidad ::= C_BODY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // contenido_texto_unidad ::= C_SPAM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // contenido_texto_unidad ::= C_INPUT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // contenido_texto_unidad ::= C_TEXTAREA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // contenido_texto_unidad ::= C_SELECT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // contenido_texto_unidad ::= C_OPTION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // contenido_texto_unidad ::= C_DIV 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // contenido_texto_unidad ::= C_IMG 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // contenido_texto_unidad ::= C_BR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // contenido_texto_unidad ::= C_BUTTON 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // contenido_texto_unidad ::= C_H1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // contenido_texto_unidad ::= C_P 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // contenido_texto_unidad ::= HREF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // contenido_texto_unidad ::= BACKGROUND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // contenido_texto_unidad ::= COLOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // contenido_texto_unidad ::= FONT_SIZE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // contenido_texto_unidad ::= FONT_FAMILY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // contenido_texto_unidad ::= TEXT_ALIGN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // contenido_texto_unidad ::= TYPE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // contenido_texto_unidad ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // contenido_texto_unidad ::= NAME 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // contenido_texto_unidad ::= COLS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // contenido_texto_unidad ::= ROWS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // contenido_texto_unidad ::= CLASS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // contenido_texto_unidad ::= SRC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // contenido_texto_unidad ::= WIDTH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // contenido_texto_unidad ::= HEIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // contenido_texto_unidad ::= ALT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // contenido_texto_unidad ::= ONCLICK 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // contenido_texto_unidad ::= INTEGER_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // contenido_texto_unidad ::= DECIMAL_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // contenido_texto_unidad ::= TEXT_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // contenido_texto_unidad ::= ID_VALUE_STR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // contenido_texto_unidad ::= DIGIT_VALUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a.getLexema(); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("contenido_texto_unidad",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$0 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_GCIC"    ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$0",112, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // etiqueta_apertura_gcic ::= MENOR C_GCIC NT$0 bloque_parametros_gcic 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros); 
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_gcic",27, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$1 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_HEAD"    ; numeroEtiqueta++; bloqueHTML = "C_HEAD"; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$1",113, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // etiqueta_apertura_head ::= MENOR C_HEAD NT$1 etiqueta_cierre_general 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
			
			verificarPermisividadEtiqueta("C_GCIC", tipo); 
			RESULT = new Etiqueta(tipo.getTipoToken(), null); 
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_head",28, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$2 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_TITLE"   ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$2",114, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // etiqueta_apertura_title ::= MENOR C_TITLE NT$2 etiqueta_cierre_general 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
			
			verificarPermisividadEtiqueta("C_HEAD", tipo); 
			RESULT = new Etiqueta(tipo.getTipoToken(), null); 
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_title",29, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$3 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_LINK"    ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$3",115, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // etiqueta_apertura_link ::= MENOR C_LINK NT$3 bloque_parametros_link 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_HEAD", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_link",30, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$4 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_BODY"    ; numeroEtiqueta++; bloqueHTML = "C_BODY"; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$4",116, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // etiqueta_apertura_body ::= MENOR C_BODY NT$4 bloque_parametros_body 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_GCIC", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_body",31, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$5 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_SPAM"    ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$5",117, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // etiqueta_apertura_spam ::= MENOR C_SPAM NT$5 bloque_parametros_label 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_spam",32, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$6 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_INPUT"   ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$6",118, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // etiqueta_apertura_input ::= MENOR C_INPUT NT$6 bloque_parametros_input 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_input",33, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$7 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_TEXTAREA"; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$7",119, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // etiqueta_apertura_textarea ::= MENOR C_TEXTAREA NT$7 bloque_parametros_textarea 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_textarea",34, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$8 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_SELECT"  ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$8",120, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // etiqueta_apertura_select ::= MENOR C_SELECT NT$8 bloque_parametros_label 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_select",35, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$9 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_OPTION"  ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$9",121, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // etiqueta_apertura_option ::= MENOR C_OPTION NT$9 etiqueta_cierre_general 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), null); 			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_option",36, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$10 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_DIV"     ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$10",122, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // etiqueta_apertura_div ::= MENOR C_DIV NT$10 bloque_parametros_div 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_div",37, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$11 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_IMG"     ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$11",123, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // etiqueta_apertura_img ::= MENOR C_IMG NT$11 bloque_parametros_img 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_img",38, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$12 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_BR"      ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$12",124, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // etiqueta_apertura_br ::= MENOR C_BR NT$12 etiqueta_cierre_general 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), null); 
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_br",39, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$13 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_BUTTON"  ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$13",125, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // etiqueta_apertura_button ::= MENOR C_BUTTON NT$13 bloque_parametros_button 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_button",40, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$14 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_H1"      ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$14",126, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // etiqueta_apertura_h1 ::= MENOR C_H1 NT$14 bloque_parametros_label 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_h1",41, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$15 ::= 
            {
              Etiqueta RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
 etiqueta = "C_P"       ; numeroEtiqueta++; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$15",127, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // etiqueta_apertura_p ::= MENOR C_P NT$15 bloque_parametros_label 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
			
			verificarPermisividadEtiqueta("C_BODY", tipo);
			RESULT = new Etiqueta(tipo.getTipoToken(), listadoParametros);			
		
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_apertura_p",42, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // etiqueta_cierre_general ::= MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_general",60, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // etiqueta_cierre_general ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_general",60, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // etiqueta_cierre_general ::= error MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_general",60, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // etiqueta_cierre_gcic ::= MENOR SIGNO_DIV C_GCIC MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_gcic",44, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // etiqueta_cierre_gcic ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_gcic",44, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // etiqueta_cierre_head ::= MENOR SIGNO_DIV C_HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_head",45, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // etiqueta_cierre_title ::= MENOR SIGNO_DIV C_TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_title",46, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // etiqueta_cierre_title ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_title",46, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // etiqueta_cierre_link ::= MENOR SIGNO_DIV C_LINK MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_link",47, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // etiqueta_cierre_link ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_link",47, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // etiqueta_cierre_body ::= MENOR SIGNO_DIV C_BODY MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_body",48, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // etiqueta_cierre_spam ::= MENOR SIGNO_DIV C_SPAM MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_spam",49, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // etiqueta_cierre_spam ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_spam",49, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // etiqueta_cierre_input ::= MENOR SIGNO_DIV C_INPUT MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_input",50, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // etiqueta_cierre_input ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_input",50, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // etiqueta_cierre_textarea ::= MENOR SIGNO_DIV C_TEXTAREA MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_textarea",51, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // etiqueta_cierre_textarea ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_textarea",51, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // etiqueta_cierre_select ::= MENOR SIGNO_DIV C_SELECT MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_select",52, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // etiqueta_cierre_select ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_select",52, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // etiqueta_cierre_option ::= MENOR SIGNO_DIV C_OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_option",53, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // etiqueta_cierre_option ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_option",53, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // etiqueta_cierre_div ::= MENOR SIGNO_DIV C_DIV MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_div",54, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // etiqueta_cierre_img ::= MENOR SIGNO_DIV C_IMG MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_img",55, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // etiqueta_cierre_img ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_img",55, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // etiqueta_cierre_button ::= MENOR SIGNO_DIV C_BUTTON MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_button",56, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // etiqueta_cierre_button ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_button",56, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // etiqueta_cierre_h1 ::= MENOR SIGNO_DIV C_H1 MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_h1",57, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // etiqueta_cierre_h1 ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_h1",57, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // etiqueta_cierre_p ::= MENOR SIGNO_DIV C_P MAYOR 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_p",58, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // etiqueta_cierre_p ::= error 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_cierre_p",58, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // bloque_parametros_gcic ::= bloque_parametros_contenido_gcic MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_gcic",61, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // bloque_parametros_gcic ::= error bloque_parametros_gcic 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros gcic"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_gcic",61, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // bloque_parametros_gcic ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_gcic",61, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // bloque_parametros_link ::= bloque_parametros_contenido_link MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_link",62, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // bloque_parametros_link ::= error bloque_parametros_link 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros link"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_link",62, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // bloque_parametros_link ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_link",62, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // bloque_parametros_body ::= bloque_parametros_contenido_body MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_body",63, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // bloque_parametros_body ::= error bloque_parametros_body 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros body"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_body",63, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // bloque_parametros_body ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_body",63, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // bloque_parametros_input ::= bloque_parametros_contenido_input MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_input",64, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // bloque_parametros_input ::= error bloque_parametros_input 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros input"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_input",64, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // bloque_parametros_input ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_input",64, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // bloque_parametros_textarea ::= bloque_parametros_contenido_textarea MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_textarea",65, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // bloque_parametros_textarea ::= error bloque_parametros_textarea 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros textarea"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_textarea",65, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // bloque_parametros_textarea ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_textarea",65, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // bloque_parametros_div ::= bloque_parametros_contenido_div MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_div",66, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // bloque_parametros_div ::= error bloque_parametros_div 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros div"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_div",66, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // bloque_parametros_div ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_div",66, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // bloque_parametros_img ::= bloque_parametros_contenido_img MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_img",67, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // bloque_parametros_img ::= error bloque_parametros_img 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros img"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_img",67, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // bloque_parametros_img ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_img",67, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // bloque_parametros_label ::= bloque_parametros_contenido_label MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_label",68, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // bloque_parametros_label ::= error bloque_parametros_label 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros label"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_label",68, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // bloque_parametros_label ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_label",68, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // bloque_parametros_button ::= bloque_parametros_contenido_button MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = listadoParametros; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_button",69, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // bloque_parametros_button ::= error bloque_parametros_button 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 System.out.println("Error parametros button"); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_button",69, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // bloque_parametros_button ::= error MAYOR 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_button",69, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // bloque_parametros_contenido_gcic ::= bloque_parametros_contenido_gcic parametros_gcic 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_gcic",70, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // bloque_parametros_contenido_gcic ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_gcic",70, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // bloque_parametros_contenido_link ::= bloque_parametros_contenido_link parametros_link 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_link",71, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // bloque_parametros_contenido_link ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_link",71, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // bloque_parametros_contenido_body ::= bloque_parametros_contenido_body parametros_background 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_body",72, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // bloque_parametros_contenido_body ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_body",72, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // bloque_parametros_contenido_input ::= bloque_parametros_contenido_input parametros_input 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_input",73, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // bloque_parametros_contenido_input ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_input",73, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // bloque_parametros_contenido_textarea ::= bloque_parametros_contenido_textarea parametros_textarea 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_textarea",74, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // bloque_parametros_contenido_textarea ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_textarea",74, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // bloque_parametros_contenido_div ::= bloque_parametros_contenido_div parametros_div 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_div",75, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // bloque_parametros_contenido_div ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_div",75, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // bloque_parametros_contenido_img ::= bloque_parametros_contenido_img parametros_img 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_img",76, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // bloque_parametros_contenido_img ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_img",76, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // bloque_parametros_contenido_label ::= bloque_parametros_contenido_label parametros_letras 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_label",77, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // bloque_parametros_contenido_label ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_label",77, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // bloque_parametros_contenido_button ::= bloque_parametros_contenido_button parametros_button 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		int listadoParametrosleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int listadoParametrosright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		ArrayList<ParametroEtiquetaInterno> listadoParametros = (ArrayList<ParametroEtiquetaInterno>)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = agregarParametroEtiqueta(listadoParametros, parametro); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_button",78, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // bloque_parametros_contenido_button ::= 
            {
              ArrayList<ParametroEtiquetaInterno> RESULT =null;
		 RESULT = agregarParametroEtiqueta(null, null); 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("bloque_parametros_contenido_button",78, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // parametros_gcic ::= parametro_unidad_id 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_gcic",79, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // parametros_gcic ::= parametro_unidad_name 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_gcic",79, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // parametros_link ::= parametro_unidad_href 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_link",80, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // parametros_input ::= parametro_unidad_type 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_input",81, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // parametros_input ::= parametros_letras 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_input",81, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // parametros_textarea ::= parametro_unidad_cols 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_textarea",82, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // parametros_textarea ::= parametro_unidad_rows 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_textarea",82, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // parametros_textarea ::= parametros_letras 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_textarea",82, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // parametros_div ::= parametro_unidad_class 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_div",83, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // parametros_div ::= parametros_letras 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_div",83, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // parametros_div ::= parametros_background 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_div",83, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // parametros_img ::= parametro_unidad_src 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_img",87, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // parametros_img ::= parametro_unidad_width 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_img",87, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // parametros_img ::= parametro_unidad_height 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_img",87, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // parametros_img ::= parametro_unidad_alt 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_img",87, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // parametros_img ::= parametro_unidad_id 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_img",87, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // parametros_letras ::= parametro_unidad_font_size 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_letras",86, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // parametros_letras ::= parametro_unidad_font_family 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_letras",86, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // parametros_letras ::= parametro_unidad_text_align 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_letras",86, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // parametros_letras ::= parametro_unidad_id 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_letras",86, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // parametros_letras ::= parametro_unidad_color 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_letras",86, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // parametros_button ::= parametro_unidad_onclick 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_button",85, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // parametros_button ::= parametros_letras 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_button",85, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // parametros_button ::= parametros_background 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_button",85, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // parametros_background ::= parametro_unidad_background 
            {
              ParametroEtiquetaInterno RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		ParametroEtiquetaInterno parametro = (ParametroEtiquetaInterno)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = parametro; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_background",84, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // parametro_unidad_href ::= CORCH_INI HREF IGUAL TEXT_VALUE CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "href", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						  		analizarParametroEtiqueta(posicion);
								//direccionRedirect = valor.getLexema().replaceAll("â€œ","\"").replaceAll("â€?","\"").replaceAll("â€˜","\'").replaceAll("â€™","\'");
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
						 	
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_href",88, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // parametro_unidad_background ::= CORCH_INI BACKGROUND IGUAL parametro_valor_color CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "background", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						   		analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
						    
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_background",89, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // parametro_unidad_color ::= CORCH_INI COLOR IGUAL parametro_valor_color CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "color", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						   		analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
						    
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_color",90, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // parametro_unidad_font_size ::= CORCH_INI FONT_SIZE IGUAL parametro_valor_size CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "font-size", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						    	analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_font_size",91, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // parametro_unidad_font_family ::= CORCH_INI FONT_FAMILY IGUAL FONT_VALUE CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "font-family", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						    	analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_font_family",92, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // parametro_unidad_text_align ::= CORCH_INI TEXT_ALIGN IGUAL ALIGN_VALUE CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "text-align", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
						    	analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_text_align",93, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // parametro_unidad_type ::= CORCH_INI TYPE IGUAL parametro_valor_type CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "type", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_type",94, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // parametro_unidad_id ::= CORCH_INI ID IGUAL parametro_valor_id CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "id", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_id",95, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // parametro_unidad_name ::= CORCH_INI NAME IGUAL parametro_valor_name CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "name", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_name",96, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // parametro_unidad_cols ::= CORCH_INI COLS IGUAL DIGIT_VALUE CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "cols", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_cols",97, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // parametro_unidad_rows ::= CORCH_INI ROWS IGUAL DIGIT_VALUE CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "rows", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_rows",98, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // parametro_unidad_class ::= CORCH_INI CLASS IGUAL parametro_valor_class CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "class", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_class",99, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // parametro_unidad_src ::= CORCH_INI SRC IGUAL TEXT_VALUE CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "src", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_src",100, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // parametro_unidad_width ::= CORCH_INI WIDTH IGUAL parametro_valor_size CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "width", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_width",101, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // parametro_unidad_height ::= CORCH_INI HEIGHT IGUAL parametro_valor_size CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "height", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_height",102, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // parametro_unidad_alt ::= CORCH_INI ALT IGUAL parametro_valor_name CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "alt", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_alt",103, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // parametro_unidad_onclick ::= CORCH_INI ONCLICK IGUAL PROCESS_VAL CORCH_FIN 
            {
              ParametroEtiquetaInterno RESULT =null;
		int posicionleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int posicionright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Token posicion = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
						  		tablaSimbolosEtiquetas.declararNuevoElemento(etiqueta, "onclick", valor.getLexema(), numeroEtiqueta, posicion.getLinea(), posicion.getColumna());
								analizarParametroEtiqueta(posicion);
								RESULT = new ParametroEtiquetaInterno(posicion.getTipoToken(), valor.getLexema());
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_unidad_onclick",104, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // parametro_valor_color ::= COLOR_HEX 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_color",105, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // parametro_valor_color ::= COLOR_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_color",105, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // parametro_valor_size ::= PIXEL_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_size",106, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // parametro_valor_size ::= PERCE_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_size",106, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // parametro_valor_type ::= TEXT 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_type",107, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // parametro_valor_type ::= NUMBER 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_type",107, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // parametro_valor_type ::= RADIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_type",107, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // parametro_valor_type ::= CHECKBOX 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_type",107, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // parametro_valor_id ::= COLOR_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // parametro_valor_id ::= PIXEL_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // parametro_valor_id ::= PERCE_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // parametro_valor_id ::= FONT_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // parametro_valor_id ::= ALIGN_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // parametro_valor_id ::= TEXT 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // parametro_valor_id ::= NUMBER 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // parametro_valor_id ::= RADIO 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // parametro_valor_id ::= CHECKBOX 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // parametro_valor_id ::= DIGIT_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // parametro_valor_id ::= ROW 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // parametro_valor_id ::= COLUMN 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // parametro_valor_id ::= ID_VALUE_STR 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_id",108, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // parametro_valor_name ::= TEXT_VALUE 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_name",109, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // parametro_valor_name ::= parametro_valor_reservado 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_name",109, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // parametro_valor_class ::= ROW 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_class",110, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // parametro_valor_class ::= COLUMN 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_class",110, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // parametro_valor_reservado ::= COLOR_HEX 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_reservado",111, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // parametro_valor_reservado ::= PROCESS_VAL 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_reservado",111, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // parametro_valor_reservado ::= parametro_valor_id 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_valor_reservado",111, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserInsert$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserInsert$do_action(
    int                        CUP$ParserInsert$act_num,
    java_cup.runtime.lr_parser CUP$ParserInsert$parser,
    java.util.Stack            CUP$ParserInsert$stack,
    int                        CUP$ParserInsert$top)
    throws java.lang.Exception
    {
              return CUP$ParserInsert$do_action_part00000000(
                               CUP$ParserInsert$act_num,
                               CUP$ParserInsert$parser,
                               CUP$ParserInsert$stack,
                               CUP$ParserInsert$top);
    }
}

}
